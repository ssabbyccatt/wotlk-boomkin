{"version":3,"file":"sim-8ac72b1e.chunk.js","sources":["../../../ui/balance_druid/inputs.ts","../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { BalanceDruid_Options as DruidOptions, BalanceDruid_Rotation_RotationType as RotationType } from '../core/proto/druid.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { Target } from '../core/target.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecBalanceDruid>({\n    fieldName: 'innervateTarget',\n    id: ActionId.fromSpellId(29166),\n    extraCssClasses: [\n        'within-raid-sim-hide',\n    ],\n    getValue: (player: Player<Spec.SpecBalanceDruid>) => player.getSpecOptions().innervateTarget?.targetIndex != NO_TARGET,\n    setValue: (eventID: EventID, player: Player<Spec.SpecBalanceDruid>, newValue: boolean) => {\n        const newOptions = player.getSpecOptions();\n        newOptions.innervateTarget = RaidTarget.create({\n            targetIndex: newValue ? 0 : NO_TARGET,\n        });\n        player.setSpecOptions(eventID, newOptions);\n    },\n});\n\nexport const BalanceDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tlabelTooltip: 'If set to \\'Adaptive\\', will dynamically adjust rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Adaptive', value: RotationType.Adaptive },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeSpecOptionsBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'battleRes',\n\t\t\tlabel: 'Use Battle Res',\n\t\t\tlabelTooltip: 'Cast Battle Res on an ally sometime during the encounter.',\n\t\t}),\n\t\tInputHelpers.makeSpecOptionsBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useIs',\n\t\t\tlabel: 'Use Insect Swarm',\n\t\t\tlabelTooltip: 'Should the rotation use Insect Swarm.',\n\t\t}),\n\t\tInputHelpers.makeSpecOptionsBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useMf',\n\t\t\tlabel: 'Use Moonfire',\n\t\t\tlabelTooltip: 'Should the rotation use Moonfire.',\n\t\t}),\n\t\tInputHelpers.makeSpecOptionsNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'mfInsideEclipseThreshold',\n\t\t\tlabel: 'Moonfire inside eclipse max timing',\n\t\t\tlabelTooltip: 'Max eclipse uptime at which Moonfire can be applied/refreshed. 15 = never refresh,  0= always refresh.',\n\t\t}),\n\t\tInputHelpers.makeSpecOptionsNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'isInsideEclipseThreshold',\n\t\t\tlabel: 'Insect Swarm inside eclipse max timing',\n\t\t\tlabelTooltip: 'Max eclipse uptime at which Insect Swarm can be applied/refreshed. 15 = never refresh,  0= always refresh.',\n\t\t}),\n\t],\n};\n","import {Consumes, Debuffs, IndividualBuffs, RaidBuffs, TristateEffect} from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport { BalanceDruid_Rotation as BalanceDruidRotation, BalanceDruid_Options as BalanceDruidOptions, BalanceDruid_Rotation_RotationType as RotationType } from '../core/proto/druid.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n    name: 'Standard',\n    data: SavedTalents.create({\n        talentsString: '510022312503135231351--520033',\n    }),\n};\n\nexport const DefaultRotation = BalanceDruidRotation.create({\n\ttype: RotationType.Adaptive,\n});\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n\tuseIs: true,\n\tuseMf: true\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tdefaultPotion: Potions.PotionOfSpeed,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tdivineSpirit: true,\n\ttrueshotAura: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\ttotemOfWrath: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\twrathOfAirTotem: true,\n\tsanctifiedRetribution: true,\n\tbloodlust: true,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tvampiricTouch: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tsunderArmor: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n});\n\nexport const P1_PRESET = {\n\tname: 'P1 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\n            \"id\": 40467,\n            \"enchant\": 50368,\n            \"gems\": [\n                    41285,\n                    39998\n\t\t\t]\n        },\n        {\n            \"id\": 44661,\n            \"gems\": [\n            \t40026\n\t\t\t]\n        },\n        {\n            \"id\": 40470,\n            \"enchant\": 50338,\n            \"gems\": [\n             39998\n            ]\n        },\n        {\n            \"id\": 40469,\n            \"enchant\":  60692,\n            \"gems\": [\n\t\t\t\t 39998,\n\t\t\t\t 40026\n            ]\n        },\n        {\n            \"id\": 40561,\n            \"enchant\":  54793,\n            \"gems\": [\n             39998\n            ]\n        },\n        {\n            \"id\": 40560,\n            \"enchant\": 41602\n        },\n        {\n            \"id\": 40558,\n            \"enchant\": 55016\n        },\n        {\n            \"id\": 44008,\n            \"enchant\":  60767,\n            \"gems\": [\n            \t39998\n            ]\n        },\n        {\n            \"id\": 40466,\n            \"enchant\":  54999,\n            \"gems\": [ \n            \t39998\n            ]\n        },\n        {\n            \"id\": 40399\n        },\n        {\n            \"id\": 40080\n        },\n        {\n            \"id\": 40255\n        },\n        {\n            \"id\": 40432\n        },\n        {\n            \"id\": 40405,\n            \"enchant\": 55642\n        },\n        {\n            \"id\": 40395,\n            \"enchant\":  60714\n        },\n        {\n            \"id\": 40192\n        },\n        {\n            \"id\": 40321\n        }\n    ]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { BalanceDruid, BalanceDruid_Rotation as BalanceDruidRotation, DruidTalents as DruidTalents, BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n    constructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n        super(parentElem, player, {\n            cssClass: 'balance-druid-sim-ui',\n            // List any known bugs / issues here and they'll be shown on the site.\n            knownIssues: [\n            ],\n\n            // All stats for which EP should be calculated.\n            epStats: [\n                Stat.StatIntellect,\n                Stat.StatSpirit,\n                Stat.StatSpellPower,\n                Stat.StatArcaneSpellPower,\n                Stat.StatNatureSpellPower,\n                Stat.StatSpellHit,\n                Stat.StatSpellCrit,\n                Stat.StatSpellHaste,\n                Stat.StatMP5,\n            ],\n            // Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n            epReferenceStat: Stat.StatSpellPower,\n            // Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n            displayStats: [\n                Stat.StatHealth,\n                Stat.StatStamina,\n                Stat.StatIntellect,\n                Stat.StatSpirit,\n                Stat.StatSpellPower,\n                Stat.StatArcaneSpellPower,\n                Stat.StatNatureSpellPower,\n                Stat.StatSpellHit,\n                Stat.StatSpellCrit,\n                Stat.StatSpellHaste,\n                Stat.StatMP5,\n            ],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.54,\n\t\t\t\t\t[Stat.StatSpirit]: 0.1,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatArcaneSpellPower]: 1,\n\t\t\t\t\t[Stat.StatNatureSpellPower]: 0,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.84,\n\t\t\t\t\t[Stat.StatSpellHaste]: 1.29,\n\t\t\t\t\t[Stat.StatMP5]: 0.00,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\t\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\t\t\t},\n\n            // IconInputs to include in the 'Player' section on the settings tab.\n            playerIconInputs: [\n                DruidInputs.SelfInnervate,\n            ],\n            // Inputs to include in the 'Rotation' section on the settings tab.\n            rotationInputs: DruidInputs.BalanceDruidRotationConfig,\n            // Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n            includeBuffDebuffInputs: [\n            ],\n            excludeBuffDebuffInputs: [\n            ],\n            // Inputs to include in the 'Other' section on the settings tab.\n            otherInputs: {\n                inputs: [\n                    OtherInputs.TankAssignment,\n                ],\n            },\n            encounterPicker: {\n                // Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n                showExecuteProportion: false,\n            },\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["SelfInnervate","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","BalanceDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","labelTooltip","values","name","value","RotationType","Adaptive","InputHelpers.makeSpecOptionsBooleanInput","InputHelpers.makeSpecOptionsNumberInput","StandardTalents","data","SavedTalents","talentsString","DefaultRotation","BalanceDruidRotation","type","DefaultOptions","BalanceDruidOptions","useIs","useMf","DefaultConsumes","Consumes","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","defaultPotion","Potions","PotionOfSpeed","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","strengthOfEarthTotem","arcaneBrilliance","divineSpirit","trueshotAura","leaderOfThePack","icyTalons","totemOfWrath","moonkinAura","wrathOfAirTotem","sanctifiedRetribution","bloodlust","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","vampiricTouch","DefaultDebuffs","Debuffs","sunderArmor","faerieFire","bloodFrenzy","ebonPlaguebringer","heartOfTheCrusader","judgementOfWisdom","P1_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatArcaneSpellPower","StatNatureSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","Presets.P1_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","DruidInputs.SelfInnervate","rotationInputs","DruidInputs.BalanceDruidRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","encounterPicker","showExecuteProportion","presets"],"mappings":"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"}