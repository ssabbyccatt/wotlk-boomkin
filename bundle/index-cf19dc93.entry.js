import"./modulepreload-polyfill-e60e1b44.chunk.js";import{P as t,n as e,J as s,K as a,L as n,N as r,O as i,Q as o,U as l,V as c,S as d,W as m,X as p,Y as h,Z as u,_ as g,$ as f,a0 as y}from"./individual_sim_ui-2f0e86c1.chunk.js";import{m as E,T as P,ar as b,af as w,S as k,aE as S,bo as T,cJ as I,U as v,b9 as C,cK as D,aO as R,aq as A,al as B,X as U,a4 as x,cL as O,C as L,cM as F,cN as M,b7 as H,cO as N,A as W,b4 as G,cP as V,l as _,as as j,an as J,ai as z,V as K,ah as q,bm as Q,E as X,a as Y,ak as Z,a$ as tt,g as et,cQ as st,_ as at,P as nt,ag as rt,bz as it,cR as ot,bD as lt}from"./raid_sim_action-a61fd70b.chunk.js";import{D as ct,a as dt,F as mt,b as pt,c as ht,P as ut,O as gt,d as ft,U as yt,e as Et,f as Pt}from"./sim-0d8be463.chunk.js";import{B as bt,D as wt,S as kt,a as St,b as Tt,P as It}from"./sim-8ac72b1e.chunk.js";import{F as vt,D as Ct,S as Dt,a as Rt,b as At,P as Bt}from"./sim-8ac7f2e3.chunk.js";import{F as Ut,D as xt,S as Ot,a as Lt,b as Ft,P as Mt}from"./sim-01870b06.chunk.js";import{E as Ht,D as Nt,S as Wt,a as Gt,b as Vt,P as _t}from"./sim-ea4d6d8b.chunk.js";import{E as jt,D as Jt,S as $t,a as zt,b as Kt,P as qt}from"./sim-fc73c60c.chunk.js";import{H as Qt,D as Xt,B as Yt,a as Zt,b as te,P as ee,M as se,c as ae,S as ne}from"./sim-380483cf.chunk.js";import{M as re,D as ie,A as oe,a as le,b as ce,P as de,c as me,F as pe,d as he,e as ue,f as ge,g as fe,h as ye,i as Ee,j as Pe,k as be}from"./sim-399cd770.chunk.js";import{R as we,D as ke,C as Se,a as Te,b as Ie,P as ve}from"./sim-9d7b093d.chunk.js";import{R as Ce,D as De,A as Re,a as Ae,b as Be,P as Ue,c as xe,d as Oe,e as Le,f as Fe}from"./sim-1f7bdd4b.chunk.js";import{P as Me,D as He,G as Ne,a as We,b as Ge,c as Ve}from"./sim-188090b6.chunk.js";import{S as _e,D as je,a as Je,b as $e,c as ze,P as Ke}from"./sim-a85623d2.chunk.js";import{S as qe,D as Qe,a as Xe,b as Ye,c as Ze,P as ts}from"./sim-b5aad34d.chunk.js";import{W as es,A as ss,a as as,D as ns,b as rs,P as is,c as os,F as ls,d as cs}from"./sim-ab102a25.chunk.js";import{P as ds,D as ms,I as ps,a as hs,b as us,c as gs}from"./sim-7b81d405.chunk.js";import{W as fs,A as ys,a as Es,b as Ps,D as bs,O as ws}from"./sim-88da4e15.chunk.js";import"./totem_inputs-eec6567e.chunk.js";class ks extends E{constructor(t,e,s,a){super(t,"raid-target-picker-root",s,a),this.rootElem.classList.add("dropdown-root"),this.config=a,this.raid=e,this.curPlayer=this.raid.getPlayerFromRaidTarget(a.getValue(s)),this.curRaidTarget=this.getInputValue(),this.noTargetOption={iconUrl:"",text:a.noTargetLabel,color:"black",value:null,isDropdown:!0},this.rootElem.innerHTML='\n\t\t\t<div class="dropdown-button raid-target-picker-button"></div>\n\t\t\t<div class="dropdown-panel raid-target-picker-dropdown"></div>\n    ',this.buttonElem=this.rootElem.getElementsByClassName("raid-target-picker-button")[0],this.dropdownElem=this.rootElem.getElementsByClassName("raid-target-picker-dropdown")[0],this.buttonElem.addEventListener("click",(t=>{t.preventDefault()})),this.currentOptions=[],this.updateOptions(P.nextEventID()),a.compChangeEmitter.on((t=>{this.updateOptions(t)})),this.init()}makeTargetOptions(){const t=this.raid.getPlayers().filter((t=>null!=t)).map((t=>({iconUrl:t.getTalentTreeIcon(),text:t.getLabel(),color:t.getClassColor(),isDropdown:!0,value:t})));return[this.noTargetOption].concat(t)}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curRaidTarget;this.curRaidTarget=this.getInputValue(),b.equals(e,this.curRaidTarget)?this.setInputValue(this.curRaidTarget):this.inputChanged(t)}makeOption(t){const e=ks.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.value,this.curRaidTarget=this.getInputValue(),this.inputChanged(P.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeRaidTarget():w()}setInputValue(t){this.curRaidTarget=b.clone(t),this.curPlayer=this.raid.getPlayerFromRaidTarget(this.curRaidTarget);const e=this.currentOptions.find((t=>t.value==this.curPlayer));e&&(this.buttonElem.innerHTML="",this.buttonElem.appendChild(ks.makeOptionElem(e)))}static makeOptionElem(t){const e=document.createElement("div");e.classList.add("dropdown-option-container");const s=document.createElement("div");if(s.classList.add("raid-target-picker-option"),e.appendChild(s),t.isDropdown&&s.classList.add("dropdown-option"),t.color&&(s.style.backgroundColor=t.color),t.iconUrl){const e=document.createElement("img");e.src=t.iconUrl,e.classList.add("raid-target-picker-icon"),s.appendChild(e)}if(t.text){const e=document.createElement("span");e.textContent=t.text,e.classList.add("raid-target-picker-label"),s.appendChild(e)}return e}}const Ss={[k.SpecDeathknight]:(t,e)=>new ct(t,e),[k.SpecBalanceDruid]:(t,e)=>new bt(t,e),[k.SpecFeralDruid]:(t,e)=>new vt(t,e),[k.SpecFeralTankDruid]:(t,e)=>new Ut(t,e),[k.SpecElementalShaman]:(t,e)=>new Ht(t,e),[k.SpecEnhancementShaman]:(t,e)=>new jt(t,e),[k.SpecHunter]:(t,e)=>new Qt(t,e),[k.SpecMage]:(t,e)=>new re(t,e),[k.SpecRogue]:(t,e)=>new we(t,e),[k.SpecRetributionPaladin]:(t,e)=>new Ce(t,e),[k.SpecProtectionPaladin]:(t,e)=>new Me(t,e),[k.SpecShadowPriest]:(t,e)=>new _e(t,e),[k.SpecSmitePriest]:(t,e)=>new qe(t,e),[k.SpecWarrior]:(t,e)=>new es(t,e),[k.SpecProtectionWarrior]:(t,e)=>new ds(t,e),[k.SpecWarlock]:(t,e)=>new fs(t,e)},Ts=[{spec:k.SpecDeathknight,rotation:dt,talents:mt.data,specOptions:pt,consumes:ht,defaultName:"Frost DK",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ut.gear},[S.Horde]:{1:ut.gear}},otherDefaults:gt,tooltip:"Frost Death Knight",iconUrl:I[v.ClassDeathknight][1]},{spec:k.SpecDeathknight,rotation:ft,talents:yt.data,specOptions:Et,consumes:ht,defaultName:"DW Unholy DK",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Pt.gear},[S.Horde]:{1:Pt.gear}},otherDefaults:gt,tooltip:"Dual Wield Unholy DK",iconUrl:I[v.ClassDeathknight][2]},{spec:k.SpecBalanceDruid,rotation:wt,talents:kt.data,specOptions:St,consumes:Tt,defaultName:"Balance Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:It.gear},[S.Horde]:{1:It.gear}},tooltip:C[k.SpecBalanceDruid],iconUrl:D[k.SpecBalanceDruid]},{spec:k.SpecFeralDruid,rotation:Ct,talents:Dt.data,specOptions:Rt,consumes:At,defaultName:"Cat Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Bt.gear},[S.Horde]:{1:Bt.gear}},tooltip:C[k.SpecFeralDruid],iconUrl:D[k.SpecFeralDruid]},{spec:k.SpecFeralTankDruid,rotation:xt,talents:Ot.data,specOptions:Lt,consumes:Ft,defaultName:"Bear Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Mt.gear},[S.Horde]:{1:Mt.gear}},tooltip:C[k.SpecFeralTankDruid],iconUrl:D[k.SpecFeralTankDruid]},{spec:k.SpecHunter,rotation:Xt,talents:Yt.data,specOptions:Zt,consumes:te,defaultName:"BM Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ee.gear},[S.Horde]:{1:ee.gear}},tooltip:"BM Hunter",iconUrl:I[v.ClassHunter][0]},{spec:k.SpecHunter,rotation:Xt,talents:se.data,specOptions:ae,consumes:te,defaultName:"BM Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ee.gear},[S.Horde]:{1:ee.gear}},tooltip:"MM Hunter",iconUrl:I[v.ClassHunter][1]},{spec:k.SpecHunter,rotation:Xt,talents:ne.data,specOptions:ae,consumes:te,defaultName:"SV Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ee.gear},[S.Horde]:{1:ee.gear}},tooltip:"SV Hunter",iconUrl:I[v.ClassHunter][2]},{spec:k.SpecMage,rotation:ie,talents:oe.data,specOptions:le,consumes:ce,defaultName:"Arcane Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:de.gear},[S.Horde]:{1:de.gear}},tooltip:"Arcane Mage",iconUrl:I[v.ClassMage][0]},{spec:k.SpecMage,rotation:me,talents:pe.data,specOptions:he,consumes:ue,defaultName:"Fire Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ge.gear},[S.Horde]:{1:ge.gear}},tooltip:"Fire Mage",iconUrl:I[v.ClassMage][1]},{spec:k.SpecMage,rotation:fe,talents:ye.data,specOptions:Ee,consumes:Pe,defaultName:"Frost Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:be.gear},[S.Horde]:{1:be.gear}},tooltip:"Frost Mage",iconUrl:I[v.ClassMage][2]},{spec:k.SpecRogue,rotation:ke,talents:Se.data,specOptions:Te,consumes:Ie,defaultName:"Combat Rogue",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ve.gear},[S.Horde]:{1:ve.gear}},tooltip:"Combat Rogue",iconUrl:D[k.SpecRogue]},{spec:k.SpecElementalShaman,rotation:Nt,talents:Wt.data,specOptions:Gt,consumes:Vt,defaultName:"Ele Shaman",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDraenei,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:_t.gear},[S.Horde]:{1:_t.gear}},tooltip:C[k.SpecElementalShaman],iconUrl:D[k.SpecElementalShaman]},{spec:k.SpecEnhancementShaman,rotation:Jt,talents:$t.data,specOptions:zt,consumes:Kt,defaultName:"Enh Shaman",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDraenei,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:qt.gear},[S.Horde]:{1:qt.gear}},tooltip:C[k.SpecEnhancementShaman],iconUrl:D[k.SpecEnhancementShaman]},{spec:k.SpecShadowPriest,rotation:je,talents:Je.data,specOptions:$e,consumes:ze,defaultName:"Shadow Priest",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDwarf,[S.Horde]:T.RaceUndead},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ke.gear},[S.Horde]:{1:Ke.gear}},tooltip:C[k.SpecShadowPriest],iconUrl:D[k.SpecShadowPriest]},{spec:k.SpecSmitePriest,rotation:Qe,talents:Xe.data,specOptions:Ye,consumes:Ze,defaultName:"Smite Priest",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDwarf,[S.Horde]:T.RaceUndead},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ts.gear},[S.Horde]:{1:ts.gear}},tooltip:C[k.SpecSmitePriest],iconUrl:D[k.SpecSmitePriest]},{spec:k.SpecWarrior,rotation:ss,talents:as.data,specOptions:ns,consumes:rs,defaultName:"Arms Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:is.gear},[S.Horde]:{1:is.gear}},tooltip:"Arms Warrior",iconUrl:I[v.ClassWarrior][0]},{spec:k.SpecWarrior,rotation:os,talents:ls.data,specOptions:ns,consumes:rs,defaultName:"Fury Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:cs.gear},[S.Horde]:{1:cs.gear}},tooltip:"Fury Warrior",iconUrl:I[v.ClassWarrior][1]},{spec:k.SpecProtectionWarrior,rotation:ms,talents:ps.data,specOptions:hs,consumes:us,defaultName:"Prot Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:gs.gear},[S.Horde]:{1:gs.gear}},tooltip:"Protection Warrior",iconUrl:I[v.ClassWarrior][2]},{spec:k.SpecRetributionPaladin,rotation:De,talents:Re.data,specOptions:Ae,consumes:Be,defaultName:"Ret Paladin",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceBloodElf},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ue.gear,2:xe.gear,3:Oe.gear,4:Le.gear,5:Fe.gear},[S.Horde]:{1:Ue.gear,2:xe.gear,3:Oe.gear,4:Le.gear,5:Fe.gear}},tooltip:"Ret Paladin",iconUrl:I[v.ClassPaladin][2]},{spec:k.SpecProtectionPaladin,rotation:He,talents:Ne.data,specOptions:We,consumes:Ge,defaultName:"Prot Paladin",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceBloodElf},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ve.gear},[S.Horde]:{1:Ve.gear}},tooltip:"Protection Paladin",iconUrl:I[v.ClassPaladin][1]},{spec:k.SpecWarlock,rotation:ys,talents:Es.data,specOptions:Ps,consumes:bs,defaultName:"Aff Warlock",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceBloodElf},defaultGear:{[S.Unknown]:{},[S.Alliance]:{},[S.Horde]:{}},otherDefaults:ws,tooltip:"Affliction Warlock: by default casts CoE with Malediction",iconUrl:I[v.ClassWarlock][0]}],Is=[...new Set(Ts.map((t=>t.spec)))],vs=[{buffBotId:"Bear",deprecated:!0,spec:k.SpecBalanceDruid,name:"Bear",tooltip:"Bear: Adds Gift of the Wild, an Innervate, Faerie Fire, and Leader of the Pack.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.giftOfTheWild=Math.max(e.buffs.giftOfTheWild,R.TristateEffectRegular),e.buffs.thorns=Math.max(e.buffs.thorns,R.TristateEffectRegular),e.debuffs.faerieFire=Math.max(e.debuffs.faerieFire,R.TristateEffectRegular),e.buffs.leaderOfThePack=Math.max(e.buffs.leaderOfThePack,R.TristateEffectRegular);const a=t.getInnervateAssignment().targetIndex;if(a!=A){const t=Math.floor(a/5),s=a%5,n=e.parties[t].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Resto Druid",spec:k.SpecBalanceDruid,name:"Resto Druid",tooltip:"Resto Druid: Adds Improved Gift of the Wild, and an Innervate.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingtouch.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.giftOfTheWild=R.TristateEffectImproved,e.buffs.thorns=Math.max(e.buffs.thorns,R.TristateEffectRegular);const a=t.getInnervateAssignment().targetIndex;if(a!=A){const t=Math.floor(a/5),s=a%5,n=e.parties[t].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Dreamstate",spec:k.SpecBalanceDruid,name:"Dreamstate",tooltip:"Dreamstate: Adds Improved Gift of the Wild, an Innervate, and Improved Faerie Fire.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_faeriefire.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.giftOfTheWild=R.TristateEffectImproved,e.buffs.thorns=R.TristateEffectImproved,e.debuffs.faerieFire=R.TristateEffectImproved;const a=t.getInnervateAssignment().targetIndex;if(a!=A){const t=Math.floor(a/5),s=a%5,n=e.parties[t].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Mage",deprecated:!0,spec:k.SpecMage,name:"Mage",tooltip:"Mage: Adds Arcane Brilliance.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_arcaneintellect.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.arcaneBrilliance=!0}},{buffBotId:"Paladin",spec:k.SpecRetributionPaladin,name:"Holy Paladin",tooltip:"Holy Paladin: Adds a set of blessings.",iconUrl:I[v.ClassPaladin][0],modifyRaidProto:(t,e,s)=>{}},{buffBotId:"JoW Paladin",spec:k.SpecRetributionPaladin,name:"JoW Paladin",tooltip:"JoW Paladin: Adds a set of blessings and Judgement of Wisdom.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg",modifyRaidProto:(t,e,s)=>{e.debuffs.judgementOfWisdom=!0}},{buffBotId:"Holy Priest",spec:k.SpecShadowPriest,name:"Holy Priest",tooltip:"Holy Priest: Adds Improved PW Fortitude and Shadow Protection.",iconUrl:I[v.ClassPriest][1],modifyRaidProto:(t,e,s)=>{e.buffs.shadowProtection=!0,e.buffs.powerWordFortitude=R.TristateEffectImproved}},{buffBotId:"Divine Spirit Priest",spec:k.SpecShadowPriest,name:"Disc Priest",tooltip:"Disc Priest: Adds Improved PW Fort, Shadow Protection, Improved Divine Spirit and a Power Infusion.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.shadowProtection=!0,e.buffs.powerWordFortitude=R.TristateEffectImproved,e.buffs.divineSpirit=!0;const a=t.getPowerInfusionAssignment().targetIndex;if(a!=A){const t=Math.floor(a/5),s=a%5,n=e.parties[t].players[s];n.buffs&&n.buffs.powerInfusions++}}},{buffBotId:"Rogue",spec:k.SpecShadowPriest,name:"Rogue",tooltip:"Rogue: Adds TotT.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_rogue_tricksofthetrade.jpg",modifyRaidProto:(t,e,s)=>{const a=t.getTricksOfTheTradeAssignment().targetIndex;if(a!=A){const t=Math.floor(a/5),s=a%5,n=e.parties[t].players[s];n.buffs&&n.buffs.tricksOfTheTrades++}}},{buffBotId:"Resto Shaman",spec:k.SpecElementalShaman,name:"Resto Shaman",tooltip:"Resto Shaman: Adds Bloodlust, Mana Spring Totem, Mana Tide Totem, Strength of Earth Totem. Chooses air totem based on party composition.",iconUrl:I[v.ClassShaman][2],modifyRaidProto:(t,e,s)=>{e.buffs.bloodlust=!0,e.buffs.manaSpringTotem=R.TristateEffectImproved,s.buffs.manaTideTotems++;const a=[k.SpecBalanceDruid,k.SpecMage,k.SpecShadowPriest,k.SpecSmitePriest,k.SpecEnhancementShaman,k.SpecElementalShaman,k.SpecWarlock],n=[k.SpecRetributionPaladin,k.SpecRogue,k.SpecWarrior,k.SpecProtectionWarrior,k.SpecFeralDruid,k.SpecFeralTankDruid],[r,i]=[a,n].map((t=>s.players.filter((t=>t.class!=v.ClassUnknown)).map((t=>B(t))).filter((e=>t.includes(e))).length));r>=i?e.buffs.wrathOfAirTotem=!0:e.buffs.windfuryTotem=R.TristateEffectRegular}},{buffBotId:"Arms Warrior",deprecated:!0,spec:k.SpecWarrior,name:"Arms Warrior",tooltip:"Arms Warrior: Adds Sunder Armor, Blood Frenzy, and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.battleShout=R.TristateEffectImproved;const a=e.debuffs;a.sunderArmor=!0,a.bloodFrenzy=!0}},{buffBotId:"Fury Warrior",deprecated:!0,spec:k.SpecWarrior,name:"Fury Warrior",tooltip:"Fury Warrior: Adds Sunder Armor and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg",modifyRaidProto:(t,e,s)=>{e.buffs.battleShout=R.TristateEffectImproved;e.debuffs.sunderArmor=!0}},{buffBotId:"Prot Warrior",deprecated:!0,spec:k.SpecWarrior,name:"Prot Warrior",tooltip:"Prot Warrior: Adds Sunder Armor.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg",modifyRaidProto:(t,e,s)=>{e.debuffs.sunderArmor=!0}}];class Cs{constructor(t,e){this.spec=0,this.name="",this.raidIndex=-1,this.innervateAssignment=w(),this.powerInfusionAssignment=w(),this.tricksOfTheTradeAssignment=w(),this.raidIndexChangeEmitter=new P,this.innervateAssignmentChangeEmitter=new P,this.powerInfusionAssignmentChangeEmitter=new P,this.tricksOfTheTradeAssignmentChangeEmitter=new P,this.changeEmitter=new P;const s=vs.find((e=>e.buffBotId==t));if(!s)throw new Error("No buff bot config with id '"+t+"'!");this.sim=e,this.settings=s,this.updateSettings(),[this.raidIndexChangeEmitter,this.innervateAssignmentChangeEmitter,this.powerInfusionAssignmentChangeEmitter,this.tricksOfTheTradeAssignmentChangeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((t=>e.raid.getParty(this.getPartyIndex()).changeEmitter.emit(t)))}updateSettings(){this.spec=this.settings.spec,this.name=this.settings.name}getLabel(){return`${this.name} (#${this.getRaidIndex()+1})`}getClass(){return U[this.settings.spec]}getClassColor(){return x[this.getClass()]}getRaidIndex(){return this.raidIndex}setRaidIndex(t,e){e!=this.raidIndex&&(this.raidIndex=e,P.freezeAllAndDo((()=>{this.raidIndexChangeEmitter.emit(t),this.sim.raid.compChangeEmitter.emit(t)})))}getPartyIndex(){return Math.floor(this.getRaidIndex()/5)}getInnervateAssignment(){return b.clone(this.innervateAssignment)}setInnervateAssignment(t,e){b.equals(e,this.innervateAssignment)||(this.innervateAssignment=b.clone(e),this.innervateAssignmentChangeEmitter.emit(t))}getPowerInfusionAssignment(){return b.clone(this.powerInfusionAssignment)}setPowerInfusionAssignment(t,e){b.equals(e,this.powerInfusionAssignment)||(this.powerInfusionAssignment=b.clone(e),this.powerInfusionAssignmentChangeEmitter.emit(t))}getTricksOfTheTradeAssignment(){return b.clone(this.tricksOfTheTradeAssignment)}setTricksOfTheTradeAssignment(t,e){b.equals(e,this.tricksOfTheTradeAssignment)||(this.tricksOfTheTradeAssignment=b.clone(e),this.tricksOfTheTradeAssignmentChangeEmitter.emit(t))}toProto(){return O.create({id:this.settings.buffBotId,raidIndex:this.getRaidIndex(),innervateAssignment:this.getInnervateAssignment(),powerInfusionAssignment:this.getPowerInfusionAssignment(),tricksOfTheTradeAssignment:this.getTricksOfTheTradeAssignment()})}fromProto(t,e){const s=vs.find((t=>t.buffBotId==e.id));if(!s)throw new Error("No buff bot config with id '"+e.id+"'!");this.settings=s,this.updateSettings(),P.freezeAllAndDo((()=>{this.setRaidIndex(t,e.raidIndex),this.setInnervateAssignment(t,e.innervateAssignment||w()),this.setPowerInfusionAssignment(t,e.powerInfusionAssignment||w()),this.setTricksOfTheTradeAssignment(t,e.tricksOfTheTradeAssignment||w())}))}clone(t){const e=new Cs(this.settings.buffBotId,this.sim);return e.fromProto(t,this.toProto()),e}}class Ds extends L{constructor(t,e){super(t,"assignments-picker-root"),this.changeEmitter=new P,this.raidSimUI=e,this.innervatesPicker=new As(this.rootElem,e),this.powerInfusionsPicker=new Bs(this.rootElem,e),this.tricksOfTheTradesPicker=new Us(this.rootElem,e)}}class Rs extends L{constructor(t,e){super(t,"assigned-buff-picker-root"),this.changeEmitter=new P,this.raidSimUI=e,this.targetPickers=[],this.playersContainer=document.createElement("fieldset"),this.playersContainer.classList.add("assigned-buff-players-container","settings-section"),this.rootElem.appendChild(this.playersContainer),this.update(),this.raidSimUI.changeEmitter.on((t=>{this.update()}))}update(){this.playersContainer.innerHTML=`\n\t\t\t<legend>${this.getTitle().toUpperCase()}</legend>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.style.display="none":this.rootElem.style.display="initial",this.targetPickers=e.map(((e,s)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player"),this.playersContainer.appendChild(a);const n=ks.makeOptionElem({iconUrl:e instanceof t?e.getTalentTreeIcon():e.settings.iconUrl,text:e.getLabel(),color:e.getClassColor(),isDropdown:!1});n.classList.add("raid-target-picker-root"),a.appendChild(n);const r=document.createElement("span");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);let i=null;i=new ks(a,this.raidSimUI.sim.raid,e,e instanceof t?{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,s)=>this.setPlayerValue(t,e,s)}:{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.changeEmitter,getValue:t=>this.getBuffBotValue(t),setValue:(t,e,s)=>this.setBuffBotValue(t,e,s)});const o={playerOrBot:e,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromRaidTarget(i.getInputValue())};return i.changeEmitter.on((t=>{o.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromRaidTarget(i.getInputValue())})),o}))}}class As extends Rs{getTitle(){return"Innervates"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((t=>t?.getClass()==v.ClassDruid))}getPlayerValue(t){return t.getSpecOptions().innervateTarget||w()}setPlayerValue(t,e,s){const a=e.getSpecOptions();a.innervateTarget=s,e.setSpecOptions(t,a)}getBuffBotValue(t){return t.getInnervateAssignment()}setBuffBotValue(t,e,s){e.setInnervateAssignment(t,s)}}class Bs extends Rs{getTitle(){return"Power Infusions"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((t=>t?.getClass()==v.ClassPriest)).filter((t=>{if(t instanceof Cs)return"Divine Spirit Priest"==t.settings.buffBotId;{const e=t;return!!e.getTalents().powerInfusion&&e.spec==k.SpecSmitePriest}}))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||w()}setPlayerValue(t,e,s){const a=e.getSpecOptions();a.powerInfusionTarget=s,e.setSpecOptions(t,a)}getBuffBotValue(t){return t.getPowerInfusionAssignment()}setBuffBotValue(t,e,s){e.setPowerInfusionAssignment(t,s)}}class Us extends Rs{getTitle(){return"Tricks of the Trades"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((t=>t?.getClass()==v.ClassRogue))}getPlayerValue(t){return t.getSpecOptions().tricksOfTheTradeTarget||w()}setPlayerValue(t,e,s){const a=e.getSpecOptions();a.tricksOfTheTradeTarget=s,e.setSpecOptions(t,a)}getBuffBotValue(t){return t.getTricksOfTheTradeAssignment()}setBuffBotValue(t,e,s){e.setTricksOfTheTradeAssignment(t,s)}}class xs extends L{constructor(t,s){super(t,"blessings-picker-root"),this.changeEmitter=new P,this.raidSimUI=s,this.assignments=F.clone(M(4)),this.rootElem.innerHTML='\n\t\t<table class="blessings-table">\n\t\t\t<tbody class="blessings-table-body">\n\t\t\t</tbody>\n\t\t</table>\n\t\t',this.rootElem.getElementsByClassName("blessings-table-header-row")[0];const a=this.rootElem.getElementsByClassName("blessings-table-body")[0],n=G.filter((t=>Is.includes(t))),r=[...Array(4).keys()];this.cols=[],this.rows=n.map((t=>{const s=document.createElement("tr");s.classList.add("blessings-table-row"),a.appendChild(s);const n=document.createElement("th");n.classList.add("blessings-table-header-cell"),s.appendChild(n);const i=document.createElement("img");return i.src=H[t],n.appendChild(i),tippy(i,{content:C[t],allowHTML:!0}),r.forEach((a=>{const n=document.createElement("td");n.classList.add("blessings-table-cell"),s.appendChild(n),this.cols[a]||this.cols.push([]),this.cols[a].push(n),new e(n,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:x[v.ClassPaladin],value:N.BlessingUnknown},{actionId:W.fromSpellId(25898),value:N.BlessingOfKings},{actionId:W.fromSpellId(48934),value:N.BlessingOfMight},{actionId:W.fromSpellId(48938),value:N.BlessingOfWisdom},{actionId:W.fromSpellId(25899),value:N.BlessingOfSanctuary}],equals:(t,e)=>t==e,zeroValue:N.BlessingUnknown,changedEvent:t=>t.changeEmitter,getValue:e=>e.assignments.paladins[a]?.blessings[t]||N.BlessingUnknown,setValue:(e,s,n)=>{s.assignments.paladins[a].blessings[t]!=n&&(s.assignments.paladins[a].blessings[t]=n,this.changeEmitter.emit(e))}})})),s})),this.setNumPaladins(s.getClassCount(v.ClassPaladin)),s.compChangeEmitter.on((t=>{this.setNumPaladins(s.getClassCount(v.ClassPaladin))}))}setNumPaladins(t){t=Math.min(t,4);for(let e=0;e<t;e++)this.cols[e].forEach((t=>t.classList.add("paladin-active")));for(let e=t;e<4;e++)this.cols[e].forEach((t=>t.classList.remove("paladin-active")))}getAssignments(){return F.clone(this.assignments)}setAssignments(t,e){this.assignments=F.clone(e),this.changeEmitter.emit(t)}}class Os extends s{constructor(t,e){super(t,"JSON Import",!0),this.simUI=e,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(t){const e=V.fromJsonString(t);this.simUI.fromProto(P.nextEventID(),e),this.close()}}class Ls extends a{constructor(t,e){super(t,"JSON Export",!0),this.simUI=e,this.init()}getData(){return JSON.stringify(V.toJson(this.simUI.toProto()),null,2)}}class Fs extends s{constructor(t,e){super(t,"WCL Import",!1),this.queryCounter=0,this.simUI=e,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport entire raid from a WCL report.<br>\n\t\t\t\tParties are a best guess based on buffs.<br>\n\t\t\t\tDouble check innervate/PI and paladin buffs in the settings after import.<br>\n\t\t\t\tDoes not support fight=last currently (will default any non-numeric fight ID to be 0)<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else first found fight will be used.<br>\n\t\t\t</p>\n\t\t"}getWCLBearerToken(){return fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}).then((t=>t.json())).then((t=>t.access_token)).catch((t=>{console.error(t)}))}queryWCL(t,e){const s={"Content-Type":"application/json",Authorization:`Bearer ${e}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;return this.queryCounter++,fetch(encodeURI(a),{method:"GET",headers:s}).then((t=>t.json()))}getURLInfo(t){let e={reportID:"",fightID:"0"};if(!t.includes("warcraftlogs.com"))return console.error("Invalid WCL URL",t,"must be from warcraftlogs.com"),e;let s=t.indexOf("fight="),a=t.indexOf("/reports/");if(-1===a)return console.error("Could not find report ID in URL",t),e;a+=9;if(-1!==s){s+=6;let a=parseInt(t.substring(s),10);isNaN(a)&&(a=0),e.fightID=a.toString()}else console.warn("Could not find fight ID in URL",t,"defaulting to fight 0");return e.reportID=t.substring(a,a+16)??"",e}getRateLimit(t){return this.queryWCL("\n\t  {\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }",t).then((t=>t.data.rateLimitData))}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait",this.doImport(t).then((()=>{this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}))}async doImport(t){if(!t.length)return void console.error("No import link provided!");let e=this.getURLInfo(t);const s=e.reportID,a=e.fightID;if(!s.length)return void console.error("Could not find report ID in URL",t);this.simUI.clearRaid(P.nextEventID());const o=await this.getWCLBearerToken(),l=await this.getRateLimit(o);let c=l.pointsSpentThisHour+30<l.limitPerHour;console.info("Importing WCL report",s,"fight",a,"Generate Parties:",c);const d=`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\t\t\tguild {\n\t\t\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayerDetails: table(fightIDs: [${a}], endTime: 99999999, dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\t\t\tfights(fightIDs: [${a}]) {\n\t\t\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnervates: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Druid", abilityID: 29166),\n\t\t\t\t\t\t\tpowerInfusion: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Priest", abilityID: 10060)\n\t\t\t\t\t\t\ttricksOfTheTrade: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Rogue", abilityID: 57933)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t`,m=await this.queryWCL(d,o);if(null!=m.errors&&null!=m.errors&&m.errors.length){const t=m.errors.reduce(((t,e)=>t+e.message),"");return void alert("Failed to import: "+t)}const p=m.data.reportData.report,h=p.guild,u=p.playerDetails.data.entries,g=p.innervates.data.entries,f=p.powerInfusion.data.entries,y=p.tricksOfTheTrade.data.entries,E=p.fights[0],w=E.startTime,k=E.endTime;let T=this.simUI.raidPicker?.getCurrentFaction();null!=h&&(T=h.faction.id),null==T&&(T=S.Horde);const I=_.create();I.duration=(k-w)/1e3,I.targets=new Array;let v=this.simUI.sim.getAllPresetEncounters().find((t=>t.path.includes(E.name)));v&&v.targets.length&&v.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>I.targets.push(t))),0===I.targets.length&&I.targets.push(n.defaultProto());const C=V.create();C.encounter=I;const D=j.create();D.parties=new Array,C.raid=D;const R=new Array,A=new Map,U=u.filter((t=>"Paladin"===t.type)).length;let x=Array.from({length:r}).map((()=>[]));x.forEach((()=>D.parties.push(J.create())));const O=(t,e)=>{if(!Array.isArray(t))throw new Error("FIRST ARGUMENT NOT AN ARRAY");const s=t.slice(0),a=arguments.length>2?arguments[2]:1,n=e.constructor===Array?e:e.split(".");return s.sort((function(t,e){for(let s in n)t[n[s]]&&e[n[s]]&&(t=t[n[s]],e=e[n[s]]);return(t=t.toString().match(/^\d+$/)?+t:t)<(e=e.toString().match(/^\d+$/)?+e:e)?-1*a:t>e?1*a:0})),s},L=u.map((t=>new Ms(t,this.simUI,T))),F=t=>{const e=[];return t.length&&t.forEach((t=>{const s=L.find((e=>e.name===t.name)),a=L.find((e=>e.name===t.targets[0].name));s&&a&&!a.isBuffBot&&e.push({player:s,target:a.name})})),e};F(g).forEach((t=>t.player.innervateTarget=t.target)),F(f).forEach((t=>t.player.powerInfusionTarget=t.target)),F(y).forEach((t=>t.player.tricksOfTheTradeTarget=t.target));const H=O(O(L,"type"),"sortPriority");let N=0;const W=(t,e)=>t.isBuffBot||e.isBuffBot?1:0,G=(t,e,s=!1)=>{if(!t)return void console.error("Cannot assign player to party because player is undefined!");if(!e)return void console.error("Cannot assign player to party because party is undefined!");if(e.players.length===i)return void console.error("Cannot assign player to party because party is full!",t,e.players);s&&console.warn(`Could not locate a group for ${t.name}, assigning them to an open group.`);let a=t.getBuffBot(),n=t.getPlayer();if(a||n){if(A.set(t.id,N),a)a.raidIndex=N,R.push(a),e.players.push(z.create());else if(n&&(e.players.push(n),Z(B(n)))){let e=b.create();e.targetIndex=A.get(t.id),C.raid.tanks.push(e)}t.partyAssigned=!0,N++}else console.error("Cannot assign player to party because player data is undefined!",t)};if(c){const t=H.filter((t=>t.isPartyBuffer));for(const e of t){const t=e.partyMembers.length>=i;if(t)continue;const n=e.getPartyAuraIds();if(!n.length){console.warn("No party aura ids found for partyBuff player "+e.name);continue}let r=n.map((t=>`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\ttable(startTime: ${w}, endTime: ${k}, sourceID: ${e.id}, abilityID: ${t}, fightIDs: [${a}],dataType:Buffs,viewBy:Target,hostilityType:Friendlies)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}`)),l=[];for(let e=0;e<r.length&&!(l.length>=i||t);e++){let t=await this.queryWCL(r[e],o);if(t){let e=t.data?.reportData?.report?.table?.data?.auras??[];if(e.length){e=e.filter((t=>"Pet"!==t.type)).sort(((t,e)=>t.bands[0].startTime-e.bands[0].startTime)).filter(((t,e)=>e<5));const t=e.filter((t=>!l.some((e=>e.name===t.name))));l.push(...t)}}}if(0===l.length)continue;e.partyFound=!0,e.partyMembers=l.map((t=>t.name));let c=H.filter((t=>e.partyMembers.includes(t.name))).filter((t=>!t.partyAssigned));const d=c.length;let m=x.findIndex((t=>t.length<i&&t.length<d));-1===m&&(console.warn("No empty temp party found for player "+e.name),m=x.filter((t=>t.length<i)).findIndex((t=>t.some((t=>e.partyMembers.includes(t.name))))),console.info("Found party with members in it: "+m));let p=x[m];c.forEach((t=>{const s=void 0===p,a=p.length===i;s||a||(t.partyAssigned=!0,t.partyMembers=e.partyMembers,p.push(t))}))}x.forEach(((t,e)=>{let s=D.parties[e];t.sort(W).forEach((t=>G(t,s)))}))}if(H.filter((t=>!t.partyAssigned)).sort(W).map((t=>{let e=D.parties.filter((t=>t.players.length<i))[0];G(t,e,!0)})),H.filter((t=>t.innervateTarget||t.powerInfusionTarget||t.tricksOfTheTradeTarget)).forEach((t=>{const e=H.find((e=>e.name===t.innervateTarget||t.name===t.powerInfusionTarget||t.name===t.tricksOfTheTradeTarget));if(!e)return void console.warn("Could not find target assignment player");const s=e.id,a=A.get(s);if(!a)return void console.warn(`Could not find ${e.name} raid index!`);if(t.isBuffBot){const e=t.id,s=A.get(e),n=R.find((t=>t.raidIndex===s));return void(n&&(t.innervateTarget?(n.innervateAssignment=b.create(),n.innervateAssignment.targetIndex=a):t.powerInfusionTarget?(n.powerInfusionAssignment=b.create(),n.powerInfusionAssignment.targetIndex=a):t.tricksOfTheTradeTarget&&(n.tricksOfTheTradeAssignment=b.create(),n.tricksOfTheTradeAssignment.targetIndex=a)))}const n=D.parties.filter((e=>e.players.some((e=>e.name===t.name))))[0];if(!n)return void console.warn("Could not find raiding party for player "+t.name);const r=n.players.find((e=>e.name===t.name));r?t.innervateTarget?"balanceDruid"==r.spec.oneofKind?(r.spec.balanceDruid.options.innervateTarget=b.create(),r.spec.balanceDruid.options.innervateTarget.targetIndex=a):"feralDruid"==r.spec.oneofKind?(r.spec.feralDruid.options.innervateTarget=b.create(),r.spec.feralDruid.options.innervateTarget.targetIndex=a):"feralTankDruid"==r.spec.oneofKind&&(r.spec.feralTankDruid.options.innervateTarget=b.create(),r.spec.feralTankDruid.options.innervateTarget.targetIndex=a):t.powerInfusionTarget||t.tricksOfTheTradeTarget:console.warn("Could not find raid player "+t.name+" in raid party "+n)})),H.filter((t=>!t.partyAssigned)).forEach((t=>{console.error(`${t.name} is not in a party!`,t)})),C.blessings=M(U),this.simUI.fromProto(P.nextEventID(),C),this.simUI.setBuffBots(P.nextEventID(),R),!c){const t=await this.getRateLimit(o);console.debug(`Rate Limit resets in ${t.pointsResetIn} seconds.`)}this.close()}}class Ms{constructor(t,e,s=S.Unknown){this.partyAssigned=!1,this.partyFound=!1,this.partyMembers=[],this.isPartyBuffer=!1,this.isBuffBot=!1,this.sortPriority=99,this.simUI=e,this.name=t.name,this.gear=t.gear,this.icon=t.icon,this.id=t.id,this.type=t.type,this.talents=t.talents,this.wclSpec=t.icon.split("-")[1],this.faction=s,"Paladin"===this.type&&"Protection"===this.wclSpec&&(this.wclSpec="Justicar"),this.spec=Ns[this.wclSpec],this.specType=this.wclSpec+this.type,this.isBuffBot=void 0===this.spec,this.isPartyBuffer=this.getPartyAuraIds().length>1,this.sortPriority=Hs[this.wclSpec]??99}getPlayer(){if(this.isBuffBot)return;let e=z.create();const s=K[this.spec],a=this.getMatchingPreset();if(void 0!==a)return e=q(this.spec,e,a.rotation,s.talentsCreate(),a.specOptions),e.talentsString=a.talents.talentsString,e.glyphs=a.talents.glyphs,e.consumes=a.consumes,e.name=this.name,e.class=Q(this.type),e.equipment=this.getEquipment(),e.race=a.defaultFactionRaces[this.faction],t.applySharedDefaultsToProto(e),e;console.error("Could not find matching preset for non buff bot",{name:this.name,spec:this.spec,type:this.type,talents:this.talents})}getBuffBot(){if(!this.isBuffBot)return;const t=Ws[this.specType];if(null==t)return void console.error("Buff Bot Spec not implemented: ",this.specType);const e=O.create();return e.id=t,e.raidIndex=-1,e}getPartyAuraIds(){const t=[24932],e={RetributionPaladin:[20092,20218,31870],GuardianDruid:[...t],WardenDruid:[...t],FeralDruid:[...t],BalanceDruid:[24907],RestorationDruid:[34123],MarksmanHunter:[27066],EnhancementShaman:[30811]},s={Paladin:[19746,27149,27150],Warrior:[2048,469],Warlock:[27268,18696]}[this.type]??[],a=[...e[this.specType]??[],...s,351355];return"Shaman"===this.type?[...a,32182]:a}getMatchingPreset(){const t=Ts.filter((t=>t.spec===this.spec));let e=0;if(t&&t.length>1){let s=100;t.forEach(((t,a)=>{let n=[0,0,0],r=0;Array.from(t.talents.talentsString).forEach((t=>{"-"!=t?n[r]+=parseInt(t):r++}));const i=n.reduce(((t,e,s)=>t+Math.abs(this.talents[s]?.guid-n[s])),0);i<s&&(e=a,s=i)}))}return t[e]}getEquipment(){let t=X.create();return t.items=new Array,this.gear.forEach((e=>{const s=Y.create();s.id=e.id;const a=this.simUI.sim.getEnchantFlexible(e.permanentEnchant);s.enchant=a?a.id:0,e.gems&&(s.gems=new Array,e.gems.forEach((t=>s.gems.push(t.id)))),t.items.push(s)})),t}}const Hs={Warden:0,Guardian:1,Feral:2,Balance:3,Justicar:4,Retribution:5,Fury:6,Arms:7,Protection:8,Enhancement:9,Destruction:10,Affliction:11,Demonology:12,Marksman:13},Ns={Balance:k.SpecBalanceDruid,Elemental:k.SpecElementalShaman,Enhancement:k.SpecEnhancementShaman,Feral:k.SpecFeralDruid,Warden:k.SpecFeralTankDruid,Guardian:k.SpecFeralTankDruid,Survival:k.SpecHunter,BeastMastery:k.SpecHunter,Arcane:k.SpecMage,Fire:k.SpecMage,Frost:k.SpecMage,Assassination:k.SpecRogue,Combat:k.SpecRogue,Retribution:k.SpecRetributionPaladin,Justicar:k.SpecProtectionPaladin,Shadow:k.SpecShadowPriest,Smite:k.SpecSmitePriest,Destruction:k.SpecWarlock,Affliction:k.SpecWarlock,Demonology:k.SpecWarlock,Arms:k.SpecWarrior,Fury:k.SpecWarrior,Champion:k.SpecWarrior,Warrior:k.SpecWarrior,Gladiator:k.SpecWarrior,Protection:k.SpecProtectionWarrior},Ws={HolyPaladin:"Paladin",HolyPriest:"Holy Priest",DisciplinePriest:"Divine Spirit Priest",RestorationDruid:"Resto Druid",DreamstateDruid:"Resto Druid",RestorationShaman:"Resto Shaman"};class Gs extends L{constructor(t,e){super(t,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1,this.raidSimUI=e,this.raid=e.sim.raid;const s=document.createElement("div");s.classList.add("current-raid-viewer"),this.rootElem.appendChild(s),s.innerHTML='\n\t\t\t<div class="parties-container">\n\t\t\t</div>\n\t\t';const a=this.rootElem.getElementsByClassName("parties-container")[0];this.partyPickers=this.raid.getParties().map(((t,e)=>new Vs(a,t,e,this)));const n=document.createElement("div");n.classList.add("new-player-picker"),this.rootElem.appendChild(n),this.newPlayerPicker=new Js(n,this),this.rootElem.ondragend=t=>{this.clearDragPlayer()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/i)].playerPickers[t%i]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}getBuffBots(){return this.getPlayerPickers().filter((t=>t.player instanceof Cs)).map((t=>t.player))}setBuffBots(t,e){P.freezeAllAndDo((()=>{this.getBuffBots().forEach((e=>this.getPlayerPicker(e.getRaidIndex()).setPlayer(t,null,0))),e.forEach((e=>{if(!vs.find((t=>t.buffBotId==e.id)))return void console.warn("Invalid buff bot ID: "+e.id);const s=new Cs(e.id,this.raid.sim);s.fromProto(t,e),this.getPlayerPicker(e.raidIndex).setPlayer(t,s,0)}))}))}setDragPlayer(t,e,s){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=s,-1!=e){this.getPlayerPicker(e).rootElem.classList.add("dragFrom")}}clearDragPlayer(){if(-1!=this.currentDragPlayerFromIndex){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragFrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1}}class Vs extends L{constructor(t,e,s,a){super(t,"party-picker-root"),this.party=e,this.index=s,this.raidPicker=a,this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<span>Group ${s+1}</span>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const n=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(i).keys()].map((t=>new _s(n,this,t)));const r=this.rootElem.getElementsByClassName("party-results-dps")[0],o=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),s=t?.simResult.raidMetrics.parties[this.index].dps.avg||0,a=e?.simResult.raidMetrics.parties[this.index].dps.avg||0;if(0==s&&0==a)return r.textContent="",void(o.textContent="");r.textContent=s.toFixed(1),e?tt(o,a,s,1):o.textContent=""}))}}class _s extends L{constructor(e,s,a){super(e,"player-picker-root"),this.index=a,this.raidIndex=s.index*i+a,this.player=null,this.partyPicker=s,this.raidPicker=s.raidPicker,this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e==this.player||null==e&&this.player instanceof Cs||this.setPlayer(t,e,0)})),this.rootElem.innerHTML='\n\t\t\t<div class="player-label">\n\t\t\t\t<img class="player-icon"></img>\n\t\t\t\t<span class="player-name" contenteditable></span>\n\t\t\t</div>\n\t\t\t<div class="player-spacer">\n\t\t\t</div>\n\t\t\t<div class="player-options">\n\t\t\t\t<span class="player-edit fa fa-edit"></span>\n\t\t\t\t<span class="player-copy fa fa-copy" draggable="true"></span>\n\t\t\t\t<span class="player-delete fa fa-times"></span>\n\t\t\t</div>\n\t\t\t<div class="player-results">\n\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t</div>\n\t\t',this.labelElem=this.rootElem.getElementsByClassName("player-label")[0],this.iconElem=this.rootElem.getElementsByClassName("player-icon")[0],this.nameElem=this.rootElem.getElementsByClassName("player-name")[0],this.resultsElem=this.rootElem.getElementsByClassName("player-results")[0],this.dpsResultElem=this.rootElem.getElementsByClassName("player-results-dps")[0],this.referenceDeltaElem=this.rootElem.getElementsByClassName("player-results-reference-delta")[0],this.nameElem.addEventListener("input",(e=>{this.player instanceof t&&this.player.setName(P.nextEventID(),this.nameElem.textContent||"")}));this.nameElem.addEventListener("keydown",(e=>{if(9==e.keyCode||13==e.keyCode){e.preventDefault();const s=this.raidPicker.getPlayerPickers().filter((e=>e.player instanceof t)),a=s.indexOf(this);-1!=a&&s.length>a+1?s[a+1].nameElem.focus():this.nameElem.blur()}27==e.keyCode&&this.nameElem.blur(),8!=e.keyCode&&46!=e.keyCode&&(this.nameElem.textContent?.length||0)>=15&&e.preventDefault()}));const n="Unnamed";this.nameElem.addEventListener("focusin",(t=>{const e=window.getSelection();if(e){const t=document.createRange();t.selectNodeContents(this.nameElem),e.removeAllRanges(),e.addRange(t)}})),this.nameElem.addEventListener("focusout",(e=>{this.nameElem.textContent||(this.nameElem.textContent=n,this.player instanceof t&&this.player.setName(P.nextEventID(),n))}));const r=(e,s)=>{if(null==this.player)return void e.preventDefault();e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all";const a=this.iconElem.src,n=new Image;if(n.src=a,e.dataTransfer.setDragImage(n,30,30),this.player instanceof t){var r=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...z.toBinary(r))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,s)};this.labelElem.ondragstart=t=>{r(t,3)},this.resultsElem.ondragstart=t=>{r(t,3)};const o=this.rootElem.getElementsByClassName("player-copy")[0];tippy(o,{content:"Drag to Copy",allowHTML:!0}),o.ondragstart=t=>{r(t,4)};const l=this.rootElem.getElementsByClassName("player-delete")[0];tippy(l,{content:"Click to Delete",allowHTML:!0}),l.addEventListener("click",(t=>{this.setPlayer(P.nextEventID(),null,0)}));let c=0;this.rootElem.ondragenter=t=>{t.preventDefault(),c++,this.rootElem.classList.add("dragto")},this.rootElem.ondragleave=t=>{t.preventDefault(),c--,c<=0&&this.rootElem.classList.remove("dragto")},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=e=>{var s=e.dataTransfer.getData("text/plain");e.preventDefault(),c=0,this.rootElem.classList.remove("dragto");const a=P.nextEventID();P.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==s.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(-1!=this.raidPicker.currentDragPlayerFromIndex){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);if(3==e){t.setPlayer(a,this.player,e);var n=this.iconElem.src;this.iconElem.src=t.iconElem.src,t.iconElem.src=n}else 2==e&&(this.iconElem.src=t.iconElem.src,t.setPlayer(a,null,e))}else if(null==this.raidPicker.currentDragPlayer){const e=atob(s),n=new Uint8Array(e.length);for(let t=0;t<n.length;t++)n[t]=e.charCodeAt(t);const i=z.fromBinary(n);var r=new t(B(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),""==this.iconElem.src&&(this.iconElem.src=Ts.filter((t=>t.spec==r.spec))[0].iconUrl),this.raidPicker.clearDragPlayer()}))};const d=this.rootElem.getElementsByClassName("player-edit")[0];tippy(d,{content:"Edit",allowHTML:!0}),d.addEventListener("click",(e=>{this.player instanceof t&&new js(this.player)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),s=t?.simResult.getDamageMetrics({player:this.raidIndex}).avg||0,a=e?.simResult.getDamageMetrics({player:this.raidIndex}).avg||0;if(0==s&&0==a)return this.dpsResultElem.textContent="",void(this.referenceDeltaElem.textContent="");this.dpsResultElem.textContent=s.toFixed(1),e?tt(this.referenceDeltaElem,a,s,1):this.referenceDeltaElem.textContent=""})),this.update()}setPlayer(e,s,a){s!=this.player&&(this.dpsResultElem.textContent="",this.referenceDeltaElem.textContent="",P.freezeAllAndDo((()=>{if(this.player=s,s instanceof Cs)this.partyPicker.party.setPlayer(e,this.index,null),s.setRaidIndex(e,this.raidIndex);else if(s instanceof t){if(this.partyPicker.party.setPlayer(e,this.index,s),1==a){if(Z(s.spec)){const t=this.raidPicker.raid.getTanks(),a=t.findIndex((t=>null==this.raidPicker.raid.getPlayerFromRaidTarget(t)));-1==a?t.length<3&&this.raidPicker.raid.setTanks(e,t.concat([s.makeRaidTarget()])):(t[a]=s.makeRaidTarget(),this.raidPicker.raid.setTanks(e,t))}s.spec==k.SpecBalanceDruid?function(t,e){const s=e.getSpecOptions();s.innervateTarget=rt(e.getRaidIndex()),e.setSpecOptions(t,s)}(e,s):s.spec==k.SpecSmitePriest&&function(t,e){const s=e.getSpecOptions();s.powerInfusionTarget=rt(e.getRaidIndex()),e.setSpecOptions(t,s)}(e,s)}}else this.partyPicker.party.setPlayer(e,this.index,s),this.partyPicker.party.compChangeEmitter.emit(e)})),this.update())}update(){null==this.player?(this.rootElem.classList.add("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor="black",this.labelElem.setAttribute("draggable","false"),this.resultsElem.setAttribute("draggable","false"),this.nameElem.textContent="",this.nameElem.removeAttribute("contenteditable")):this.player instanceof Cs?(this.rootElem.classList.remove("empty"),this.rootElem.classList.add("buff-bot"),this.rootElem.style.backgroundColor=x[U[this.player.spec]],this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.name,this.nameElem.removeAttribute("contenteditable"),this.iconElem.src=this.player.settings.iconUrl):(this.rootElem.classList.remove("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor=this.player.getClassColor(),this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.getName(),this.nameElem.setAttribute("contenteditable",""),this.iconElem.src=this.player.getTalentTreeIcon())}}class js extends L{constructor(t){super(document.body,"player-editor-modal"),this.rootElem.id="playerEditorModal",this.rootElem.innerHTML='\n\t\t\t<div class="player-editor within-raid-sim">\n\t\t\t</div>\n\t\t',new o(this.rootElem,(()=>{$("#playerEditorModal").bPopup().close(),this.rootElem.remove()}));const e=this.rootElem.getElementsByClassName("player-editor")[0];Ss[t.spec](e,t),$("#playerEditorModal").bPopup({closeClass:"player-editor-close",onClose:()=>{this.rootElem.remove()}})}}class Js extends L{constructor(e,s){super(e,"new-player-picker-root"),this.raidPicker=s,this.rootElem.innerHTML='\n\t\t\t<div class="new-player-picker-controls">\n\t\t\t\t<div class="faction-selector"></div>\n\t\t\t\t<div class="phase-selector"></div>\n\t\t\t</div>\n\t\t\t<div class="presets-container"></div>\n\t\t\t<div class="buff-bots-container">\n\t\t\t\t<div class="buff-bots-title">\n\t\t\t\t\t<span class="buff-bots-title-text">Buff Bots</span>\n\t\t\t\t\t<span class="buff-bots-tooltip fa fa-info-circle"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t',new l(this.rootElem.getElementsByClassName("faction-selector")[0],this,{label:"Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:S.Alliance},{name:"Horde",value:S.Horde}],changedEvent:t=>this.raidPicker.raid.sim.factionChangeEmitter,getValue:t=>this.raidPicker.raid.sim.getFaction(),setValue:(t,e,s)=>{this.raidPicker.raid.sim.setFaction(t,s)}}),new l(this.rootElem.getElementsByClassName("phase-selector")[0],this,{label:"Phase",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[{name:"1",value:1}],changedEvent:t=>this.raidPicker.raid.sim.phaseChangeEmitter,getValue:t=>this.raidPicker.raid.sim.getPhase(),setValue:(t,e,s)=>{this.raidPicker.raid.sim.setPhase(t,s)}});const a=this.rootElem.getElementsByClassName("presets-container")[0];et(v).forEach((e=>{if(e==v.ClassUnknown)return;const s=Ts.filter((t=>U[t.spec]==e));if(0==s.length)return;const n=document.createElement("div");n.classList.add("class-presets-container"),a.appendChild(n),n.style.backgroundColor=st(x[e],.5),s.forEach((e=>{const s=document.createElement("div");s.classList.add("preset-picker"),n.appendChild(s);const a=document.createElement("img");a.classList.add("preset-picker-icon"),s.appendChild(a),a.src=e.iconUrl,tippy(a,{content:e.tooltip,allowHTML:!0}),s.setAttribute("draggable","true"),s.ondragstart=s=>{const a=P.nextEventID();P.freezeAllAndDo((()=>{const n=new Image;n.src=e.iconUrl,s.dataTransfer.setDragImage(n,30,30),s.dataTransfer.setData("text/plain",""),s.dataTransfer.dropEffect="copy";const r=new t(e.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setRotation(a,e.rotation),r.setTalentsString(a,e.talents.talentsString),r.setGlyphs(a,e.talents.glyphs||at.create()),r.setSpecOptions(a,e.specOptions),r.setConsumes(a,e.consumes),r.setName(a,e.defaultName),r.setProfession1(a,e.otherDefaults?.profession1||nt.Engineering),r.setProfession2(a,e.otherDefaults?.profession2||nt.Jewelcrafting),r.setDistanceFromTarget(a,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{r.setGear(a,this.raidPicker.raid.sim.lookupEquipmentSpec(e.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(r,-1,1)}))}}))}));const n=this.rootElem.getElementsByClassName("buff-bots-tooltip")[0];tippy(n,{content:"Buff bots do not do DPS or any actions at all, except to buff their raid/party members. They are used as placeholders for classes we haven't implemented yet, or never will (e.g. healers) so that a proper raid environment can still be simulated.",allowHTML:!0});const r=this.rootElem.getElementsByClassName("buff-bots-container")[0];et(v).forEach((t=>{if(t==v.ClassUnknown)return;const e=vs.filter((e=>U[e.spec]==t)).filter((t=>!t.deprecated));if(0==e.length)return;const s=document.createElement("div");s.classList.add("class-presets-container"),r.appendChild(s),s.style.backgroundColor=st(x[t],.5),e.forEach((t=>{const e=document.createElement("div");e.classList.add("preset-picker"),e.classList.add("preset-picker-buff-bot"),s.appendChild(e);const a=document.createElement("img");a.classList.add("preset-picker-icon"),e.appendChild(a),a.src=t.iconUrl,tippy(a,{content:t.tooltip,allowHTML:!0}),e.setAttribute("draggable","true"),e.ondragstart=e=>{const s=new Image;s.src=t.iconUrl,e.dataTransfer.setDragImage(s,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy",this.raidPicker.setDragPlayer(new Cs(t.buffBotId,this.raidPicker.raidSimUI.sim),-1,1)}}))}))}}class $s extends L{constructor(t,e){super(t,"tanks-picker-root"),this.raidSimUI=e,this.rootElem.innerHTML='\n\t\t\t<fieldset class="tanks-picker-container settings-section">\n\t\t\t\t<legend>TANKS</legend>\n\t\t\t</fieldset>\n\t\t';const s=this.rootElem.getElementsByClassName("tanks-picker-container")[0],a=this.raidSimUI.sim.raid;for(let n=0;n<4;n++){const t=document.createElement("div");t.classList.add("tank-picker-row"),s.appendChild(t);const e=document.createElement("span");e.textContent=0==n?"MAIN TANK":`TANK ${n+1}`,e.classList.add("tank-picker-label"),t.appendChild(e);const r=document.createElement("span");r.classList.add("fa","fa-arrow-right"),t.appendChild(r);const i=n;new ks(t,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[i]||w(),setValue:(t,e,s)=>{const a=e.getTanks();for(let n=0;n<i;n++)a[n]||a.push(w());a[i]=s,e.setTanks(t,a)}})}}}const zs=[];new class extends c{constructor(t,e){super(t,new d,{spec:null,launchStatus:m.Unlaunched,knownIssues:(e.knownIssues||[]).concat(zs)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new P,this.changeEmitter=new P,this.referenceChangeEmitter=new P,this.rootElem.classList.add("raid-sim-ui"),this.config=e,this.settingsMuuri=null,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab(),this.addLogTab(),this.changeEmitter.on((()=>this.recomputeSettingsLayout()))}loadSettings(){const t=P.nextEventID();P.freezeAllAndDo((()=>{let e=!1;const s=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=s)try{const a=V.fromJsonString(s);this.fromProto(t,a),e=!0}catch(a){console.warn("Failed to parse saved settings: "+a)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=V.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=it(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.addToolbarItem(function(t){const e=document.createElement("div");e.classList.add("import-settings","sim-dropdown-menu"),e.innerHTML="\n\t\t<span id='importMenuLink' class='dropdown-toggle fas fa-file-import' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='importMenuLink'>\n\t\t</div>\n\t";const s=e.getElementsByClassName("dropdown-toggle")[0];tippy(s,{content:"Import",allowHTML:!0});const a=e.getElementsByClassName("dropdown-menu")[0],n=(t,e,s)=>{const n=document.createElement("span");n.classList.add("dropdown-item"),n.textContent=t,n.addEventListener("click",s),a.appendChild(n)};return n("Json",0,(()=>new Os(a,t))),n("WCL",0,(()=>new Fs(a,t))),e}(this)),this.addToolbarItem(function(t){const e=document.createElement("div");e.classList.add("export-settings","sim-dropdown-menu"),e.innerHTML="\n\t\t<span id='exportMenuLink' class='dropdown-toggle fas fa-file-export' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='exportMenuLink'>\n\t\t</div>\n\t";const s=e.getElementsByClassName("dropdown-toggle")[0];tippy(s,{content:"Export",allowHTML:!0});const a=e.getElementsByClassName("dropdown-menu")[0];return((t,e)=>{const s=document.createElement("span");s.classList.add("dropdown-item"),s.textContent=t,s.addEventListener("click",e),a.appendChild(s)})("Json",(()=>new Ls(a,t))),e}(this));const t=document.createElement("span");t.classList.add("fas","fa-cog"),tippy(t,{content:"Settings",allowHTML:!0}),t.addEventListener("click",(t=>{new p(this.rootElem,this)})),this.addToolbarItem(t)}addRaidTab(){this.addTab("RAID","raid-tab",'\n\t\t\t<div class="raid-picker">\n\t\t\t</div>\n\t\t\t<div class="saved-raids-div">\n\t\t\t\t<div class="saved-raids-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'),this.raidPicker=new Gs(this.rootElem.getElementsByClassName("raid-picker")[0],this);const t=new h(this.rootElem.getElementsByClassName("saved-raids-manager")[0],this,{label:"Raid",storageKey:this.getSavedRaidStorageKey(),getData:t=>ot.create({raid:this.sim.raid.toProto(),buffBots:this.getBuffBots().map((t=>t.toProto())),blessings:this.blessingsPicker.getAssignments(),faction:this.sim.getFaction(),phase:this.sim.getPhase()}),setData:(t,e,s)=>{P.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,s.raid||j.create()),this.raidPicker.setBuffBots(t,s.buffBots),this.blessingsPicker.setAssignments(t,s.blessings||F.create()),s.faction&&this.sim.setFaction(t,s.faction),s.phase&&this.sim.setPhase(t,s.phase)}))},changeEmitters:[this.changeEmitter,this.sim.changeEmitter],equals:(t,e)=>ot.equals(t,e),toJson:t=>ot.toJson(t),fromJson:t=>ot.fromJson(t)});this.sim.waitForInit().then((()=>{t.loadUserData()}))}addSettingsTab(){this.addTab("SETTINGS","raid-settings-tab",'\n\t\t\t<div class="raid-settings-sections">\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section raid-encounter-section">\n\t\t\t\t\t\t<legend>Encounter</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container blessings-section-container">\n\t\t\t\t\t<fieldset class="settings-section blessings-section">\n\t\t\t\t\t\t<legend>Blessings</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container assignments-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container tanks-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section other-options-section">\n\t\t\t\t\t\t<legend>Other Options</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="settings-bottom-bar">\n\t\t\t\t<div class="saved-encounter-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t');const t=this.rootElem.getElementsByClassName("raid-encounter-section")[0];new u(t,this.sim.encounter,{showExecuteProportion:!0},this);const e=new h(this.rootElem.getElementsByClassName("saved-encounter-manager")[0],this.sim.encounter,{label:"Encounter",storageKey:this.getSavedEncounterStorageKey(),getData:t=>lt.create({encounter:t.toProto()}),setData:(t,e,s)=>e.fromProto(t,s.encounter),changeEmitters:[this.sim.encounter.changeEmitter],equals:(t,e)=>lt.equals(t,e),toJson:t=>lt.toJson(t),fromJson:t=>lt.fromJson(t)});this.sim.waitForInit().then((()=>{e.loadUserData()}));const s=this.rootElem.getElementsByClassName("blessings-section")[0];this.blessingsPicker=new xs(s,this),this.blessingsPicker.changeEmitter.on((t=>this.changeEmitter.emit(t))),tippy(s,{content:g,allowHTML:!0,placement:"left"}),new Ds(this.rootElem.getElementsByClassName("assignments-section-container")[0],this),new $s(this.rootElem.getElementsByClassName("tanks-section-container")[0],this),this.rootElem.getElementsByClassName("other-options-section")[0],this.rootElem.getElementsByClassName("raid-settings-tab-tab")[0].addEventListener("click",(t=>{null==this.settingsMuuri&&setTimeout((()=>{this.settingsMuuri=new Muuri(".raid-settings-sections")}),200),setTimeout((()=>{this.recomputeSettingsLayout()}),200)}))}addDetailedResultsTab(){this.addTab("DETAILED RESULTS","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new f(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}addLogTab(){this.addTab("LOG","log-tab",'\n\t\t\t<div class="log-runner">\n\t\t\t</div>\n\t\t'),new y(this.rootElem.getElementsByClassName("log-runner")[0],this)}recomputeSettingsLayout(){this.settingsMuuri,window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){this.getBuffBots().forEach((e=>{const s=t.parties[e.getPartyIndex()];if(!s)throw new Error("No party proto for party index: "+e.getPartyIndex());e.settings.modifyRaidProto(e,t,s)}));const e=this.getClassCount(v.ClassPaladin),s=this.blessingsPicker.getAssignments();Is.forEach((a=>{const n=t.parties.map((t=>t.players.filter((t=>t.class!=v.ClassUnknown&&B(t)==a)))).flat();s.paladins.forEach(((t,s)=>{s>=e||(t.blessings[a]==N.BlessingOfKings?n.forEach((t=>t.buffs.blessingOfKings=!0)):t.blessings[a]==N.BlessingOfMight?n.forEach((t=>t.buffs.blessingOfMight=R.TristateEffectImproved)):t.blessings[a]==N.BlessingOfWisdom?n.forEach((t=>t.buffs.blessingOfWisdom=R.TristateEffectImproved)):t.blessings[a]==N.BlessingOfSanctuary&&n.forEach((t=>t.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getClassCount(t){return this.sim.raid.getClassCount(t)+this.getBuffBots().filter((e=>e.getClass()==t)).length}getBuffBots(){return this.raidPicker.getBuffBots()}setBuffBots(t,e){this.raidPicker.setBuffBots(t,e)}clearBuffBots(t){this.raidPicker.setBuffBots(t,[])}getPlayersAndBuffBots(){const t=this.sim.raid.getPlayers(),e=this.getBuffBots(),s=t.slice();return e.forEach((t=>{s[t.getRaidIndex()]=t})),s}applyDefaults(t){P.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,j.create()),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0)}))}toProto(){return V.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),buffBots:this.getBuffBots().map((t=>t.toProto())),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=V.toBinary(t),s=pako.deflate(e,{to:"string"}),a=btoa(String.fromCharCode(...s)),n=new URL(window.location.href);return n.hash=a,n.toString()}fromProto(t,e){P.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||j.create()),this.sim.encounter.fromProto(t,e.encounter||_.create()),this.raidPicker.setBuffBots(t,e.buffBots),this.blessingsPicker.setAssignments(t,e.blessings||F.create())}))}clearRaid(t){this.sim.raid.clear(t),this.clearBuffBots(t)}getStorageKey(t){return"__wotlk_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-cf19dc93.entry.js.map
