{"version":3,"file":"sim-fc73c60c.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts"],"sourcesContent":["import { BooleanPicker } from '../core/components/boolean_picker.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { IconEnumPicker, IconEnumPickerConfig } from '../core/components/icon_enum_picker.js';\nimport { IconPickerConfig } from '../core/components/icon_picker.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tEnhancementShaman_Options as ShamanOptions,\n\tShamanTotems,\n\tShamanShield,\n    ShamanImbue,\n    ShamanSyncType\n} from '../core/proto/shaman.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { Target } from '../core/target.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Bloodlust = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecEnhancementShaman>({\n\tfieldName: 'bloodlust',\n\tid: ActionId.fromSpellId(2825),\n});\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ color: 'grey', value: ShamanShield.NoShield },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ShamanImbueMH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n    fieldName: 'imbueMh',\n    values: [\n        { color: 'grey', value: ShamanImbue.NoImbue },\n        { actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n        { actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon },\n        { actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank },\n        { actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n    ],\n});\n\nexport const ShamanImbueOH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n    fieldName: 'imbueOh',\n    values: [\n        { color: 'grey', value: ShamanImbue.NoImbue },\n        { actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n        { actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon },\n        { actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank },\n        { actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n    ],\n});\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman, ShamanSyncType>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip: 'Choose your sync or stagger option, Perfect Sync makes your weapons always attack at the same time, which is ideal for mixed imbues. Delayed Offhand is similar but additionally adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window, ideal for matched imbues.',\n    values: [\n        { name: 'None', value: ShamanSyncType.NoSync },\n        { name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n        { name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n    ],\n});\n\nexport const EnhancementShamanRotationConfig = {\n    inputs:\n        [\n        InputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n            fieldName: 'lightningboltWeave',\n            label: 'Enable Weaving Lightning Bolt',\n            labelTooltip: 'Will provide a DPS increase, but is harder to execute',\n            enableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().maelstromWeapon > 0,\n        }),\n        InputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, number>({\n            fieldName: 'maelstromweaponMinStack',\n            label: 'Minimum Maelstrom Stacks to Weave',\n            labelTooltip: '3 stacks is the most realistic, however there are cases where lower might be possible, just much harder to do in practice',\n            values: [\n                { name: '1', value: 1 },\n                { name: '2', value: 2 },\n                { name: '3', value: 3 },\n                { name: '4', value: 4 },\n                { name: '5', value: 5 }, // 5 is effectively disabled. likely unnessecary\n            ],\n            enableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().lightningboltWeave,\n        }),\n        InputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n            fieldName: 'lavaburstWeave',\n            label: 'Enable Weaving Lava Burst',\n            labelTooltip: 'Not particularily useful for dual wield, mostly a 2h option',\n            enableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().lightningboltWeave,\n        }),\n        InputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n            fieldName: 'firenovaManaThreshold',\n            label: 'Minimum mana to cast Fire Nova',\n            labelTooltip: 'Fire Nova will not be cast when mana is below this value. Set this medium-low, it has a bad mana-to-damage ratio',\n        }),\n        InputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n            fieldName: 'shamanisticRageManaThreshold',\n            label: 'Mana % to use Shamanistic Rage',\n            enableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().shamanisticRage,\n        }),\n    ],\n};\n","import { Consumes } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js'\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport { EnhancementShaman_Rotation as EnhancementShamanRotation, EnhancementShaman_Options as EnhancementShamanOptions, ShamanShield } from '../core/proto/shaman.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n    ShamanImbue,\n    ShamanSyncType,\n    ShamanMajorGlyph,\n} from '../core/proto/shaman.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30405003105021333031131031051',\n        glyphs: Glyphs.create({\n            major1: ShamanMajorGlyph.GlyphOfStormstrike,\n            major2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n            major3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n            //minor glyphs dont affect damage done, all convenience/QoL\n        })\n\t}),\n};\n\nexport const DefaultRotation = EnhancementShamanRotation.create({\n\ttotems: ShamanTotems.create({\n\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\tair: AirTotem.WindfuryTotem,\n\t\tfire: FireTotem.MagmaTotem,\n\t\twater: WaterTotem.ManaSpringTotem,\n\t}),\n});\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\tbloodlust: true,\n\timbueMh: ShamanImbue.WindfuryWeapon,\n\timbueOh: ShamanImbue.FlametongueWeapon,\n\tsyncType: ShamanSyncType.SyncMainhandOffhandSwings,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n});\n\nexport const PreRaid_PRESET = {\n    name: 'Preraid Preset',\n    tooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n    gear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\n          \"id\": 43311,\n          \"enchant\": 44879,\n          \"gems\": [\n            41398,\n            42156\n          ]\n        },\n        {\n          \"id\": 40678\n        },\n        {\n          \"id\": 37373,\n          \"enchant\": 44871\n        },\n        {\n          \"id\": 37840,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 39597,\n          \"enchant\": 44489,\n          \"gems\": [\n            40053,\n            40088\n          ]\n        },\n        {\n          \"id\": 43131,\n          \"enchant\": 44484,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 39601,\n          \"enchant\": 54999,\n          \"gems\": [\n            40053,\n            0\n          ]\n        },\n        {\n          \"id\": 37407,\n          \"gems\": [\n            42156\n          ]\n        },\n        {\n          \"id\": 37669,\n          \"enchant\": 38374\n        },\n        {\n          \"id\": 37167,\n          \"enchant\": 55016,\n          \"gems\": [\n            40053,\n            42156\n          ]\n        },\n        {\n          \"id\": 37685\n        },\n        {\n          \"id\": 37642\n        },\n        {\n          \"id\": 37390\n        },\n        {\n          \"id\": 40684\n        },\n        {\n          \"id\": 41384,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 40704,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 37575\n        }\n    ]}`)\n}\n\nexport const P1_PRESET = {\n\tname: 'P1 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\n          \"id\": 40543,\n          \"enchant\": 44879,\n          \"gems\": [\n            41398,\n            40014\n          ]\n        },\n        {\n          \"id\": 44661,\n          \"gems\": [\n            40014\n          ]\n        },\n        {\n          \"id\": 40524,\n          \"enchant\": 44871,\n          \"gems\": [\n            40014\n          ]\n        },\n        {\n          \"id\": 40403,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 40523,\n          \"enchant\": 44489,\n          \"gems\": [\n            40003,\n            40014\n          ]\n        },\n        {\n          \"id\": 40282,\n          \"enchant\": 44484,\n          \"gems\": [\n            42702,\n            0\n          ]\n        },\n        {\n          \"id\": 40520,\n          \"enchant\": 54999,\n          \"gems\": [\n            42154,\n            0\n          ]\n        },\n        {\n          \"id\": 40275,\n          \"gems\": [\n            42156\n          ]\n        },\n        {\n          \"id\": 40522,\n          \"enchant\": 38374,\n          \"gems\": [\n            39999,\n            42156\n          ]\n        },\n        {\n          \"id\": 40367,\n          \"enchant\": 55016,\n          \"gems\": [\n            40058\n          ]\n        },\n        {\n          \"id\": 40474\n        },\n        {\n          \"id\": 40074\n        },\n        {\n          \"id\": 40684\n        },\n        {\n          \"id\": 37390\n        },\n        {\n          \"id\": 39763,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 39468,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 40322\n        }\n      ]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Sim } from '../core/sim.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\n\nimport { EnhancementShaman, EnhancementShaman_Rotation as EnhancementShamanRotation, EnhancementShaman_Options as EnhancementShamanOptions } from '../core/proto/shaman.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'enhancement-shaman-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n                \"Fire Elemental is not yet implemented\",\n                \"Some things regarding weapon imbues need further testing and changes\",\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatNatureSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 1.517,\n\t\t\t\t\t[Stat.StatAgility]: 1.561,\n\t\t\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t\t\t[Stat.StatSpellPower]: 1.117,\n                    [Stat.StatSpellHit]: 0, //default EP assumes cap\n                    [Stat.StatSpellCrit]: 0.897,\n\t\t\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.42,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 0.805, //double check how this works with spell crit\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.37, //haste is complicated\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.471,\n\t\t\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tdivineSpirit: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tmisery: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tShamanInputs.ShamanShieldInput,\n\t\t\t\tShamanInputs.Bloodlust,\n                ShamanInputs.ShamanImbueMH,\n                ShamanInputs.ShamanImbueOH,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: ShamanInputs.EnhancementShamanRotationConfig, \n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.ReplenishmentBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.SpellHasteBuff,\n\t\t\t\tIconInputs.SpiritBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.BleedDebuff,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tShamanInputs.SyncTypeInput,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tcustomSections: [\n\t\t\t\tTotemsSection,\n\t\t\t],\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n                    Presets.PreRaid_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["Bloodlust","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","ShamanShield","NoShield","actionId","WaterShield","LightningShield","ShamanImbueMH","ShamanImbue","NoImbue","WindfuryWeapon","FlametongueWeapon","FlametongueWeaponDownrank","FrostbrandWeapon","ShamanImbueOH","SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","label","labelTooltip","name","ShamanSyncType","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","EnhancementShamanRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","enableWhen","player","getTalents","maelstromWeapon","InputHelpers.makeRotationEnumInput","getRotation","lightningboltWeave","InputHelpers.makeRotationNumberInput","shamanisticRage","StandardTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfStormstrike","major2","GlyphOfFlametongueWeapon","major3","GlyphOfFeralSpirit","DefaultRotation","EnhancementShamanRotation","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","MagmaTotem","water","WaterTotem","ManaSpringTotem","DefaultOptions","EnhancementShamanOptions","shield","bloodlust","imbueMh","imbueOh","syncType","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","PreRaid_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","P1_PRESET","EnhancementShamanSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","epReferenceStat","displayStats","StatHealth","StatStamina","StatNatureSpellPower","StatSpellHaste","defaults","Presets.P1_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","battleShout","leaderOfThePack","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","debuffs","Debuffs","bloodFrenzy","sunderArmor","curseOfWeakness","TristateEffectRegular","curseOfElements","faerieFire","judgementOfWisdom","misery","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.Bloodlust","ShamanInputs.ShamanImbueMH","ShamanInputs.ShamanImbueOH","rotationInputs","ShamanInputs.EnhancementShamanRotationConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","IconInputs.MP5Buff","IconInputs.SpellHasteBuff","IconInputs.SpiritBuff","excludeBuffDebuffInputs","IconInputs.BleedDebuff","otherInputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.PreRaid_PRESET"],"mappings":"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"}