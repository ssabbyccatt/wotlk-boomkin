{"version":3,"file":"sim-ea4d6d8b.chunk.js","sources":["../../../ui/elemental_shaman/inputs.ts","../../../ui/elemental_shaman/presets.ts","../../../ui/elemental_shaman/sim.ts"],"sourcesContent":["import { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { ElementalShaman_Rotation_RotationType as RotationType, ShamanShield } from '../core/proto/shaman.js';\nimport { ElementalShaman_Options as ShamanOptions } from '../core/proto/shaman.js';\nimport { AirTotem } from '../core/proto/shaman.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { Target } from '../core/target.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Bloodlust = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecElementalShaman>({\n\tfieldName: 'bloodlust',\n\tid: ActionId.fromSpellId(2825),\n});\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecElementalShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ color: 'grey', value: ShamanShield.NoShield },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ElementalShamanRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecElementalShaman, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Adaptive', value: RotationType.Adaptive,\n\t\t\t\t\ttooltip: 'Dynamically adapts based on available mana to maximize CL casts without going OOM.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use and to modify cast conditions.',\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'inThunderstormRange',\n\t\t\tlabel: 'In Thunderstorm Range',\n\t\t\tlabelTooltip: 'Thunderstorm will hit all targets when cast. Ignores knockback.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getTalents().thunderstorm,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useChainLightning',\n\t\t\tlabel: 'Use Chain Lightning in Rotation',\n\t\t\tlabelTooltip: 'Use Chain Lightning in rotation',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useClOnlyGap',\n\t\t\tlabel: 'Use CL only as gap filler',\n\t\t\tlabelTooltip: 'Use CL to fill short gaps in LvB CD instead of on CD.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'clMinManaPer',\n\t\t\tlabel: 'Min mana percent to use Chain Lightning',\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Chain Lightning. 0 will spam until OOM.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useFireNova',\n\t\t\tlabel: 'Use Fire Nova in Rotation',\n\t\t\tlabelTooltip: 'Fire Nova will hit all targets when cast.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'fnMinManaPer',\n\t\t\tlabel: 'Min mana percent to use FireNova',\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Fire Nova. 0 will spam until OOM.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useFireNova,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'overwriteFlameshock',\n\t\t\tlabel: 'Allow Flameshock to be overwritten',\n\t\t\tlabelTooltip: 'Will use flameshock at the end of the duration even if its still ticking if there isn\\'t enough time to cast lavaburst before expiring.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'alwaysCritLvb',\n\t\t\tlabel: 'Only cast Lavaburst with FS',\n\t\t\tlabelTooltip: 'Will only cast Lavaburst if Flameshock will be active when the cast finishes.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useThunderstorm',\n\t\t\tlabel: 'Allow Thunderstorm to be cast.',\n\t\t\tlabelTooltip: 'Disabling this will stop thunderstorm from being cast entirely.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t],\n};\n","import { Consumes } from '../core/proto/common.js';\n\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport { ElementalShaman_Rotation as ElementalShamanRotation, ElementalShaman_Options as ElementalShamanOptions, ShamanShield, ShamanMajorGlyph, ShamanMinorGlyph } from '../core/proto/shaman.js';\nimport { ElementalShaman_Rotation_RotationType as RotationType } from '../core/proto/shaman.js';\n\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n} from '../core/proto/shaman.js';\n\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '0532001523212351322301351-005052031',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfLava,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfTotemOfWrath,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfLightningBolt,\n\t\t\tminor1: ShamanMinorGlyph.GlyphOfThunderstorm,\n\t\t\tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t\tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = ElementalShamanRotation.create({\n\ttotems: ShamanTotems.create({\n\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\tair: AirTotem.WrathOfAirTotem,\n\t\tfire: FireTotem.TotemOfWrath,\n\t\twater: WaterTotem.ManaSpringTotem,\n\t}),\n\ttype: RotationType.Adaptive,\n  fnMinManaPer: 66,\n  clMinManaPer: 33,\n  useChainLightning: false,\n  useFireNova: false,\n  useThunderstorm: true,\n});\n\nexport const DefaultOptions = ElementalShamanOptions.create({\n\tshield: ShamanShield.WaterShield,\n\tbloodlust: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.RunicManaPotion,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n});\n\n\nexport const SWP_PRESET = {\n\tname: 'SWP Pre-Raid Preset',\n\ttooltip: \"Pre-raid preset that includes some gear from SWP.\",\n\tgear: EquipmentSpec.fromJsonString(`{\n    \"items\": [\n      {\n        \"id\": 34332,\n        \"enchant\": 44877,\n        \"gems\": [\n          40049,\n          41285\n        ]\n      },\n      {\n        \"id\": 37595\n      },\n      {\n        \"id\": 31023,\n        \"enchant\": 44874,\n        \"gems\": [\n          42144,\n          40049\n        ]\n      },\n      {\n        \"id\": 41610,\n        \"enchant\": 55642\n      },\n      {\n        \"id\": 39592,\n        \"enchant\": 44489,\n        \"gems\": [\n          42144,\n          40025\n        ]\n      },\n      {\n        \"id\": 34437,\n        \"enchant\": 44498,\n        \"gems\": [\n          40049,\n          0\n        ]\n      },\n      {\n        \"id\": 34344,\n        \"enchant\": 44592,\n        \"gems\": [\n          40049,\n          42144,\n          0\n        ]\n      },\n      {\n        \"id\": 34542,\n        \"gems\": [\n          40049,\n          39998\n        ]\n      },\n      {\n        \"id\": 37791,\n        \"enchant\": 41602\n      },\n      {\n        \"id\": 34566,\n        \"enchant\": 60623,\n        \"gems\": [\n          40049\n        ]\n      },\n      {\n        \"id\": 43253,\n        \"gems\": [\n          40027\n        ]\n      },\n      {\n        \"id\": 37694\n      },\n      {\n        \"id\": 40682\n      },\n      {\n        \"id\": 37873\n      },\n      {\n        \"id\": 41384,\n        \"enchant\": 44487\n      },\n      {\n        \"id\": 40698\n      },\n      {\n        \"id\": 32330\n      }\n    ]\n  }`),\n};\n\nexport const PRE_RAID_PRESET = {\n\tname: 'Pre-raid Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\n    \"items\": [\n      {\n        \"id\": 37180,\n        \"enchant\": 44877,\n        \"gems\": [\n          41285,\n          42144\n        ]\n      },\n      {\n        \"id\": 37595\n      },\n      {\n        \"id\": 37673,\n        \"enchant\": 44874,\n        \"gems\": [\n          42144\n        ]\n      },\n      {\n        \"id\": 41610,\n        \"enchant\": 55642\n      },\n      {\n        \"id\": 39592,\n        \"enchant\": 44489,\n        \"gems\": [\n          42144,\n          40025\n        ]\n      },\n      {\n        \"id\": 37788,\n        \"enchant\": 44498,\n        \"gems\": [\n          0\n        ]\n      },\n      {\n        \"id\": 39593,\n        \"enchant\": 44592,\n        \"gems\": [\n          40051,\n          0\n        ]\n      },\n      {\n        \"id\": 40696,\n        \"gems\": [\n          40049,\n          39998\n        ]\n      },\n      {\n        \"id\": 37791,\n        \"enchant\": 41602\n      },\n      {\n        \"id\": 44202,\n        \"enchant\": 60623,\n        \"gems\": [\n          39998\n        ]\n      },\n      {\n        \"id\": 43253,\n        \"gems\": [\n          40027\n        ]\n      },\n      {\n        \"id\": 37694\n      },\n      {\n        \"id\": 40682\n      },\n      {\n        \"id\": 37873\n      },\n      {\n        \"id\": 41384,\n        \"enchant\": 44487\n      },\n      {\n        \"id\": 40698\n      },\n      {\n        \"id\": 40708\n      }\n    ]\n  }`),\n};\n\nexport const P1_PRESET = {\n\tname: 'P1 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\n    \"items\": [\n      {\n        \"id\": 40516,\n        \"enchant\": 44877,\n        \"gems\": [\n          41285,\n          40027\n        ]\n      },\n      {\n        \"id\": 44661,\n        \"gems\": [\n          39998\n        ]\n      },\n      {\n        \"id\": 40286,\n        \"enchant\": 44874\n      },\n      {\n        \"id\": 44005,\n        \"enchant\": 55642,\n        \"gems\": [\n          40027\n        ]\n      },\n      {\n        \"id\": 40514,\n        \"enchant\": 44489,\n        \"gems\": [\n          42144,\n          42144\n        ]\n      },\n      {\n        \"id\": 40324,\n        \"enchant\": 44498,\n        \"gems\": [\n          42144,\n          0\n        ]\n      },\n      {\n        \"id\": 40302,\n        \"enchant\": 44592,\n        \"gems\": [\n          0\n        ]\n      },\n      {\n        \"id\": 40301,\n        \"gems\": [\n          40014\n        ]\n      },\n      {\n        \"id\": 40560,\n        \"enchant\": 41604\n      },\n      {\n        \"id\": 40519,\n        \"enchant\": 60623\n      },\n      {\n        \"id\": 37694\n      },\n      {\n        \"id\": 40399\n      },\n      {\n        \"id\": 40432\n      },\n      {\n        \"id\": 40255\n      },\n      {\n        \"id\": 40395,\n        \"enchant\": 44487\n      },\n      {\n        \"id\": 40401,\n        \"enchant\": 60653\n      },\n      {\n        \"id\": 40267\n      }\n    ]\n  }`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { shamanGlyphsConfig } from '../core/talents/shaman.js';\n\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'elemental-shaman-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t// Warning to use all 4 totems if T6 2pc bonus is active.\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecElementalShaman>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.rotationChangeEmitter, simUI.player.currentStatsEmitter]),\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst hasT62P = simUI.player.getCurrentStats().sets.includes('Skyshatter Regalia (2pc)');\n\t\t\t\t\t\t\tconst totems = simUI.player.getRotation().totems!;\n\t\t\t\t\t\t\tconst hasAll4Totems = totems && totems.earth && totems.air && totems.fire && totems.water;\n\t\t\t\t\t\t\tif (hasT62P && !hasAll4Totems) {\n\t\t\t\t\t\t\t\treturn 'T6 2pc bonus is equipped, but inactive because not all 4 totem types are being used.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatNatureSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatMana,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatNatureSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().elementalPrecision * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\n\t\t\t\tstats = stats.addStat(Stat.StatSpellCrit,\n\t\t\t\t\tplayer.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.17,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatNatureSpellPower]: 1,\n\t\t\t\t\t[Stat.StatSpellCrit]: 1,\n\t\t\t\t\t[Stat.StatSpellHaste]: 1,\n\t\t\t\t\t[Stat.StatMP5]: 0.08,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tdivineSpirit: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: 2,\n\t\t\t\t\tvampiricTouch: true,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tmisery: true,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t}),\n\t\t\t},\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tShamanInputs.ShamanShieldInput,\n\t\t\t\tShamanInputs.Bloodlust,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: ShamanInputs.ElementalShamanRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t],\n\t\t\t},\n\t\t\tcustomSections: [\n\t\t\t\tTotemsSection,\n\t\t\t],\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.SWP_PRESET,\n\t\t\t\t\tPresets.PRE_RAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["Bloodlust","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","ShamanShield","NoShield","actionId","WaterShield","LightningShield","ElementalShamanRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","name","RotationType","Adaptive","tooltip","Manual","InputHelpers.makeRotationBooleanInput","labelTooltip","enableWhen","player","getTalents","thunderstorm","getRotation","type","useChainLightning","InputHelpers.makeRotationNumberInput","useFireNova","StandardTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfLava","major2","GlyphOfTotemOfWrath","major3","GlyphOfLightningBolt","minor1","ShamanMinorGlyph","GlyphOfThunderstorm","minor2","GlyphOfWaterShield","minor3","GlyphOfGhostWolf","DefaultRotation","ElementalShamanRotation","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WrathOfAirTotem","fire","FireTotem","TotemOfWrath","water","WaterTotem","ManaSpringTotem","fnMinManaPer","clMinManaPer","useThunderstorm","DefaultOptions","ElementalShamanOptions","shield","bloodlust","DefaultConsumes","Consumes","defaultPotion","Potions","RunicManaPotion","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","SWP_PRESET","gear","EquipmentSpec","fromJsonString","PRE_RAID_PRESET","Tooltips.BASIC_BIS_DISCLAIMER","P1_PRESET","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","warnings","simUI","updateOn","TypedEvent","onAny","rotationChangeEmitter","currentStatsEmitter","getContent","hasT62P","getCurrentStats","sets","includes","hasAll4Totems","epStats","Stat","StatIntellect","StatSpellPower","StatNatureSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","stats","Stats","addStat","elementalPrecision","Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","Presets.P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.Bloodlust","rotationInputs","ShamanInputs.ElementalShamanRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.SWP_PRESET","Presets.PRE_RAID_PRESET"],"mappings":"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"}