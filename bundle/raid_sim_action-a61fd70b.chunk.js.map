{"version":3,"file":"raid_sim_action-a61fd70b.chunk.js","sources":["../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/proto/deathknight.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/api.ts","../../../ui/core/proto/ui.ts","../../../ui/core/constants/other.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/proto_utils/action_id.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/logs_parser.ts","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/typed_event.ts","../../../ui/core/components/component.ts","../../../ui/core/components/input.ts","../../../ui/core/components/raid_sim_action.ts"],"sourcesContent":["/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nconst fromCharCodes = (chunk) => String.fromCharCode.apply(String, chunk);\n/**\n * Reads UTF8 bytes as a string.\n *\n * See [protobufjs / utf8](https://github.com/protobufjs/protobuf.js/blob/9893e35b854621cce64af4bf6be2cff4fb892796/lib/utf8/index.js#L40)\n *\n * Copyright (c) 2016, Daniel Wirtz\n */\nexport function utf8read(bytes) {\n    if (bytes.length < 1)\n        return \"\";\n    let pos = 0, // position in bytes\n    parts = [], chunk = [], i = 0, // char offset\n    t; // temporary\n    let len = bytes.length;\n    while (pos < len) {\n        t = bytes[pos++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = (t & 31) << 6 | bytes[pos++] & 63;\n        else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        }\n        else\n            chunk[i++] = (t & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;\n        if (i > 8191) {\n            parts.push(fromCharCodes(chunk));\n            i = 0;\n        }\n    }\n    if (parts.length) {\n        if (i)\n            parts.push(fromCharCodes(chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return fromCharCodes(chunk.slice(0, i));\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if (bitsHigh <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + bitsLow);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nfunction detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    return ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\nconst BI = detectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('ulong too small');\n                    if (value > BI.MAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & 0x80000000) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { utf8read } from \"./protobufjs-utf8\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nexport class BinaryReader {\n    constructor(buf) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return utf8read(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","import { BinaryReader } from \"./binary-reader\";\nimport { BinaryWriter } from \"./binary-writer\";\n/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n}, defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        target[localName] = this.enum(field.T(), jsonValue, field.name);\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * google.protobuf.NullValue accepts only JSON `null`.\n     */\n    enum(type, json, fieldName) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields.filter(f => !f.oneof)) {\n            let jsonValue = this.field(field, source[field.localName], options);\n            if (jsonValue !== undefined)\n                json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        // flatten all oneof`s\n        for (const field of this.fields) {\n            if (!field.oneof)\n                continue;\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                // if field is not selected, skip\n                continue;\n            let jsonValue = undefined;\n            if (field.kind == 'scalar' || field.kind == 'enum')\n                // for a selected oneof member, we must emit the default value\n                jsonValue = this.field(field, group[field.localName], {\n                    enumAsInteger: options.enumAsInteger,\n                    useProtoFieldName: options.useProtoFieldName,\n                    emitDefaultValues: true\n                });\n            else\n                jsonValue = this.field(field, group[field.localName], options);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * Replaces fields in the target with the fields from the\n * (partial) source.\n *\n * Omitted fields are not replaced.\n * Copies all values.\n * A default value in the source will replace a value in the target.\n *\n * Message fields are recursively merged (by calling `mergePartial()`\n * of the responsible message handler). Map and repeated fields\n * are simply overwritten, not appended or merged.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if (group === undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue === undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue === undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    output[name] = fieldValue.concat(); // elements are not reference types\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { binaryReadOptions, binaryWriteOptions } from \"./binary-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     *\n     * See MessageCreator.merge() for details.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * Buffs that affect the entire raid.\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +Stats\n     *\n     * @generated from protobuf field: proto.TristateEffect gift_of_the_wild = 1;\n     */\n    giftOfTheWild: TristateEffect;\n    /**\n     * +Stam\n     *\n     * @generated from protobuf field: proto.TristateEffect power_word_fortitude = 2;\n     */\n    powerWordFortitude: TristateEffect;\n    /**\n     * +Health\n     *\n     * @generated from protobuf field: proto.TristateEffect commanding_shout = 3;\n     */\n    commandingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blood_pact = 4;\n     */\n    bloodPact: TristateEffect;\n    /**\n     * + Agi and Str\n     *\n     * @generated from protobuf field: bool horn_of_winter = 5;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect strength_of_earth_totem = 6;\n     */\n    strengthOfEarthTotem: TristateEffect; // none, normal, 15% improved\n    /**\n     * +Intell and/or Spi\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 7;\n     */\n    arcaneBrilliance: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect fel_intelligence = 8;\n     */\n    felIntelligence: TristateEffect;\n    /**\n     * @generated from protobuf field: bool divine_spirit = 9;\n     */\n    divineSpirit: boolean;\n    /**\n     * +AP\n     *\n     * @generated from protobuf field: proto.TristateEffect battle_shout = 10;\n     */\n    battleShout: TristateEffect;\n    /**\n     * 10% AP\n     *\n     * @generated from protobuf field: bool trueshot_aura = 11;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 12;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 13;\n     */\n    abominationsMight: boolean;\n    /**\n     * 5% phy crit\n     *\n     * @generated from protobuf field: proto.TristateEffect leader_of_the_pack = 14;\n     */\n    leaderOfThePack: TristateEffect;\n    /**\n     * @generated from protobuf field: bool rampage = 15;\n     */\n    rampage: boolean;\n    /**\n     * 20% Melee Haste\n     *\n     * @generated from protobuf field: bool icy_talons = 16;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect windfury_totem = 17;\n     */\n    windfuryTotem: TristateEffect; // none, 16%, 20%\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool totem_of_wrath = 18;\n     */\n    totemOfWrath: boolean; // shouldn't stack with demonic pact (does in beta right now)\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 19;\n     */\n    flametongueTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 20;\n     */\n    demonicPact: number; // SP buff, variable : 10% of demonology warlock's own SP\n    /**\n     * +5% Spell Crit and/or +3% Haste\n     *\n     * @generated from protobuf field: bool swift_retribution = 21;\n     */\n    swiftRetribution: boolean; // haste only\n    /**\n     * @generated from protobuf field: proto.TristateEffect moonkin_aura = 22;\n     */\n    moonkinAura: TristateEffect; // both crit and haste\n    /**\n     * @generated from protobuf field: bool elemental_oath = 23;\n     */\n    elementalOath: boolean; // crit only\n    /**\n     * 5% spell haste\n     *\n     * @generated from protobuf field: bool wrath_of_air_totem = 24;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * 3% dmg\n     *\n     * @generated from protobuf field: bool ferocious_inspiration = 25;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 26;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: bool arcane_empowerment = 27;\n     */\n    arcaneEmpowerment: boolean;\n    /**\n     * mp5\n     *\n     * @generated from protobuf field: proto.TristateEffect mana_spring_totem = 28;\n     */\n    manaSpringTotem: TristateEffect;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool bloodlust = 29;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thorns = 30;\n     */\n    thorns: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect devotion_aura = 31;\n     */\n    devotionAura: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect stoneskin_totem = 42;\n     */\n    stoneskinTotem: TristateEffect;\n    /**\n     * @generated from protobuf field: bool retribution_aura = 32;\n     */\n    retributionAura: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_protection = 33;\n     */\n    shadowProtection: boolean;\n    /**\n     * Drums\n     *\n     * @generated from protobuf field: bool drums_of_forgotten_kings = 34;\n     */\n    drumsOfForgottenKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_wild = 35;\n     */\n    drumsOfTheWild: boolean;\n    /**\n     * Scroll\n     *\n     * @generated from protobuf field: bool scroll_of_protection = 36;\n     */\n    scrollOfProtection: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_stamina = 37;\n     */\n    scrollOfStamina: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_strength = 38;\n     */\n    scrollOfStrength: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_agility = 39;\n     */\n    scrollOfAgility: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_intellect = 40;\n     */\n    scrollOfIntellect: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_spirit = 41;\n     */\n    scrollOfSpirit: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n    /**\n     * Item Buffs\n     *\n     * @generated from protobuf field: int32 atiesh_mage = 1;\n     */\n    atieshMage: number;\n    /**\n     * @generated from protobuf field: int32 atiesh_warlock = 2;\n     */\n    atieshWarlock: number;\n    /**\n     * @generated from protobuf field: bool braided_eternium_chain = 3;\n     */\n    braidedEterniumChain: boolean;\n    /**\n     * @generated from protobuf field: bool eye_of_the_night = 4;\n     */\n    eyeOfTheNight: boolean;\n    /**\n     * @generated from protobuf field: bool chain_of_the_twilight_owl = 5;\n     */\n    chainOfTheTwilightOwl: boolean;\n    /**\n     * Group buffs\n     *\n     * @generated from protobuf field: int32 mana_tide_totems = 6;\n     */\n    manaTideTotems: number;\n    /**\n     * @generated from protobuf field: bool heroic_presence = 7;\n     */\n    heroicPresence: boolean;\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * 10% Stats\n     *\n     * @generated from protobuf field: bool blessing_of_kings = 1;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_wisdom = 2;\n     */\n    blessingOfWisdom: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_might = 3;\n     */\n    blessingOfMight: TristateEffect;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 4;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: bool vigilance = 5;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: bool renewed_hope = 6;\n     */\n    renewedHope: boolean;\n    // Only used in individual sims \n    //   as the class that provides these would cast them in raid sim\n\n    /**\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 hymn_of_hope = 7;\n     */\n    hymnOfHope: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_salvation = 8;\n     */\n    handOfSalvation: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 9;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 innervates = 10;\n     */\n    innervates: number;\n    /**\n     * @generated from protobuf field: int32 power_infusions = 11;\n     */\n    powerInfusions: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy = 12;\n     */\n    unholyFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 13;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trades = 19;\n     */\n    tricksOfTheTrades: number;\n    /**\n     * Technically a debuff, but only used by individual sims.\n     *\n     * @generated from protobuf field: int32 shattering_throws = 20;\n     */\n    shatteringThrows: number;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 15;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_wise = 16;\n     */\n    judgementsOfTheWise: boolean;\n    /**\n     * @generated from protobuf field: bool improved_soul_leech = 17;\n     */\n    improvedSoulLeech: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: proto.PetFood pet_food = 7;\n     */\n    petFood: PetFood;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: proto.Conjured starting_conjured = 13;\n     */\n    startingConjured: Conjured;\n    /**\n     * @generated from protobuf field: int32 num_starting_conjured = 14;\n     */\n    numStartingConjured: number;\n    /**\n     * @generated from protobuf field: bool thermal_sapper = 15;\n     */\n    thermalSapper: boolean;\n    /**\n     * @generated from protobuf field: bool explosive_decoy = 16;\n     */\n    explosiveDecoy: boolean;\n    /**\n     * @generated from protobuf field: proto.Explosive filler_explosive = 17;\n     */\n    fillerExplosive: Explosive;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * @generated from protobuf field: bool judgement_of_wisdom = 1;\n     */\n    judgementOfWisdom: boolean;\n    /**\n     * @generated from protobuf field: bool judgement_of_light = 2;\n     */\n    judgementOfLight: boolean;\n    /**\n     * @generated from protobuf field: bool misery = 3;\n     */\n    misery: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect faerie_fire = 4;\n     */\n    faerieFire: TristateEffect;\n    /**\n     * 13% bonus spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 5;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 6;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 7;\n     */\n    earthAndMoon: boolean;\n    /**\n     * +3% to crit against target\n     *\n     * @generated from protobuf field: bool heart_of_the_crusader = 8;\n     */\n    heartOfTheCrusader: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 9;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 10;\n     */\n    totemOfWrath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool shadow_mastery = 11;\n     */\n    shadowMastery: boolean;\n    /**\n     * @generated from protobuf field: bool improved_scorch = 12;\n     */\n    improvedScorch: boolean;\n    /**\n     * @generated from protobuf field: bool winters_chill = 13;\n     */\n    wintersChill: boolean;\n    /**\n     * @generated from protobuf field: bool blood_frenzy = 14;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool savage_combat = 15;\n     */\n    savageCombat: boolean;\n    /**\n     * TODO: validate these\n     *\n     * @generated from protobuf field: bool gift_of_arthas = 16;\n     */\n    giftOfArthas: boolean;\n    /**\n     * Bleed %\n     *\n     * @generated from protobuf field: bool mangle = 17;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool trauma = 18;\n     */\n    trauma: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 19;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 20;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 21;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 22;\n     */\n    acidSpit: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect curse_of_weakness = 23;\n     */\n    curseOfWeakness: TristateEffect;\n    /**\n     * @generated from protobuf field: bool sting = 24;\n     */\n    sting: boolean;\n    /**\n     * @generated from protobuf field: bool spore_cloud = 37;\n     */\n    sporeCloud: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_roar = 25;\n     */\n    demoralizingRoar: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_shout = 26;\n     */\n    demoralizingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: bool vindication = 36;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thunder_clap = 27;\n     */\n    thunderClap: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect frost_fever = 28;\n     */\n    frostFever: TristateEffect;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 29;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 30;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 31;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: bool scorpid_sting = 32;\n     */\n    scorpidSting: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_embrace = 33;\n     */\n    shadowEmbrace: boolean;\n    /**\n     * @generated from protobuf field: bool screech = 34;\n     */\n    screech: boolean;\n    /**\n     * 1 = normal, 2 = talented, 3 = talented+glyphed\n     *\n     * @generated from protobuf field: int32 hunters_mark = 35;\n     */\n    huntersMark: number;\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.Item\n */\nexport interface Item {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * This is unused by most items. For most items we set id to the\n     * wowhead/in-game ID directly. For random enchant items though we need to\n     * use unique hardcoded IDs so this field holds the wowhead ID instead.\n     *\n     * @generated from protobuf field: int32 wowhead_id = 16;\n     */\n    wowheadId: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 15;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 17;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 18;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 19;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 phase = 11;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 12;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 13;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: int32 ilvl = 20;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * @generated from protobuf field: bool heroic = 22;\n     */\n    heroic: boolean;\n}\n/**\n * @generated from protobuf message proto.Enchant\n */\nexport interface Enchant {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number; // ID of the enchant \"item\".\n    /**\n     * @generated from protobuf field: int32 effect_id = 2;\n     */\n    effectId: number; // ID of the effect (for the item tooltip UI)\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n    /**\n     * If true, then id is the ID of the enchant spell instead of the formula item.\n     * This is used by enchants for which a formula doesn't exist (its taught by a trainer).\n     *\n     * @generated from protobuf field: bool is_spell_id = 10;\n     */\n    isSpellId: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 9;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 7;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 8;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 11;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 13;\n     */\n    requiredProfession: Profession;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 12;\n     */\n    classAllowlist: Class[];\n}\n/**\n * @generated from protobuf message proto.Gem\n */\nexport interface Gem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated double stats = 3;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 6;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 7;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 8;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.RaidTarget\n */\nexport interface RaidTarget {\n    /**\n     * Raid index of the player to target. A value of -1 indicates no target.\n     *\n     * @generated from protobuf field: int32 target_index = 1;\n     */\n    targetIndex: number;\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 major1 = 1;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 2;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 3;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 4;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 5;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 6;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 0;\n     */\n    SpecBalanceDruid = 0,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 1;\n     */\n    SpecElementalShaman = 1,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 9;\n     */\n    SpecEnhancementShaman = 9,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 12;\n     */\n    SpecFeralDruid = 12,\n    /**\n     * @generated from protobuf enum value: SpecFeralTankDruid = 14;\n     */\n    SpecFeralTankDruid = 14,\n    /**\n     * @generated from protobuf enum value: SpecHunter = 8;\n     */\n    SpecHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecMage = 2;\n     */\n    SpecMage = 2,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 13;\n     */\n    SpecProtectionPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 3;\n     */\n    SpecRetributionPaladin = 3,\n    /**\n     * @generated from protobuf enum value: SpecRogue = 7;\n     */\n    SpecRogue = 7,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 4;\n     */\n    SpecShadowPriest = 4,\n    /**\n     * @generated from protobuf enum value: SpecSmitePriest = 10;\n     */\n    SpecSmitePriest = 10,\n    /**\n     * @generated from protobuf enum value: SpecWarlock = 5;\n     */\n    SpecWarlock = 5,\n    /**\n     * @generated from protobuf enum value: SpecWarrior = 6;\n     */\n    SpecWarrior = 6,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 11;\n     */\n    SpecProtectionWarrior = 11,\n    /**\n     * @generated from protobuf enum value: SpecDeathknight = 15;\n     */\n    SpecDeathknight = 15,\n    /**\n     * @generated from protobuf enum value: SpecTankDeathknight = 16;\n     */\n    SpecTankDeathknight = 16\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.ShattrathFaction\n */\nexport enum ShattrathFaction {\n    /**\n     * @generated from protobuf enum value: ShattrathFactionAldor = 0;\n     */\n    ShattrathFactionAldor = 0,\n    /**\n     * @generated from protobuf enum value: ShattrathFactionScryer = 1;\n     */\n    ShattrathFactionScryer = 1\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathknight = 10;\n     */\n    ClassDeathknight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11\n}\n/**\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatHealingPower = 6;\n     */\n    StatHealingPower = 6,\n    /**\n     * @generated from protobuf enum value: StatArcaneSpellPower = 7;\n     */\n    StatArcaneSpellPower = 7,\n    /**\n     * @generated from protobuf enum value: StatFireSpellPower = 8;\n     */\n    StatFireSpellPower = 8,\n    /**\n     * @generated from protobuf enum value: StatFrostSpellPower = 9;\n     */\n    StatFrostSpellPower = 9,\n    /**\n     * @generated from protobuf enum value: StatHolySpellPower = 10;\n     */\n    StatHolySpellPower = 10,\n    /**\n     * @generated from protobuf enum value: StatNatureSpellPower = 11;\n     */\n    StatNatureSpellPower = 11,\n    /**\n     * @generated from protobuf enum value: StatShadowSpellPower = 12;\n     */\n    StatShadowSpellPower = 12,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 13;\n     */\n    StatMP5 = 13,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 14;\n     */\n    StatSpellHit = 14,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 15;\n     */\n    StatSpellCrit = 15,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 16;\n     */\n    StatSpellHaste = 16,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 17;\n     */\n    StatSpellPenetration = 17,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 18;\n     */\n    StatAttackPower = 18,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 19;\n     */\n    StatMeleeHit = 19,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 20;\n     */\n    StatMeleeCrit = 20,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 21;\n     */\n    StatMeleeHaste = 21,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 22;\n     */\n    StatArmorPenetration = 22,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 23;\n     */\n    StatExpertise = 23,\n    /**\n     * @generated from protobuf enum value: StatMana = 24;\n     */\n    StatMana = 24,\n    /**\n     * @generated from protobuf enum value: StatEnergy = 25;\n     */\n    StatEnergy = 25,\n    /**\n     * @generated from protobuf enum value: StatRage = 26;\n     */\n    StatRage = 26,\n    /**\n     * @generated from protobuf enum value: StatArmor = 27;\n     */\n    StatArmor = 27,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 28;\n     */\n    StatRangedAttackPower = 28,\n    /**\n     * @generated from protobuf enum value: StatDefense = 29;\n     */\n    StatDefense = 29,\n    /**\n     * @generated from protobuf enum value: StatBlock = 30;\n     */\n    StatBlock = 30,\n    /**\n     * @generated from protobuf enum value: StatBlockValue = 31;\n     */\n    StatBlockValue = 31,\n    /**\n     * @generated from protobuf enum value: StatDodge = 32;\n     */\n    StatDodge = 32,\n    /**\n     * @generated from protobuf enum value: StatParry = 33;\n     */\n    StatParry = 33,\n    /**\n     * @generated from protobuf enum value: StatResilience = 34;\n     */\n    StatResilience = 34,\n    /**\n     * @generated from protobuf enum value: StatHealth = 35;\n     */\n    StatHealth = 35,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 36;\n     */\n    StatArcaneResistance = 36,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 37;\n     */\n    StatFireResistance = 37,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 38;\n     */\n    StatFrostResistance = 38,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 39;\n     */\n    StatNatureResistance = 39,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 40;\n     */\n    StatShadowResistance = 40\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeIdol = 4;\n     */\n    RangedWeaponTypeIdol = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeLibram = 5;\n     */\n    RangedWeaponTypeLibram = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 6;\n     */\n    RangedWeaponTypeThrown = 6,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeTotem = 7;\n     */\n    RangedWeaponTypeTotem = 7,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 8;\n     */\n    RangedWeaponTypeWand = 8,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeSigil = 9;\n     */\n    RangedWeaponTypeSigil = 9\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * @generated from protobuf enum value: RunicHealingPotion = 1;\n     */\n    RunicHealingPotion = 1,\n    /**\n     * @generated from protobuf enum value: RunicManaPotion = 2;\n     */\n    RunicManaPotion = 2,\n    /**\n     * @generated from protobuf enum value: IndestructiblePotion = 3;\n     */\n    IndestructiblePotion = 3,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 4;\n     */\n    PotionOfSpeed = 4,\n    /**\n     * @generated from protobuf enum value: PotionOfWildMagic = 5;\n     */\n    PotionOfWildMagic = 5,\n    /**\n     * @generated from protobuf enum value: DestructionPotion = 6;\n     */\n    DestructionPotion = 6,\n    /**\n     * @generated from protobuf enum value: SuperManaPotion = 7;\n     */\n    SuperManaPotion = 7,\n    /**\n     * @generated from protobuf enum value: HastePotion = 8;\n     */\n    HastePotion = 8,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 9;\n     */\n    MightyRagePotion = 9,\n    /**\n     * @generated from protobuf enum value: FelManaPotion = 10;\n     */\n    FelManaPotion = 10,\n    /**\n     * @generated from protobuf enum value: InsaneStrengthPotion = 11;\n     */\n    InsaneStrengthPotion = 11,\n    /**\n     * @generated from protobuf enum value: IronshieldPotion = 12;\n     */\n    IronshieldPotion = 12,\n    /**\n     * @generated from protobuf enum value: HeroicPotion = 13;\n     */\n    HeroicPotion = 13\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredFlameCap = 2;\n     */\n    ConjuredFlameCap = 2,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 1;\n     */\n    FlaskOfTheFrostWyrm = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 2;\n     */\n    FlaskOfEndlessRage = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 3;\n     */\n    FlaskOfPureMojo = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 4;\n     */\n    FlaskOfStoneblood = 4,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 5;\n     */\n    LesserFlaskOfToughness = 5,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 6;\n     */\n    LesserFlaskOfResistance = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: FlaskOfBlindingLight = 7;\n     */\n    FlaskOfBlindingLight = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfMightyRestoration = 8;\n     */\n    FlaskOfMightyRestoration = 8,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureDeath = 9;\n     */\n    FlaskOfPureDeath = 9,\n    /**\n     * @generated from protobuf enum value: FlaskOfRelentlessAssault = 10;\n     */\n    FlaskOfRelentlessAssault = 10,\n    /**\n     * @generated from protobuf enum value: FlaskOfSupremePower = 11;\n     */\n    FlaskOfSupremePower = 11,\n    /**\n     * @generated from protobuf enum value: FlaskOfFortification = 12;\n     */\n    FlaskOfFortification = 12,\n    /**\n     * @generated from protobuf enum value: FlaskOfChromaticWonder = 13;\n     */\n    FlaskOfChromaticWonder = 13\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfAccuracy = 1;\n     */\n    ElixirOfAccuracy = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 2;\n     */\n    ElixirOfArmorPiercing = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 3;\n     */\n    ElixirOfDeadlyStrikes = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 4;\n     */\n    ElixirOfExpertise = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 5;\n     */\n    ElixirOfLightningSpeed = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 6;\n     */\n    ElixirOfMightyAgility = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 7;\n     */\n    ElixirOfMightyStrength = 7,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 8;\n     */\n    GurusElixir = 8,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 9;\n     */\n    SpellpowerElixir = 9,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 10;\n     */\n    WrathElixir = 10,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: AdeptsElixir = 11;\n     */\n    AdeptsElixir = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 12;\n     */\n    ElixirOfDemonslaying = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorAgility = 13;\n     */\n    ElixirOfMajorAgility = 13,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFirePower = 14;\n     */\n    ElixirOfMajorFirePower = 14,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFrostPower = 15;\n     */\n    ElixirOfMajorFrostPower = 15,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorShadowPower = 16;\n     */\n    ElixirOfMajorShadowPower = 16,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorStrength = 17;\n     */\n    ElixirOfMajorStrength = 17,\n    /**\n     * @generated from protobuf enum value: ElixirOfMastery = 18;\n     */\n    ElixirOfMastery = 18,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMongoose = 19;\n     */\n    ElixirOfTheMongoose = 19,\n    /**\n     * @generated from protobuf enum value: FelStrengthElixir = 20;\n     */\n    FelStrengthElixir = 20,\n    /**\n     * @generated from protobuf enum value: GreaterArcaneElixir = 21;\n     */\n    GreaterArcaneElixir = 21\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 1;\n     */\n    ElixirOfMightyDefense = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 2;\n     */\n    ElixirOfMightyFortitude = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 3;\n     */\n    ElixirOfMightyMageblood = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 4;\n     */\n    ElixirOfMightyThoughts = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 5;\n     */\n    ElixirOfProtection = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 6;\n     */\n    ElixirOfSpirit = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: GiftOfArthas = 7;\n     */\n    GiftOfArthas = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfDraenicWisdom = 8;\n     */\n    ElixirOfDraenicWisdom = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfIronskin = 9;\n     */\n    ElixirOfIronskin = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorDefense = 10;\n     */\n    ElixirOfMajorDefense = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFortitude = 11;\n     */\n    ElixirOfMajorFortitude = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorMageblood = 12;\n     */\n    ElixirOfMajorMageblood = 12\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20\n}\n/**\n * @generated from protobuf enum proto.PetFood\n */\nexport enum PetFood {\n    /**\n     * @generated from protobuf enum value: PetFoodUnknown = 0;\n     */\n    PetFoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: PetFoodSpicedMammothTreats = 1;\n     */\n    PetFoodSpicedMammothTreats = 1,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: PetFoodKiblersBits = 2;\n     */\n    PetFoodKiblersBits = 2\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"gift_of_the_wild\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 2, name: \"power_word_fortitude\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"commanding_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blood_pact\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"strength_of_earth_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 7, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"fel_intelligence\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 9, name: \"divine_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"battle_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 11, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"leader_of_the_pack\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 15, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"windfury_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 18, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"swift_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"moonkin_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 23, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"arcane_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"mana_spring_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"thorns\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 31, name: \"devotion_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 42, name: \"stoneskin_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 32, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"drums_of_forgotten_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"drums_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"scroll_of_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"scroll_of_stamina\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"scroll_of_strength\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"scroll_of_agility\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"scroll_of_intellect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"scroll_of_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { giftOfTheWild: 0, powerWordFortitude: 0, commandingShout: 0, bloodPact: 0, hornOfWinter: false, strengthOfEarthTotem: 0, arcaneBrilliance: false, felIntelligence: 0, divineSpirit: false, battleShout: 0, trueshotAura: false, unleashedRage: false, abominationsMight: false, leaderOfThePack: 0, rampage: false, icyTalons: false, windfuryTotem: 0, totemOfWrath: false, flametongueTotem: false, demonicPact: 0, swiftRetribution: false, moonkinAura: 0, elementalOath: false, wrathOfAirTotem: false, ferociousInspiration: false, sanctifiedRetribution: false, arcaneEmpowerment: false, manaSpringTotem: 0, bloodlust: false, thorns: 0, devotionAura: 0, stoneskinTotem: 0, retributionAura: false, shadowProtection: false, drumsOfForgottenKings: false, drumsOfTheWild: false, scrollOfProtection: false, scrollOfStamina: false, scrollOfStrength: false, scrollOfAgility: false, scrollOfIntellect: false, scrollOfSpirit: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TristateEffect gift_of_the_wild */ 1:\n                    message.giftOfTheWild = reader.int32();\n                    break;\n                case /* proto.TristateEffect power_word_fortitude */ 2:\n                    message.powerWordFortitude = reader.int32();\n                    break;\n                case /* proto.TristateEffect commanding_shout */ 3:\n                    message.commandingShout = reader.int32();\n                    break;\n                case /* proto.TristateEffect blood_pact */ 4:\n                    message.bloodPact = reader.int32();\n                    break;\n                case /* bool horn_of_winter */ 5:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* proto.TristateEffect strength_of_earth_totem */ 6:\n                    message.strengthOfEarthTotem = reader.int32();\n                    break;\n                case /* bool arcane_brilliance */ 7:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* proto.TristateEffect fel_intelligence */ 8:\n                    message.felIntelligence = reader.int32();\n                    break;\n                case /* bool divine_spirit */ 9:\n                    message.divineSpirit = reader.bool();\n                    break;\n                case /* proto.TristateEffect battle_shout */ 10:\n                    message.battleShout = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 11:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 12:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 13:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* proto.TristateEffect leader_of_the_pack */ 14:\n                    message.leaderOfThePack = reader.int32();\n                    break;\n                case /* bool rampage */ 15:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool icy_talons */ 16:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* proto.TristateEffect windfury_totem */ 17:\n                    message.windfuryTotem = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 18:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 19:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* int32 demonic_pact */ 20:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool swift_retribution */ 21:\n                    message.swiftRetribution = reader.bool();\n                    break;\n                case /* proto.TristateEffect moonkin_aura */ 22:\n                    message.moonkinAura = reader.int32();\n                    break;\n                case /* bool elemental_oath */ 23:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 24:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 25:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool sanctified_retribution */ 26:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* bool arcane_empowerment */ 27:\n                    message.arcaneEmpowerment = reader.bool();\n                    break;\n                case /* proto.TristateEffect mana_spring_totem */ 28:\n                    message.manaSpringTotem = reader.int32();\n                    break;\n                case /* bool bloodlust */ 29:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.TristateEffect thorns */ 30:\n                    message.thorns = reader.int32();\n                    break;\n                case /* proto.TristateEffect devotion_aura */ 31:\n                    message.devotionAura = reader.int32();\n                    break;\n                case /* proto.TristateEffect stoneskin_totem */ 42:\n                    message.stoneskinTotem = reader.int32();\n                    break;\n                case /* bool retribution_aura */ 32:\n                    message.retributionAura = reader.bool();\n                    break;\n                case /* bool shadow_protection */ 33:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool drums_of_forgotten_kings */ 34:\n                    message.drumsOfForgottenKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_wild */ 35:\n                    message.drumsOfTheWild = reader.bool();\n                    break;\n                case /* bool scroll_of_protection */ 36:\n                    message.scrollOfProtection = reader.bool();\n                    break;\n                case /* bool scroll_of_stamina */ 37:\n                    message.scrollOfStamina = reader.bool();\n                    break;\n                case /* bool scroll_of_strength */ 38:\n                    message.scrollOfStrength = reader.bool();\n                    break;\n                case /* bool scroll_of_agility */ 39:\n                    message.scrollOfAgility = reader.bool();\n                    break;\n                case /* bool scroll_of_intellect */ 40:\n                    message.scrollOfIntellect = reader.bool();\n                    break;\n                case /* bool scroll_of_spirit */ 41:\n                    message.scrollOfSpirit = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TristateEffect gift_of_the_wild = 1; */\n        if (message.giftOfTheWild !== 0)\n            writer.tag(1, WireType.Varint).int32(message.giftOfTheWild);\n        /* proto.TristateEffect power_word_fortitude = 2; */\n        if (message.powerWordFortitude !== 0)\n            writer.tag(2, WireType.Varint).int32(message.powerWordFortitude);\n        /* proto.TristateEffect commanding_shout = 3; */\n        if (message.commandingShout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.commandingShout);\n        /* proto.TristateEffect blood_pact = 4; */\n        if (message.bloodPact !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bloodPact);\n        /* bool horn_of_winter = 5; */\n        if (message.hornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.hornOfWinter);\n        /* proto.TristateEffect strength_of_earth_totem = 6; */\n        if (message.strengthOfEarthTotem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.strengthOfEarthTotem);\n        /* bool arcane_brilliance = 7; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(7, WireType.Varint).bool(message.arcaneBrilliance);\n        /* proto.TristateEffect fel_intelligence = 8; */\n        if (message.felIntelligence !== 0)\n            writer.tag(8, WireType.Varint).int32(message.felIntelligence);\n        /* bool divine_spirit = 9; */\n        if (message.divineSpirit !== false)\n            writer.tag(9, WireType.Varint).bool(message.divineSpirit);\n        /* proto.TristateEffect battle_shout = 10; */\n        if (message.battleShout !== 0)\n            writer.tag(10, WireType.Varint).int32(message.battleShout);\n        /* bool trueshot_aura = 11; */\n        if (message.trueshotAura !== false)\n            writer.tag(11, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 12; */\n        if (message.unleashedRage !== false)\n            writer.tag(12, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 13; */\n        if (message.abominationsMight !== false)\n            writer.tag(13, WireType.Varint).bool(message.abominationsMight);\n        /* proto.TristateEffect leader_of_the_pack = 14; */\n        if (message.leaderOfThePack !== 0)\n            writer.tag(14, WireType.Varint).int32(message.leaderOfThePack);\n        /* bool rampage = 15; */\n        if (message.rampage !== false)\n            writer.tag(15, WireType.Varint).bool(message.rampage);\n        /* bool icy_talons = 16; */\n        if (message.icyTalons !== false)\n            writer.tag(16, WireType.Varint).bool(message.icyTalons);\n        /* proto.TristateEffect windfury_totem = 17; */\n        if (message.windfuryTotem !== 0)\n            writer.tag(17, WireType.Varint).int32(message.windfuryTotem);\n        /* bool totem_of_wrath = 18; */\n        if (message.totemOfWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.totemOfWrath);\n        /* bool flametongue_totem = 19; */\n        if (message.flametongueTotem !== false)\n            writer.tag(19, WireType.Varint).bool(message.flametongueTotem);\n        /* int32 demonic_pact = 20; */\n        if (message.demonicPact !== 0)\n            writer.tag(20, WireType.Varint).int32(message.demonicPact);\n        /* bool swift_retribution = 21; */\n        if (message.swiftRetribution !== false)\n            writer.tag(21, WireType.Varint).bool(message.swiftRetribution);\n        /* proto.TristateEffect moonkin_aura = 22; */\n        if (message.moonkinAura !== 0)\n            writer.tag(22, WireType.Varint).int32(message.moonkinAura);\n        /* bool elemental_oath = 23; */\n        if (message.elementalOath !== false)\n            writer.tag(23, WireType.Varint).bool(message.elementalOath);\n        /* bool wrath_of_air_totem = 24; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(24, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool ferocious_inspiration = 25; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(25, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool sanctified_retribution = 26; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(26, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* bool arcane_empowerment = 27; */\n        if (message.arcaneEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.arcaneEmpowerment);\n        /* proto.TristateEffect mana_spring_totem = 28; */\n        if (message.manaSpringTotem !== 0)\n            writer.tag(28, WireType.Varint).int32(message.manaSpringTotem);\n        /* bool bloodlust = 29; */\n        if (message.bloodlust !== false)\n            writer.tag(29, WireType.Varint).bool(message.bloodlust);\n        /* proto.TristateEffect thorns = 30; */\n        if (message.thorns !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thorns);\n        /* proto.TristateEffect devotion_aura = 31; */\n        if (message.devotionAura !== 0)\n            writer.tag(31, WireType.Varint).int32(message.devotionAura);\n        /* proto.TristateEffect stoneskin_totem = 42; */\n        if (message.stoneskinTotem !== 0)\n            writer.tag(42, WireType.Varint).int32(message.stoneskinTotem);\n        /* bool retribution_aura = 32; */\n        if (message.retributionAura !== false)\n            writer.tag(32, WireType.Varint).bool(message.retributionAura);\n        /* bool shadow_protection = 33; */\n        if (message.shadowProtection !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowProtection);\n        /* bool drums_of_forgotten_kings = 34; */\n        if (message.drumsOfForgottenKings !== false)\n            writer.tag(34, WireType.Varint).bool(message.drumsOfForgottenKings);\n        /* bool drums_of_the_wild = 35; */\n        if (message.drumsOfTheWild !== false)\n            writer.tag(35, WireType.Varint).bool(message.drumsOfTheWild);\n        /* bool scroll_of_protection = 36; */\n        if (message.scrollOfProtection !== false)\n            writer.tag(36, WireType.Varint).bool(message.scrollOfProtection);\n        /* bool scroll_of_stamina = 37; */\n        if (message.scrollOfStamina !== false)\n            writer.tag(37, WireType.Varint).bool(message.scrollOfStamina);\n        /* bool scroll_of_strength = 38; */\n        if (message.scrollOfStrength !== false)\n            writer.tag(38, WireType.Varint).bool(message.scrollOfStrength);\n        /* bool scroll_of_agility = 39; */\n        if (message.scrollOfAgility !== false)\n            writer.tag(39, WireType.Varint).bool(message.scrollOfAgility);\n        /* bool scroll_of_intellect = 40; */\n        if (message.scrollOfIntellect !== false)\n            writer.tag(40, WireType.Varint).bool(message.scrollOfIntellect);\n        /* bool scroll_of_spirit = 41; */\n        if (message.scrollOfSpirit !== false)\n            writer.tag(41, WireType.Varint).bool(message.scrollOfSpirit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", [\n            { no: 1, name: \"atiesh_mage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"atiesh_warlock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"braided_eternium_chain\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"eye_of_the_night\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"chain_of_the_twilight_owl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mana_tide_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"heroic_presence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = { atieshMage: 0, atieshWarlock: 0, braidedEterniumChain: false, eyeOfTheNight: false, chainOfTheTwilightOwl: false, manaTideTotems: 0, heroicPresence: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 atiesh_mage */ 1:\n                    message.atieshMage = reader.int32();\n                    break;\n                case /* int32 atiesh_warlock */ 2:\n                    message.atieshWarlock = reader.int32();\n                    break;\n                case /* bool braided_eternium_chain */ 3:\n                    message.braidedEterniumChain = reader.bool();\n                    break;\n                case /* bool eye_of_the_night */ 4:\n                    message.eyeOfTheNight = reader.bool();\n                    break;\n                case /* bool chain_of_the_twilight_owl */ 5:\n                    message.chainOfTheTwilightOwl = reader.bool();\n                    break;\n                case /* int32 mana_tide_totems */ 6:\n                    message.manaTideTotems = reader.int32();\n                    break;\n                case /* bool heroic_presence */ 7:\n                    message.heroicPresence = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 atiesh_mage = 1; */\n        if (message.atieshMage !== 0)\n            writer.tag(1, WireType.Varint).int32(message.atieshMage);\n        /* int32 atiesh_warlock = 2; */\n        if (message.atieshWarlock !== 0)\n            writer.tag(2, WireType.Varint).int32(message.atieshWarlock);\n        /* bool braided_eternium_chain = 3; */\n        if (message.braidedEterniumChain !== false)\n            writer.tag(3, WireType.Varint).bool(message.braidedEterniumChain);\n        /* bool eye_of_the_night = 4; */\n        if (message.eyeOfTheNight !== false)\n            writer.tag(4, WireType.Varint).bool(message.eyeOfTheNight);\n        /* bool chain_of_the_twilight_owl = 5; */\n        if (message.chainOfTheTwilightOwl !== false)\n            writer.tag(5, WireType.Varint).bool(message.chainOfTheTwilightOwl);\n        /* int32 mana_tide_totems = 6; */\n        if (message.manaTideTotems !== 0)\n            writer.tag(6, WireType.Varint).int32(message.manaTideTotems);\n        /* bool heroic_presence = 7; */\n        if (message.heroicPresence !== false)\n            writer.tag(7, WireType.Varint).bool(message.heroicPresence);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 1, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_wisdom\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"blessing_of_might\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"renewed_hope\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"hymn_of_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"hand_of_salvation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"innervates\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"power_infusions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"shattering_throws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_soul_leech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { blessingOfKings: false, blessingOfWisdom: 0, blessingOfMight: 0, blessingOfSanctuary: false, vigilance: false, renewedHope: false, hymnOfHope: 0, handOfSalvation: 0, rapture: 0, innervates: 0, powerInfusions: 0, unholyFrenzy: 0, revitalize: 0, tricksOfTheTrades: 0, shatteringThrows: 0, vampiricTouch: false, huntingParty: false, judgementsOfTheWise: false, improvedSoulLeech: false, enduringWinter: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool blessing_of_kings */ 1:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* proto.TristateEffect blessing_of_wisdom */ 2:\n                    message.blessingOfWisdom = reader.int32();\n                    break;\n                case /* proto.TristateEffect blessing_of_might */ 3:\n                    message.blessingOfMight = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 4:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* bool vigilance */ 5:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* bool renewed_hope */ 6:\n                    message.renewedHope = reader.bool();\n                    break;\n                case /* int32 hymn_of_hope */ 7:\n                    message.hymnOfHope = reader.int32();\n                    break;\n                case /* int32 hand_of_salvation */ 8:\n                    message.handOfSalvation = reader.int32();\n                    break;\n                case /* int32 rapture */ 9:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 innervates */ 10:\n                    message.innervates = reader.int32();\n                    break;\n                case /* int32 power_infusions */ 11:\n                    message.powerInfusions = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy */ 12:\n                    message.unholyFrenzy = reader.int32();\n                    break;\n                case /* int32 revitalize */ 13:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trades */ 19:\n                    message.tricksOfTheTrades = reader.int32();\n                    break;\n                case /* int32 shattering_throws */ 20:\n                    message.shatteringThrows = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool hunting_party */ 15:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool judgements_of_the_wise */ 16:\n                    message.judgementsOfTheWise = reader.bool();\n                    break;\n                case /* bool improved_soul_leech */ 17:\n                    message.improvedSoulLeech = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool blessing_of_kings = 1; */\n        if (message.blessingOfKings !== false)\n            writer.tag(1, WireType.Varint).bool(message.blessingOfKings);\n        /* proto.TristateEffect blessing_of_wisdom = 2; */\n        if (message.blessingOfWisdom !== 0)\n            writer.tag(2, WireType.Varint).int32(message.blessingOfWisdom);\n        /* proto.TristateEffect blessing_of_might = 3; */\n        if (message.blessingOfMight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blessingOfMight);\n        /* bool blessing_of_sanctuary = 4; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(4, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* bool vigilance = 5; */\n        if (message.vigilance !== false)\n            writer.tag(5, WireType.Varint).bool(message.vigilance);\n        /* bool renewed_hope = 6; */\n        if (message.renewedHope !== false)\n            writer.tag(6, WireType.Varint).bool(message.renewedHope);\n        /* int32 hymn_of_hope = 7; */\n        if (message.hymnOfHope !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHope);\n        /* int32 hand_of_salvation = 8; */\n        if (message.handOfSalvation !== 0)\n            writer.tag(8, WireType.Varint).int32(message.handOfSalvation);\n        /* int32 rapture = 9; */\n        if (message.rapture !== 0)\n            writer.tag(9, WireType.Varint).int32(message.rapture);\n        /* int32 innervates = 10; */\n        if (message.innervates !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervates);\n        /* int32 power_infusions = 11; */\n        if (message.powerInfusions !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusions);\n        /* int32 unholy_frenzy = 12; */\n        if (message.unholyFrenzy !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzy);\n        /* int32 revitalize = 13; */\n        if (message.revitalize !== 0)\n            writer.tag(13, WireType.Varint).int32(message.revitalize);\n        /* int32 tricks_of_the_trades = 19; */\n        if (message.tricksOfTheTrades !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTrades);\n        /* int32 shattering_throws = 20; */\n        if (message.shatteringThrows !== 0)\n            writer.tag(20, WireType.Varint).int32(message.shatteringThrows);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool hunting_party = 15; */\n        if (message.huntingParty !== false)\n            writer.tag(15, WireType.Varint).bool(message.huntingParty);\n        /* bool judgements_of_the_wise = 16; */\n        if (message.judgementsOfTheWise !== false)\n            writer.tag(16, WireType.Varint).bool(message.judgementsOfTheWise);\n        /* bool improved_soul_leech = 17; */\n        if (message.improvedSoulLeech !== false)\n            writer.tag(17, WireType.Varint).bool(message.improvedSoulLeech);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 7, name: \"pet_food\", kind: \"enum\", T: () => [\"proto.PetFood\", PetFood] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 13, name: \"starting_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 14, name: \"num_starting_conjured\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"thermal_sapper\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"explosive_decoy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"filler_explosive\", kind: \"enum\", T: () => [\"proto.Explosive\", Explosive] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petFood: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, startingConjured: 0, numStartingConjured: 0, thermalSapper: false, explosiveDecoy: false, fillerExplosive: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* proto.PetFood pet_food */ 7:\n                    message.petFood = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* proto.Conjured starting_conjured */ 13:\n                    message.startingConjured = reader.int32();\n                    break;\n                case /* int32 num_starting_conjured */ 14:\n                    message.numStartingConjured = reader.int32();\n                    break;\n                case /* bool thermal_sapper */ 15:\n                    message.thermalSapper = reader.bool();\n                    break;\n                case /* bool explosive_decoy */ 16:\n                    message.explosiveDecoy = reader.bool();\n                    break;\n                case /* proto.Explosive filler_explosive */ 17:\n                    message.fillerExplosive = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* proto.PetFood pet_food = 7; */\n        if (message.petFood !== 0)\n            writer.tag(7, WireType.Varint).int32(message.petFood);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* proto.Conjured starting_conjured = 13; */\n        if (message.startingConjured !== 0)\n            writer.tag(13, WireType.Varint).int32(message.startingConjured);\n        /* int32 num_starting_conjured = 14; */\n        if (message.numStartingConjured !== 0)\n            writer.tag(14, WireType.Varint).int32(message.numStartingConjured);\n        /* bool thermal_sapper = 15; */\n        if (message.thermalSapper !== false)\n            writer.tag(15, WireType.Varint).bool(message.thermalSapper);\n        /* bool explosive_decoy = 16; */\n        if (message.explosiveDecoy !== false)\n            writer.tag(16, WireType.Varint).bool(message.explosiveDecoy);\n        /* proto.Explosive filler_explosive = 17; */\n        if (message.fillerExplosive !== 0)\n            writer.tag(17, WireType.Varint).int32(message.fillerExplosive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"judgement_of_wisdom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"judgement_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"misery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"faerie_fire\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"shadow_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"winters_chill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"gift_of_arthas\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"trauma\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"curse_of_weakness\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 24, name: \"sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"spore_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_roar\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 26, name: \"demoralizing_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 36, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 28, name: \"frost_fever\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"scorpid_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { judgementOfWisdom: false, judgementOfLight: false, misery: false, faerieFire: 0, curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, heartOfTheCrusader: false, masterPoisoner: false, totemOfWrath: false, shadowMastery: false, improvedScorch: false, wintersChill: false, bloodFrenzy: false, savageCombat: false, giftOfArthas: false, mangle: false, trauma: false, stampede: false, exposeArmor: false, sunderArmor: false, acidSpit: false, curseOfWeakness: 0, sting: false, sporeCloud: false, demoralizingRoar: 0, demoralizingShout: 0, vindication: false, thunderClap: 0, frostFever: 0, infectedWounds: false, judgementsOfTheJust: false, insectSwarm: false, scorpidSting: false, shadowEmbrace: false, screech: false, huntersMark: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool judgement_of_wisdom */ 1:\n                    message.judgementOfWisdom = reader.bool();\n                    break;\n                case /* bool judgement_of_light */ 2:\n                    message.judgementOfLight = reader.bool();\n                    break;\n                case /* bool misery */ 3:\n                    message.misery = reader.bool();\n                    break;\n                case /* proto.TristateEffect faerie_fire */ 4:\n                    message.faerieFire = reader.int32();\n                    break;\n                case /* bool curse_of_elements */ 5:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 6:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 7:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool heart_of_the_crusader */ 8:\n                    message.heartOfTheCrusader = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 9:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool totem_of_wrath */ 10:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool shadow_mastery */ 11:\n                    message.shadowMastery = reader.bool();\n                    break;\n                case /* bool improved_scorch */ 12:\n                    message.improvedScorch = reader.bool();\n                    break;\n                case /* bool winters_chill */ 13:\n                    message.wintersChill = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool savage_combat */ 15:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool gift_of_arthas */ 16:\n                    message.giftOfArthas = reader.bool();\n                    break;\n                case /* bool mangle */ 17:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool trauma */ 18:\n                    message.trauma = reader.bool();\n                    break;\n                case /* bool stampede */ 19:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 20:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 21:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool acid_spit */ 22:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* proto.TristateEffect curse_of_weakness */ 23:\n                    message.curseOfWeakness = reader.int32();\n                    break;\n                case /* bool sting */ 24:\n                    message.sting = reader.bool();\n                    break;\n                case /* bool spore_cloud */ 37:\n                    message.sporeCloud = reader.bool();\n                    break;\n                case /* proto.TristateEffect demoralizing_roar */ 25:\n                    message.demoralizingRoar = reader.int32();\n                    break;\n                case /* proto.TristateEffect demoralizing_shout */ 26:\n                    message.demoralizingShout = reader.int32();\n                    break;\n                case /* bool vindication */ 36:\n                    message.vindication = reader.bool();\n                    break;\n                case /* proto.TristateEffect thunder_clap */ 27:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* proto.TristateEffect frost_fever */ 28:\n                    message.frostFever = reader.int32();\n                    break;\n                case /* bool infected_wounds */ 29:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 30:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool insect_swarm */ 31:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* bool scorpid_sting */ 32:\n                    message.scorpidSting = reader.bool();\n                    break;\n                case /* bool shadow_embrace */ 33:\n                    message.shadowEmbrace = reader.bool();\n                    break;\n                case /* bool screech */ 34:\n                    message.screech = reader.bool();\n                    break;\n                case /* int32 hunters_mark */ 35:\n                    message.huntersMark = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool judgement_of_wisdom = 1; */\n        if (message.judgementOfWisdom !== false)\n            writer.tag(1, WireType.Varint).bool(message.judgementOfWisdom);\n        /* bool judgement_of_light = 2; */\n        if (message.judgementOfLight !== false)\n            writer.tag(2, WireType.Varint).bool(message.judgementOfLight);\n        /* bool misery = 3; */\n        if (message.misery !== false)\n            writer.tag(3, WireType.Varint).bool(message.misery);\n        /* proto.TristateEffect faerie_fire = 4; */\n        if (message.faerieFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faerieFire);\n        /* bool curse_of_elements = 5; */\n        if (message.curseOfElements !== false)\n            writer.tag(5, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 6; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(6, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 7; */\n        if (message.earthAndMoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.earthAndMoon);\n        /* bool heart_of_the_crusader = 8; */\n        if (message.heartOfTheCrusader !== false)\n            writer.tag(8, WireType.Varint).bool(message.heartOfTheCrusader);\n        /* bool master_poisoner = 9; */\n        if (message.masterPoisoner !== false)\n            writer.tag(9, WireType.Varint).bool(message.masterPoisoner);\n        /* bool totem_of_wrath = 10; */\n        if (message.totemOfWrath !== false)\n            writer.tag(10, WireType.Varint).bool(message.totemOfWrath);\n        /* bool shadow_mastery = 11; */\n        if (message.shadowMastery !== false)\n            writer.tag(11, WireType.Varint).bool(message.shadowMastery);\n        /* bool improved_scorch = 12; */\n        if (message.improvedScorch !== false)\n            writer.tag(12, WireType.Varint).bool(message.improvedScorch);\n        /* bool winters_chill = 13; */\n        if (message.wintersChill !== false)\n            writer.tag(13, WireType.Varint).bool(message.wintersChill);\n        /* bool blood_frenzy = 14; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(14, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool savage_combat = 15; */\n        if (message.savageCombat !== false)\n            writer.tag(15, WireType.Varint).bool(message.savageCombat);\n        /* bool gift_of_arthas = 16; */\n        if (message.giftOfArthas !== false)\n            writer.tag(16, WireType.Varint).bool(message.giftOfArthas);\n        /* bool mangle = 17; */\n        if (message.mangle !== false)\n            writer.tag(17, WireType.Varint).bool(message.mangle);\n        /* bool trauma = 18; */\n        if (message.trauma !== false)\n            writer.tag(18, WireType.Varint).bool(message.trauma);\n        /* bool stampede = 19; */\n        if (message.stampede !== false)\n            writer.tag(19, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 20; */\n        if (message.exposeArmor !== false)\n            writer.tag(20, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 21; */\n        if (message.sunderArmor !== false)\n            writer.tag(21, WireType.Varint).bool(message.sunderArmor);\n        /* bool acid_spit = 22; */\n        if (message.acidSpit !== false)\n            writer.tag(22, WireType.Varint).bool(message.acidSpit);\n        /* proto.TristateEffect curse_of_weakness = 23; */\n        if (message.curseOfWeakness !== 0)\n            writer.tag(23, WireType.Varint).int32(message.curseOfWeakness);\n        /* bool sting = 24; */\n        if (message.sting !== false)\n            writer.tag(24, WireType.Varint).bool(message.sting);\n        /* bool spore_cloud = 37; */\n        if (message.sporeCloud !== false)\n            writer.tag(37, WireType.Varint).bool(message.sporeCloud);\n        /* proto.TristateEffect demoralizing_roar = 25; */\n        if (message.demoralizingRoar !== 0)\n            writer.tag(25, WireType.Varint).int32(message.demoralizingRoar);\n        /* proto.TristateEffect demoralizing_shout = 26; */\n        if (message.demoralizingShout !== 0)\n            writer.tag(26, WireType.Varint).int32(message.demoralizingShout);\n        /* bool vindication = 36; */\n        if (message.vindication !== false)\n            writer.tag(36, WireType.Varint).bool(message.vindication);\n        /* proto.TristateEffect thunder_clap = 27; */\n        if (message.thunderClap !== 0)\n            writer.tag(27, WireType.Varint).int32(message.thunderClap);\n        /* proto.TristateEffect frost_fever = 28; */\n        if (message.frostFever !== 0)\n            writer.tag(28, WireType.Varint).int32(message.frostFever);\n        /* bool infected_wounds = 29; */\n        if (message.infectedWounds !== false)\n            writer.tag(29, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 30; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(30, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool insect_swarm = 31; */\n        if (message.insectSwarm !== false)\n            writer.tag(31, WireType.Varint).bool(message.insectSwarm);\n        /* bool scorpid_sting = 32; */\n        if (message.scorpidSting !== false)\n            writer.tag(32, WireType.Varint).bool(message.scorpidSting);\n        /* bool shadow_embrace = 33; */\n        if (message.shadowEmbrace !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowEmbrace);\n        /* bool screech = 34; */\n        if (message.screech !== false)\n            writer.tag(34, WireType.Varint).bool(message.screech);\n        /* int32 hunters_mark = 35; */\n        if (message.huntersMark !== 0)\n            writer.tag(35, WireType.Varint).int32(message.huntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, suppressDodge: false, spellSchool: 0, tankIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, useHealth: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, enchant: 0, gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Item$Type extends MessageType<Item> {\n    constructor() {\n        super(\"proto.Item\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"wowhead_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 15, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 17, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 18, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 19, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 13, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Item>): Item {\n        const message = { id: 0, wowheadId: 0, name: \"\", classAllowlist: [], type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, phase: 0, quality: 0, unique: false, ilvl: 0, requiredProfession: 0, heroic: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Item>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 wowhead_id */ 16:\n                    message.wowheadId = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 15:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 17:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 18:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 19:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 phase */ 11:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 12:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 13:\n                    message.unique = reader.bool();\n                    break;\n                case /* int32 ilvl */ 20:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* bool heroic */ 22:\n                    message.heroic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* int32 wowhead_id = 16; */\n        if (message.wowheadId !== 0)\n            writer.tag(16, WireType.Varint).int32(message.wowheadId);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.Class class_allowlist = 15; */\n        if (message.classAllowlist.length) {\n            writer.tag(15, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 17; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(17, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 18; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(18, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 19; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(19, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 phase = 11; */\n        if (message.phase !== 0)\n            writer.tag(11, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 12; */\n        if (message.quality !== 0)\n            writer.tag(12, WireType.Varint).int32(message.quality);\n        /* bool unique = 13; */\n        if (message.unique !== false)\n            writer.tag(13, WireType.Varint).bool(message.unique);\n        /* int32 ilvl = 20; */\n        if (message.ilvl !== 0)\n            writer.tag(20, WireType.Varint).int32(message.ilvl);\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* bool heroic = 22; */\n        if (message.heroic !== false)\n            writer.tag(22, WireType.Varint).bool(message.heroic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Item\n */\nexport const Item = new Item$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Enchant$Type extends MessageType<Enchant> {\n    constructor() {\n        super(\"proto.Enchant\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 10, name: \"is_spell_id\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 9, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 7, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 11, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 12, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] }\n        ]);\n    }\n    create(value?: PartialMessage<Enchant>): Enchant {\n        const message = { id: 0, effectId: 0, name: \"\", isSpellId: false, type: 0, enchantType: 0, stats: [], quality: 0, phase: 0, requiredProfession: 0, classAllowlist: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Enchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Enchant): Enchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 effect_id */ 2:\n                    message.effectId = reader.int32();\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* bool is_spell_id */ 10:\n                    message.isSpellId = reader.bool();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.EnchantType enchant_type */ 9:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 7:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 8:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 11:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.Profession required_profession */ 13:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Enchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* int32 effect_id = 2; */\n        if (message.effectId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.effectId);\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* bool is_spell_id = 10; */\n        if (message.isSpellId !== false)\n            writer.tag(10, WireType.Varint).bool(message.isSpellId);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.EnchantType enchant_type = 9; */\n        if (message.enchantType !== 0)\n            writer.tag(9, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 7; */\n        if (message.stats.length) {\n            writer.tag(7, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 8; */\n        if (message.quality !== 0)\n            writer.tag(8, WireType.Varint).int32(message.quality);\n        /* int32 phase = 11; */\n        if (message.phase !== 0)\n            writer.tag(11, WireType.Varint).int32(message.phase);\n        /* proto.Profession required_profession = 13; */\n        if (message.requiredProfession !== 0)\n            writer.tag(13, WireType.Varint).int32(message.requiredProfession);\n        /* repeated proto.Class class_allowlist = 12; */\n        if (message.classAllowlist.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Enchant\n */\nexport const Enchant = new Enchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Gem$Type extends MessageType<Gem> {\n    constructor() {\n        super(\"proto.Gem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 7, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<Gem>): Gem {\n        const message = { id: 0, name: \"\", stats: [], color: 0, phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Gem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Gem): Gem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated double stats */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 6:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 7:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 8:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Gem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated double stats = 3; */\n        if (message.stats.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 6; */\n        if (message.quality !== 0)\n            writer.tag(6, WireType.Varint).int32(message.quality);\n        /* bool unique = 7; */\n        if (message.unique !== false)\n            writer.tag(7, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 8; */\n        if (message.requiredProfession !== 0)\n            writer.tag(8, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Gem\n */\nexport const Gem = new Gem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidTarget$Type extends MessageType<RaidTarget> {\n    constructor() {\n        super(\"proto.RaidTarget\", [\n            { no: 1, name: \"target_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidTarget>): RaidTarget {\n        const message = { targetIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidTarget): RaidTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 target_index */ 1:\n                    message.targetIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 target_index = 1; */\n        if (message.targetIndex !== 0)\n            writer.tag(1, WireType.Varint).int32(message.targetIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidTarget\n */\nexport const RaidTarget = new RaidTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 major1 */ 1:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 2:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 3:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 4:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 5:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 6:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 major1 = 1; */\n        if (message.major1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 2; */\n        if (message.major2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 3; */\n        if (message.major3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 4; */\n        if (message.minor1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 5; */\n        if (message.minor2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 6; */\n        if (message.minor3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"deathknight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.DeathknightTalents\n */\nexport interface DeathknightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 subversion = 2;\n     */\n    subversion: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 3;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 4;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 6;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 7;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: int32 dark_conviction = 8;\n     */\n    darkConviction: number;\n    /**\n     * @generated from protobuf field: int32 death_rune_mastery = 9;\n     */\n    deathRuneMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_rune_tap = 10;\n     */\n    improvedRuneTap: number;\n    /**\n     * @generated from protobuf field: int32 spell_deflection = 11;\n     */\n    spellDeflection: number;\n    /**\n     * @generated from protobuf field: int32 vendetta = 12;\n     */\n    vendetta: number;\n    /**\n     * @generated from protobuf field: int32 bloody_strikes = 13;\n     */\n    bloodyStrikes: number;\n    /**\n     * @generated from protobuf field: int32 veteran_of_the_third_war = 14;\n     */\n    veteranOfTheThirdWar: number;\n    /**\n     * @generated from protobuf field: bool mark_of_blood = 15;\n     */\n    markOfBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 bloody_vengeance = 16;\n     */\n    bloodyVengeance: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 17;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 bloodworms = 18;\n     */\n    bloodworms: number;\n    /**\n     * @generated from protobuf field: bool hysteria = 19;\n     */\n    hysteria: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 20;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 21;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 22;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 23;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 24;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool heart_strike = 25;\n     */\n    heartStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 might_of_mograine = 26;\n     */\n    mightOfMograine: number;\n    /**\n     * @generated from protobuf field: int32 blood_gorged = 27;\n     */\n    bloodGorged: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 28;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 improved_icy_touch = 29;\n     */\n    improvedIcyTouch: number;\n    /**\n     * @generated from protobuf field: int32 runic_power_mastery = 30;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 31;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 32;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 black_ice = 33;\n     */\n    blackIce: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 34;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 icy_talons = 35;\n     */\n    icyTalons: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 36;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 annihilation = 37;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 38;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 39;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 40;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 frigid_dreadplate = 41;\n     */\n    frigidDreadplate: number;\n    /**\n     * @generated from protobuf field: int32 glacier_rot = 42;\n     */\n    glacierRot: number;\n    /**\n     * @generated from protobuf field: bool deathchill = 43;\n     */\n    deathchill: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 44;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 45;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 rime = 46;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 47;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 48;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 49;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 50;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_north = 51;\n     */\n    bloodOfTheNorth: number;\n    /**\n     * @generated from protobuf field: bool unbreakable_armor = 52;\n     */\n    unbreakableArmor: boolean;\n    /**\n     * @generated from protobuf field: int32 acclimation = 53;\n     */\n    acclimation: number;\n    /**\n     * @generated from protobuf field: bool frost_strike = 54;\n     */\n    frostStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 guile_of_gorefiend = 55;\n     */\n    guileOfGorefiend: number;\n    /**\n     * @generated from protobuf field: int32 tundra_stalker = 56;\n     */\n    tundraStalker: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 57;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 vicious_strikes = 58;\n     */\n    viciousStrikes: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 59;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 60;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 61;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 62;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 unholy_command = 63;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 ravenous_dead = 64;\n     */\n    ravenousDead: number;\n    /**\n     * @generated from protobuf field: int32 outbreak = 65;\n     */\n    outbreak: number;\n    /**\n     * @generated from protobuf field: int32 necrosis = 66;\n     */\n    necrosis: number;\n    /**\n     * @generated from protobuf field: bool corpse_explosion = 67;\n     */\n    corpseExplosion: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 68;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 69;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: int32 night_of_the_dead = 70;\n     */\n    nightOfTheDead: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 71;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: int32 impurity = 72;\n     */\n    impurity: number;\n    /**\n     * @generated from protobuf field: int32 dirge = 73;\n     */\n    dirge: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 74;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 75;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 reaping = 76;\n     */\n    reaping: number;\n    /**\n     * @generated from protobuf field: bool master_of_ghouls = 77;\n     */\n    masterOfGhouls: boolean;\n    /**\n     * @generated from protobuf field: int32 desolation = 78;\n     */\n    desolation: number;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 79;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 80;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool ghoul_frenzy = 81;\n     */\n    ghoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 crypt_fever = 82;\n     */\n    cryptFever: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 83;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 wandering_plague = 84;\n     */\n    wanderingPlague: number;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 85;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: bool scourge_strike = 86;\n     */\n    scourgeStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 87;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 88;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.Deathknight\n */\nexport interface Deathknight {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation rotation = 1;\n     */\n    rotation?: Deathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Options options = 3;\n     */\n    options?: Deathknight_Options;\n}\n/**\n * @generated from protobuf message proto.Deathknight.Rotation\n */\nexport interface Deathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1;\n     */\n    armyOfTheDead: Deathknight_Rotation_ArmyOfTheDead;\n    /**\n     * @generated from protobuf field: bool use_death_and_decay = 2;\n     */\n    useDeathAndDecay: boolean;\n    /**\n     * @generated from protobuf field: bool bt_ghoul_frenzy = 3;\n     */\n    btGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: double disease_refresh_duration = 4;\n     */\n    diseaseRefreshDuration: number;\n    /**\n     * @generated from protobuf field: bool refresh_horn_of_winter = 5;\n     */\n    refreshHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FirstDisease first_disease = 6;\n     */\n    firstDisease: Deathknight_Rotation_FirstDisease;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7;\n     */\n    deathAndDecayPrio: Deathknight_Rotation_DeathAndDecayPrio;\n    /**\n     * @generated from protobuf field: bool use_empower_rune_weapon = 8;\n     */\n    useEmpowerRuneWeapon: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9;\n     */\n    bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.StartingPresence starting_presence = 10;\n     */\n    startingPresence: Deathknight_Rotation_StartingPresence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodTap blood_tap = 11;\n     */\n    bloodTap: Deathknight_Rotation_BloodTap;\n    /**\n     * @generated from protobuf field: double oblit_delay_duration = 12;\n     */\n    oblitDelayDuration: number;\n    /**\n     * @generated from protobuf field: bool use_ams = 13;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 14;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 15;\n     */\n    avgAmsHit: number;\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.ArmyOfTheDead\n */\nexport enum Deathknight_Rotation_ArmyOfTheDead {\n    /**\n     * @generated from protobuf enum value: DoNotUse = 0;\n     */\n    DoNotUse = 0,\n    /**\n     * @generated from protobuf enum value: PreCast = 1;\n     */\n    PreCast = 1,\n    /**\n     * @generated from protobuf enum value: AsMajorCd = 2;\n     */\n    AsMajorCd = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodTap\n */\nexport enum Deathknight_Rotation_BloodTap {\n    /**\n     * @generated from protobuf enum value: GhoulFrenzy = 0;\n     */\n    GhoulFrenzy = 0,\n    /**\n     * @generated from protobuf enum value: IcyTouch = 1;\n     */\n    IcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: BloodStrikeBT = 2;\n     */\n    BloodStrikeBT = 2,\n    /**\n     * @generated from protobuf enum value: BloodBoilBT = 3;\n     */\n    BloodBoilBT = 3\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.DeathAndDecayPrio\n */\nexport enum Deathknight_Rotation_DeathAndDecayPrio {\n    /**\n     * @generated from protobuf enum value: MaxRuneDowntime = 0;\n     */\n    MaxRuneDowntime = 0,\n    /**\n     * @generated from protobuf enum value: MaxDndUptime = 1;\n     */\n    MaxDndUptime = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FirstDisease\n */\nexport enum Deathknight_Rotation_FirstDisease {\n    /**\n     * @generated from protobuf enum value: FrostFever = 0;\n     */\n    FrostFever = 0,\n    /**\n     * @generated from protobuf enum value: BloodPlague = 1;\n     */\n    BloodPlague = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodRuneFiller\n */\nexport enum Deathknight_Rotation_BloodRuneFiller {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.StartingPresence\n */\nexport enum Deathknight_Rotation_StartingPresence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Unholy = 1;\n     */\n    Unholy = 1\n}\n/**\n * @generated from protobuf message proto.Deathknight.Options\n */\nexport interface Deathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: bool precast_ghoul_frenzy = 3;\n     */\n    precastGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool precast_horn_of_winter = 4;\n     */\n    precastHornOfWinter: boolean;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight\n */\nexport interface TankDeathknight {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation rotation = 1;\n     */\n    rotation?: TankDeathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Options options = 3;\n     */\n    options?: TankDeathknight_Options;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Rotation\n */\nexport interface TankDeathknight_Rotation {\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Options\n */\nexport interface TankDeathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n}\n/**\n * @generated from protobuf enum proto.DeathknightMajorGlyph\n */\nexport enum DeathknightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMajorGlyphNone = 0;\n     */\n    DeathknightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodStrike = 43826;\n     */\n    GlyphOfBloodStrike = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkCommand = 43538;\n     */\n    GlyphOfDarkCommand = 43538,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkDeath = 45804;\n     */\n    GlyphOfDarkDeath = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisease = 45805;\n     */\n    GlyphOfDisease = 45805,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceboundFortitude = 43545;\n     */\n    GlyphOfIceboundFortitude = 43545,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfPlagueStrike = 43548;\n     */\n    GlyphOfPlagueStrike = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheGhoul = 43549;\n     */\n    GlyphOfTheGhoul = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnbreakableArmor = 43553;\n     */\n    GlyphOfUnbreakableArmor = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnholyBlight = 45803;\n     */\n    GlyphOfUnholyBlight = 45803,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathknightMinorGlyph\n */\nexport enum DeathknightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMinorGlyphNone = 0;\n     */\n    DeathknightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorpseExplosion = 43671;\n     */\n    GlyphOfCorpseExplosion = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43672;\n     */\n    GlyphOfPestilence = 43672,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43673;\n     */\n    GlyphOfRaiseDead = 43673\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathknightTalents$Type extends MessageType<DeathknightTalents> {\n    constructor() {\n        super(\"proto.DeathknightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"subversion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"dark_conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"death_rune_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_rune_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"spell_deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"vendetta\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"bloody_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"veteran_of_the_third_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"mark_of_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"bloody_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bloodworms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"hysteria\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"heart_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"might_of_mograine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"blood_gorged\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_icy_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"black_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"icy_talons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"frigid_dreadplate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"glacier_rot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"deathchill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"blood_of_the_north\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"unbreakable_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"acclimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"frost_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"guile_of_gorefiend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"tundra_stalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"vicious_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"ravenous_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"outbreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"necrosis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"corpse_explosion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"night_of_the_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"impurity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"dirge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"reaping\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"master_of_ghouls\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"desolation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"crypt_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"wandering_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"scourge_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 87, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 88, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathknightTalents>): DeathknightTalents {\n        const message = { butchery: 0, subversion: 0, bladeBarrier: 0, bladedArmor: 0, scentOfBlood: 0, twoHandedWeaponSpecialization: 0, runeTap: false, darkConviction: 0, deathRuneMastery: 0, improvedRuneTap: 0, spellDeflection: 0, vendetta: 0, bloodyStrikes: 0, veteranOfTheThirdWar: 0, markOfBlood: false, bloodyVengeance: 0, abominationsMight: 0, bloodworms: 0, hysteria: false, improvedBloodPresence: 0, improvedDeathStrike: 0, suddenDoom: 0, vampiricBlood: false, willOfTheNecropolis: 0, heartStrike: false, mightOfMograine: 0, bloodGorged: 0, dancingRuneWeapon: false, improvedIcyTouch: 0, runicPowerMastery: 0, toughness: 0, icyReach: 0, blackIce: 0, nervesOfColdSteel: 0, icyTalons: 0, lichborne: false, annihilation: 0, killingMachine: 0, chillOfTheGrave: 0, endlessWinter: 0, frigidDreadplate: 0, glacierRot: 0, deathchill: false, improvedIcyTalons: false, mercilessCombat: 0, rime: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, bloodOfTheNorth: 0, unbreakableArmor: false, acclimation: 0, frostStrike: false, guileOfGorefiend: 0, tundraStalker: 0, howlingBlast: false, viciousStrikes: 0, virulence: 0, anticipation: 0, epidemic: 0, morbidity: 0, unholyCommand: 0, ravenousDead: 0, outbreak: 0, necrosis: 0, corpseExplosion: false, onAPaleHorse: 0, bloodCakedBlade: 0, nightOfTheDead: 0, unholyBlight: false, impurity: 0, dirge: 0, desecration: 0, magicSuppression: 0, reaping: 0, masterOfGhouls: false, desolation: 0, antiMagicZone: false, improvedUnholyPresence: 0, ghoulFrenzy: false, cryptFever: 0, boneShield: false, wanderingPlague: 0, ebonPlaguebringer: 0, scourgeStrike: false, rageOfRivendare: 0, summonGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathknightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathknightTalents): DeathknightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 subversion */ 2:\n                    message.subversion = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 3:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 4:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 6:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool rune_tap */ 7:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* int32 dark_conviction */ 8:\n                    message.darkConviction = reader.int32();\n                    break;\n                case /* int32 death_rune_mastery */ 9:\n                    message.deathRuneMastery = reader.int32();\n                    break;\n                case /* int32 improved_rune_tap */ 10:\n                    message.improvedRuneTap = reader.int32();\n                    break;\n                case /* int32 spell_deflection */ 11:\n                    message.spellDeflection = reader.int32();\n                    break;\n                case /* int32 vendetta */ 12:\n                    message.vendetta = reader.int32();\n                    break;\n                case /* int32 bloody_strikes */ 13:\n                    message.bloodyStrikes = reader.int32();\n                    break;\n                case /* int32 veteran_of_the_third_war */ 14:\n                    message.veteranOfTheThirdWar = reader.int32();\n                    break;\n                case /* bool mark_of_blood */ 15:\n                    message.markOfBlood = reader.bool();\n                    break;\n                case /* int32 bloody_vengeance */ 16:\n                    message.bloodyVengeance = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 17:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 bloodworms */ 18:\n                    message.bloodworms = reader.int32();\n                    break;\n                case /* bool hysteria */ 19:\n                    message.hysteria = reader.bool();\n                    break;\n                case /* int32 improved_blood_presence */ 20:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 improved_death_strike */ 21:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 22:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool vampiric_blood */ 23:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 will_of_the_necropolis */ 24:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool heart_strike */ 25:\n                    message.heartStrike = reader.bool();\n                    break;\n                case /* int32 might_of_mograine */ 26:\n                    message.mightOfMograine = reader.int32();\n                    break;\n                case /* int32 blood_gorged */ 27:\n                    message.bloodGorged = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 28:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 improved_icy_touch */ 29:\n                    message.improvedIcyTouch = reader.int32();\n                    break;\n                case /* int32 runic_power_mastery */ 30:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 31:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 32:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 black_ice */ 33:\n                    message.blackIce = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 34:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 icy_talons */ 35:\n                    message.icyTalons = reader.int32();\n                    break;\n                case /* bool lichborne */ 36:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 annihilation */ 37:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 38:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 39:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 40:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 frigid_dreadplate */ 41:\n                    message.frigidDreadplate = reader.int32();\n                    break;\n                case /* int32 glacier_rot */ 42:\n                    message.glacierRot = reader.int32();\n                    break;\n                case /* bool deathchill */ 43:\n                    message.deathchill = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 44:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 merciless_combat */ 45:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 rime */ 46:\n                    message.rime = reader.int32();\n                    break;\n                case /* int32 chilblains */ 47:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 48:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 49:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 50:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 blood_of_the_north */ 51:\n                    message.bloodOfTheNorth = reader.int32();\n                    break;\n                case /* bool unbreakable_armor */ 52:\n                    message.unbreakableArmor = reader.bool();\n                    break;\n                case /* int32 acclimation */ 53:\n                    message.acclimation = reader.int32();\n                    break;\n                case /* bool frost_strike */ 54:\n                    message.frostStrike = reader.bool();\n                    break;\n                case /* int32 guile_of_gorefiend */ 55:\n                    message.guileOfGorefiend = reader.int32();\n                    break;\n                case /* int32 tundra_stalker */ 56:\n                    message.tundraStalker = reader.int32();\n                    break;\n                case /* bool howling_blast */ 57:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 vicious_strikes */ 58:\n                    message.viciousStrikes = reader.int32();\n                    break;\n                case /* int32 virulence */ 59:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 anticipation */ 60:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 epidemic */ 61:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 morbidity */ 62:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 unholy_command */ 63:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 ravenous_dead */ 64:\n                    message.ravenousDead = reader.int32();\n                    break;\n                case /* int32 outbreak */ 65:\n                    message.outbreak = reader.int32();\n                    break;\n                case /* int32 necrosis */ 66:\n                    message.necrosis = reader.int32();\n                    break;\n                case /* bool corpse_explosion */ 67:\n                    message.corpseExplosion = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 68:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 69:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* int32 night_of_the_dead */ 70:\n                    message.nightOfTheDead = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 71:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* int32 impurity */ 72:\n                    message.impurity = reader.int32();\n                    break;\n                case /* int32 dirge */ 73:\n                    message.dirge = reader.int32();\n                    break;\n                case /* int32 desecration */ 74:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 75:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 reaping */ 76:\n                    message.reaping = reader.int32();\n                    break;\n                case /* bool master_of_ghouls */ 77:\n                    message.masterOfGhouls = reader.bool();\n                    break;\n                case /* int32 desolation */ 78:\n                    message.desolation = reader.int32();\n                    break;\n                case /* bool anti_magic_zone */ 79:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 80:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool ghoul_frenzy */ 81:\n                    message.ghoulFrenzy = reader.bool();\n                    break;\n                case /* int32 crypt_fever */ 82:\n                    message.cryptFever = reader.int32();\n                    break;\n                case /* bool bone_shield */ 83:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 wandering_plague */ 84:\n                    message.wanderingPlague = reader.int32();\n                    break;\n                case /* int32 ebon_plaguebringer */ 85:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* bool scourge_strike */ 86:\n                    message.scourgeStrike = reader.bool();\n                    break;\n                case /* int32 rage_of_rivendare */ 87:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 88:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathknightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 subversion = 2; */\n        if (message.subversion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.subversion);\n        /* int32 blade_barrier = 3; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 4; */\n        if (message.bladedArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bladedArmor);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 two_handed_weapon_specialization = 6; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(6, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool rune_tap = 7; */\n        if (message.runeTap !== false)\n            writer.tag(7, WireType.Varint).bool(message.runeTap);\n        /* int32 dark_conviction = 8; */\n        if (message.darkConviction !== 0)\n            writer.tag(8, WireType.Varint).int32(message.darkConviction);\n        /* int32 death_rune_mastery = 9; */\n        if (message.deathRuneMastery !== 0)\n            writer.tag(9, WireType.Varint).int32(message.deathRuneMastery);\n        /* int32 improved_rune_tap = 10; */\n        if (message.improvedRuneTap !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedRuneTap);\n        /* int32 spell_deflection = 11; */\n        if (message.spellDeflection !== 0)\n            writer.tag(11, WireType.Varint).int32(message.spellDeflection);\n        /* int32 vendetta = 12; */\n        if (message.vendetta !== 0)\n            writer.tag(12, WireType.Varint).int32(message.vendetta);\n        /* int32 bloody_strikes = 13; */\n        if (message.bloodyStrikes !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodyStrikes);\n        /* int32 veteran_of_the_third_war = 14; */\n        if (message.veteranOfTheThirdWar !== 0)\n            writer.tag(14, WireType.Varint).int32(message.veteranOfTheThirdWar);\n        /* bool mark_of_blood = 15; */\n        if (message.markOfBlood !== false)\n            writer.tag(15, WireType.Varint).bool(message.markOfBlood);\n        /* int32 bloody_vengeance = 16; */\n        if (message.bloodyVengeance !== 0)\n            writer.tag(16, WireType.Varint).int32(message.bloodyVengeance);\n        /* int32 abominations_might = 17; */\n        if (message.abominationsMight !== 0)\n            writer.tag(17, WireType.Varint).int32(message.abominationsMight);\n        /* int32 bloodworms = 18; */\n        if (message.bloodworms !== 0)\n            writer.tag(18, WireType.Varint).int32(message.bloodworms);\n        /* bool hysteria = 19; */\n        if (message.hysteria !== false)\n            writer.tag(19, WireType.Varint).bool(message.hysteria);\n        /* int32 improved_blood_presence = 20; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 improved_death_strike = 21; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 sudden_doom = 22; */\n        if (message.suddenDoom !== 0)\n            writer.tag(22, WireType.Varint).int32(message.suddenDoom);\n        /* bool vampiric_blood = 23; */\n        if (message.vampiricBlood !== false)\n            writer.tag(23, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 will_of_the_necropolis = 24; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool heart_strike = 25; */\n        if (message.heartStrike !== false)\n            writer.tag(25, WireType.Varint).bool(message.heartStrike);\n        /* int32 might_of_mograine = 26; */\n        if (message.mightOfMograine !== 0)\n            writer.tag(26, WireType.Varint).int32(message.mightOfMograine);\n        /* int32 blood_gorged = 27; */\n        if (message.bloodGorged !== 0)\n            writer.tag(27, WireType.Varint).int32(message.bloodGorged);\n        /* bool dancing_rune_weapon = 28; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(28, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 improved_icy_touch = 29; */\n        if (message.improvedIcyTouch !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedIcyTouch);\n        /* int32 runic_power_mastery = 30; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(30, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 toughness = 31; */\n        if (message.toughness !== 0)\n            writer.tag(31, WireType.Varint).int32(message.toughness);\n        /* int32 icy_reach = 32; */\n        if (message.icyReach !== 0)\n            writer.tag(32, WireType.Varint).int32(message.icyReach);\n        /* int32 black_ice = 33; */\n        if (message.blackIce !== 0)\n            writer.tag(33, WireType.Varint).int32(message.blackIce);\n        /* int32 nerves_of_cold_steel = 34; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 icy_talons = 35; */\n        if (message.icyTalons !== 0)\n            writer.tag(35, WireType.Varint).int32(message.icyTalons);\n        /* bool lichborne = 36; */\n        if (message.lichborne !== false)\n            writer.tag(36, WireType.Varint).bool(message.lichborne);\n        /* int32 annihilation = 37; */\n        if (message.annihilation !== 0)\n            writer.tag(37, WireType.Varint).int32(message.annihilation);\n        /* int32 killing_machine = 38; */\n        if (message.killingMachine !== 0)\n            writer.tag(38, WireType.Varint).int32(message.killingMachine);\n        /* int32 chill_of_the_grave = 39; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(39, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 endless_winter = 40; */\n        if (message.endlessWinter !== 0)\n            writer.tag(40, WireType.Varint).int32(message.endlessWinter);\n        /* int32 frigid_dreadplate = 41; */\n        if (message.frigidDreadplate !== 0)\n            writer.tag(41, WireType.Varint).int32(message.frigidDreadplate);\n        /* int32 glacier_rot = 42; */\n        if (message.glacierRot !== 0)\n            writer.tag(42, WireType.Varint).int32(message.glacierRot);\n        /* bool deathchill = 43; */\n        if (message.deathchill !== false)\n            writer.tag(43, WireType.Varint).bool(message.deathchill);\n        /* bool improved_icy_talons = 44; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(44, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 merciless_combat = 45; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(45, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 rime = 46; */\n        if (message.rime !== 0)\n            writer.tag(46, WireType.Varint).int32(message.rime);\n        /* int32 chilblains = 47; */\n        if (message.chilblains !== 0)\n            writer.tag(47, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 48; */\n        if (message.hungeringCold !== false)\n            writer.tag(48, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 49; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 50; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(50, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 blood_of_the_north = 51; */\n        if (message.bloodOfTheNorth !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bloodOfTheNorth);\n        /* bool unbreakable_armor = 52; */\n        if (message.unbreakableArmor !== false)\n            writer.tag(52, WireType.Varint).bool(message.unbreakableArmor);\n        /* int32 acclimation = 53; */\n        if (message.acclimation !== 0)\n            writer.tag(53, WireType.Varint).int32(message.acclimation);\n        /* bool frost_strike = 54; */\n        if (message.frostStrike !== false)\n            writer.tag(54, WireType.Varint).bool(message.frostStrike);\n        /* int32 guile_of_gorefiend = 55; */\n        if (message.guileOfGorefiend !== 0)\n            writer.tag(55, WireType.Varint).int32(message.guileOfGorefiend);\n        /* int32 tundra_stalker = 56; */\n        if (message.tundraStalker !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tundraStalker);\n        /* bool howling_blast = 57; */\n        if (message.howlingBlast !== false)\n            writer.tag(57, WireType.Varint).bool(message.howlingBlast);\n        /* int32 vicious_strikes = 58; */\n        if (message.viciousStrikes !== 0)\n            writer.tag(58, WireType.Varint).int32(message.viciousStrikes);\n        /* int32 virulence = 59; */\n        if (message.virulence !== 0)\n            writer.tag(59, WireType.Varint).int32(message.virulence);\n        /* int32 anticipation = 60; */\n        if (message.anticipation !== 0)\n            writer.tag(60, WireType.Varint).int32(message.anticipation);\n        /* int32 epidemic = 61; */\n        if (message.epidemic !== 0)\n            writer.tag(61, WireType.Varint).int32(message.epidemic);\n        /* int32 morbidity = 62; */\n        if (message.morbidity !== 0)\n            writer.tag(62, WireType.Varint).int32(message.morbidity);\n        /* int32 unholy_command = 63; */\n        if (message.unholyCommand !== 0)\n            writer.tag(63, WireType.Varint).int32(message.unholyCommand);\n        /* int32 ravenous_dead = 64; */\n        if (message.ravenousDead !== 0)\n            writer.tag(64, WireType.Varint).int32(message.ravenousDead);\n        /* int32 outbreak = 65; */\n        if (message.outbreak !== 0)\n            writer.tag(65, WireType.Varint).int32(message.outbreak);\n        /* int32 necrosis = 66; */\n        if (message.necrosis !== 0)\n            writer.tag(66, WireType.Varint).int32(message.necrosis);\n        /* bool corpse_explosion = 67; */\n        if (message.corpseExplosion !== false)\n            writer.tag(67, WireType.Varint).bool(message.corpseExplosion);\n        /* int32 on_a_pale_horse = 68; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(68, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 blood_caked_blade = 69; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(69, WireType.Varint).int32(message.bloodCakedBlade);\n        /* int32 night_of_the_dead = 70; */\n        if (message.nightOfTheDead !== 0)\n            writer.tag(70, WireType.Varint).int32(message.nightOfTheDead);\n        /* bool unholy_blight = 71; */\n        if (message.unholyBlight !== false)\n            writer.tag(71, WireType.Varint).bool(message.unholyBlight);\n        /* int32 impurity = 72; */\n        if (message.impurity !== 0)\n            writer.tag(72, WireType.Varint).int32(message.impurity);\n        /* int32 dirge = 73; */\n        if (message.dirge !== 0)\n            writer.tag(73, WireType.Varint).int32(message.dirge);\n        /* int32 desecration = 74; */\n        if (message.desecration !== 0)\n            writer.tag(74, WireType.Varint).int32(message.desecration);\n        /* int32 magic_suppression = 75; */\n        if (message.magicSuppression !== 0)\n            writer.tag(75, WireType.Varint).int32(message.magicSuppression);\n        /* int32 reaping = 76; */\n        if (message.reaping !== 0)\n            writer.tag(76, WireType.Varint).int32(message.reaping);\n        /* bool master_of_ghouls = 77; */\n        if (message.masterOfGhouls !== false)\n            writer.tag(77, WireType.Varint).bool(message.masterOfGhouls);\n        /* int32 desolation = 78; */\n        if (message.desolation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.desolation);\n        /* bool anti_magic_zone = 79; */\n        if (message.antiMagicZone !== false)\n            writer.tag(79, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 80; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(80, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool ghoul_frenzy = 81; */\n        if (message.ghoulFrenzy !== false)\n            writer.tag(81, WireType.Varint).bool(message.ghoulFrenzy);\n        /* int32 crypt_fever = 82; */\n        if (message.cryptFever !== 0)\n            writer.tag(82, WireType.Varint).int32(message.cryptFever);\n        /* bool bone_shield = 83; */\n        if (message.boneShield !== false)\n            writer.tag(83, WireType.Varint).bool(message.boneShield);\n        /* int32 wandering_plague = 84; */\n        if (message.wanderingPlague !== 0)\n            writer.tag(84, WireType.Varint).int32(message.wanderingPlague);\n        /* int32 ebon_plaguebringer = 85; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(85, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* bool scourge_strike = 86; */\n        if (message.scourgeStrike !== false)\n            writer.tag(86, WireType.Varint).bool(message.scourgeStrike);\n        /* int32 rage_of_rivendare = 87; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(87, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool summon_gargoyle = 88; */\n        if (message.summonGargoyle !== false)\n            writer.tag(88, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathknightTalents\n */\nexport const DeathknightTalents = new DeathknightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight$Type extends MessageType<Deathknight> {\n    constructor() {\n        super(\"proto.Deathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Deathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Deathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight>): Deathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight): Deathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation rotation */ 1:\n                    message.rotation = Deathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Deathknight.Options options */ 3:\n                    message.options = Deathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            Deathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Options options = 3; */\n        if (message.options)\n            Deathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight\n */\nexport const Deathknight = new Deathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Rotation$Type extends MessageType<Deathknight_Rotation> {\n    constructor() {\n        super(\"proto.Deathknight.Rotation\", [\n            { no: 1, name: \"army_of_the_dead\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.ArmyOfTheDead\", Deathknight_Rotation_ArmyOfTheDead] },\n            { no: 2, name: \"use_death_and_decay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"bt_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disease_refresh_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"refresh_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"first_disease\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FirstDisease\", Deathknight_Rotation_FirstDisease] },\n            { no: 7, name: \"death_and_decay_prio\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.DeathAndDecayPrio\", Deathknight_Rotation_DeathAndDecayPrio] },\n            { no: 8, name: \"use_empower_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"blood_rune_filler\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodRuneFiller\", Deathknight_Rotation_BloodRuneFiller] },\n            { no: 10, name: \"starting_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.StartingPresence\", Deathknight_Rotation_StartingPresence] },\n            { no: 11, name: \"blood_tap\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodTap\", Deathknight_Rotation_BloodTap] },\n            { no: 12, name: \"oblit_delay_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Rotation>): Deathknight_Rotation {\n        const message = { armyOfTheDead: 0, useDeathAndDecay: false, btGhoulFrenzy: false, diseaseRefreshDuration: 0, refreshHornOfWinter: false, firstDisease: 0, deathAndDecayPrio: 0, useEmpowerRuneWeapon: false, bloodRuneFiller: 0, startingPresence: 0, bloodTap: 0, oblitDelayDuration: 0, useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Rotation): Deathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead */ 1:\n                    message.armyOfTheDead = reader.int32();\n                    break;\n                case /* bool use_death_and_decay */ 2:\n                    message.useDeathAndDecay = reader.bool();\n                    break;\n                case /* bool bt_ghoul_frenzy */ 3:\n                    message.btGhoulFrenzy = reader.bool();\n                    break;\n                case /* double disease_refresh_duration */ 4:\n                    message.diseaseRefreshDuration = reader.double();\n                    break;\n                case /* bool refresh_horn_of_winter */ 5:\n                    message.refreshHornOfWinter = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.FirstDisease first_disease */ 6:\n                    message.firstDisease = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio */ 7:\n                    message.deathAndDecayPrio = reader.int32();\n                    break;\n                case /* bool use_empower_rune_weapon */ 8:\n                    message.useEmpowerRuneWeapon = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler */ 9:\n                    message.bloodRuneFiller = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.StartingPresence starting_presence */ 10:\n                    message.startingPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodTap blood_tap */ 11:\n                    message.bloodTap = reader.int32();\n                    break;\n                case /* double oblit_delay_duration */ 12:\n                    message.oblitDelayDuration = reader.double();\n                    break;\n                case /* bool use_ams */ 13:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 14:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 15:\n                    message.avgAmsHit = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1; */\n        if (message.armyOfTheDead !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armyOfTheDead);\n        /* bool use_death_and_decay = 2; */\n        if (message.useDeathAndDecay !== false)\n            writer.tag(2, WireType.Varint).bool(message.useDeathAndDecay);\n        /* bool bt_ghoul_frenzy = 3; */\n        if (message.btGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.btGhoulFrenzy);\n        /* double disease_refresh_duration = 4; */\n        if (message.diseaseRefreshDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.diseaseRefreshDuration);\n        /* bool refresh_horn_of_winter = 5; */\n        if (message.refreshHornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.refreshHornOfWinter);\n        /* proto.Deathknight.Rotation.FirstDisease first_disease = 6; */\n        if (message.firstDisease !== 0)\n            writer.tag(6, WireType.Varint).int32(message.firstDisease);\n        /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7; */\n        if (message.deathAndDecayPrio !== 0)\n            writer.tag(7, WireType.Varint).int32(message.deathAndDecayPrio);\n        /* bool use_empower_rune_weapon = 8; */\n        if (message.useEmpowerRuneWeapon !== false)\n            writer.tag(8, WireType.Varint).bool(message.useEmpowerRuneWeapon);\n        /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9; */\n        if (message.bloodRuneFiller !== 0)\n            writer.tag(9, WireType.Varint).int32(message.bloodRuneFiller);\n        /* proto.Deathknight.Rotation.StartingPresence starting_presence = 10; */\n        if (message.startingPresence !== 0)\n            writer.tag(10, WireType.Varint).int32(message.startingPresence);\n        /* proto.Deathknight.Rotation.BloodTap blood_tap = 11; */\n        if (message.bloodTap !== 0)\n            writer.tag(11, WireType.Varint).int32(message.bloodTap);\n        /* double oblit_delay_duration = 12; */\n        if (message.oblitDelayDuration !== 0)\n            writer.tag(12, WireType.Bit64).double(message.oblitDelayDuration);\n        /* bool use_ams = 13; */\n        if (message.useAms !== false)\n            writer.tag(13, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 14; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(14, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 15; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(15, WireType.Bit64).double(message.avgAmsHit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Rotation\n */\nexport const Deathknight_Rotation = new Deathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Options$Type extends MessageType<Deathknight_Options> {\n    constructor() {\n        super(\"proto.Deathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"precast_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"precast_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Options>): Deathknight_Options {\n        const message = { startingRunicPower: 0, petUptime: 0, precastGhoulFrenzy: false, precastHornOfWinter: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Options): Deathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                case /* bool precast_ghoul_frenzy */ 3:\n                    message.precastGhoulFrenzy = reader.bool();\n                    break;\n                case /* bool precast_horn_of_winter */ 4:\n                    message.precastHornOfWinter = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        /* bool precast_ghoul_frenzy = 3; */\n        if (message.precastGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.precastGhoulFrenzy);\n        /* bool precast_horn_of_winter = 4; */\n        if (message.precastHornOfWinter !== false)\n            writer.tag(4, WireType.Varint).bool(message.precastHornOfWinter);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Options\n */\nexport const Deathknight_Options = new Deathknight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight$Type extends MessageType<TankDeathknight> {\n    constructor() {\n        super(\"proto.TankDeathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => TankDeathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => TankDeathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight>): TankDeathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight): TankDeathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation rotation */ 1:\n                    message.rotation = TankDeathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.TankDeathknight.Options options */ 3:\n                    message.options = TankDeathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            TankDeathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight.Options options = 3; */\n        if (message.options)\n            TankDeathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight\n */\nexport const TankDeathknight = new TankDeathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Rotation$Type extends MessageType<TankDeathknight_Rotation> {\n    constructor() {\n        super(\"proto.TankDeathknight.Rotation\", []);\n    }\n    create(value?: PartialMessage<TankDeathknight_Rotation>): TankDeathknight_Rotation {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Rotation): TankDeathknight_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: TankDeathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Rotation\n */\nexport const TankDeathknight_Rotation = new TankDeathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Options$Type extends MessageType<TankDeathknight_Options> {\n    constructor() {\n        super(\"proto.TankDeathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Options>): TankDeathknight_Options {\n        const message = { startingRunicPower: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Options): TankDeathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Options\n */\nexport const TankDeathknight_Options = new TankDeathknight_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 improved_heroic_strike = 1;\n     */\n    improvedHeroicStrike: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 2;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_rend = 3;\n     */\n    improvedRend: number;\n    /**\n     * @generated from protobuf field: int32 improved_charge = 4;\n     */\n    improvedCharge: number;\n    /**\n     * @generated from protobuf field: int32 iron_will = 5;\n     */\n    ironWill: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 6;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_overpower = 7;\n     */\n    improvedOverpower: number;\n    /**\n     * @generated from protobuf field: bool anger_management = 8;\n     */\n    angerManagement: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 9;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 10;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 11;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 12;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: int32 poleaxe_specialization = 13;\n     */\n    poleaxeSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 14;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 15;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 sword_specialization = 16;\n     */\n    swordSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 17;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 18;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 trauma = 19;\n     */\n    trauma: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 20;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: bool mortal_strike = 21;\n     */\n    mortalStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 strength_of_arms = 22;\n     */\n    strengthOfArms: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 23;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 24;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mortal_strike = 25;\n     */\n    improvedMortalStrike: number;\n    /**\n     * @generated from protobuf field: int32 unrelenting_assault = 26;\n     */\n    unrelentingAssault: number;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 27;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: bool endless_rage = 28;\n     */\n    endlessRage: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 29;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 30;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool bladestorm = 31;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 armored_to_the_teeth = 32;\n     */\n    armoredToTheTeeth: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 33;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 34;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 improved_demoralizing_shout = 35;\n     */\n    improvedDemoralizingShout: number;\n    /**\n     * @generated from protobuf field: int32 unbridled_wrath = 36;\n     */\n    unbridledWrath: number;\n    /**\n     * @generated from protobuf field: int32 improved_cleave = 37;\n     */\n    improvedCleave: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 38;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_craze = 39;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 commanding_presence = 40;\n     */\n    commandingPresence: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 41;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_execute = 42;\n     */\n    improvedExecute: number;\n    /**\n     * @generated from protobuf field: int32 enrage = 43;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 precision = 44;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 45;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_intercept = 46;\n     */\n    improvedIntercept: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_rage = 47;\n     */\n    improvedBerserkerRage: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 48;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 49;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: bool bloodthirst = 50;\n     */\n    bloodthirst: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_whirlwind = 51;\n     */\n    improvedWhirlwind: number;\n    /**\n     * @generated from protobuf field: int32 furious_attacks = 52;\n     */\n    furiousAttacks: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_stance = 53;\n     */\n    improvedBerserkerStance: number;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 54;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 55;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 56;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 unending_fury = 57;\n     */\n    unendingFury: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 58;\n     */\n    titansGrip: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 improved_bloodrage = 59;\n     */\n    improvedBloodrage: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 60;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_thunder_clap = 61;\n     */\n    improvedThunderClap: number;\n    /**\n     * @generated from protobuf field: int32 incite = 62;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 63;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 64;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 65;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 66;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 67;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_spell_reflection = 68;\n     */\n    improvedSpellReflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_disarm = 69;\n     */\n    improvedDisarm: number;\n    /**\n     * @generated from protobuf field: int32 puncture = 70;\n     */\n    puncture: number;\n    /**\n     * @generated from protobuf field: int32 improved_disciplines = 71;\n     */\n    improvedDisciplines: number;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 72;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 gag_order = 73;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 74;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_defensive_stance = 75;\n     */\n    improvedDefensiveStance: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 76;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_rage = 77;\n     */\n    focusedRage: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 78;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 79;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 80;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: bool devastate = 81;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 critical_block = 82;\n     */\n    criticalBlock: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 83;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: int32 damage_shield = 84;\n     */\n    damageShield: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 85;\n     */\n    shockwave: boolean;\n    /**\n     * TBC Talents (Here because some deprecated abilities that hasn't been removed need it so it could be compiled)\n     *\n     * @generated from protobuf field: int32 improved_sunder_armor = 86;\n     */\n    improvedSunderArmor: number;\n    /**\n     * @generated from protobuf field: int32 improved_shield_wall = 87;\n     */\n    improvedShieldWall: number;\n    /**\n     * @generated from protobuf field: bool improved_shield_block = 88;\n     */\n    improvedShieldBlock: boolean;\n    /**\n     * @generated from protobuf field: int32 defiance = 89;\n     */\n    defiance: number;\n    /**\n     * @generated from protobuf field: bool shield_slam = 90;\n     */\n    shieldSlam: boolean;\n}\n/**\n * @generated from protobuf message proto.Warrior\n */\nexport interface Warrior {\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation rotation = 1;\n     */\n    rotation?: Warrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.Warrior.Options options = 3;\n     */\n    options?: Warrior_Options;\n}\n/**\n * @generated from protobuf message proto.Warrior.Rotation\n */\nexport interface Warrior_Rotation {\n    /**\n     * @generated from protobuf field: bool use_cleave = 1;\n     */\n    useCleave: boolean;\n    /**\n     * @generated from protobuf field: bool use_rend = 2;\n     */\n    useRend: boolean;\n    /**\n     * @generated from protobuf field: bool use_ms = 18;\n     */\n    useMs: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam = 3;\n     */\n    useSlam: boolean;\n    /**\n     * @generated from protobuf field: bool prioritize_ww = 4;\n     */\n    prioritizeWw: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.SunderArmor sunderArmor = 5;\n     */\n    sunderArmor: Warrior_Rotation_SunderArmor;\n    /**\n     * @generated from protobuf field: bool maintain_demo_shout = 6;\n     */\n    maintainDemoShout: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_thunder_clap = 7;\n     */\n    maintainThunderClap: boolean;\n    /**\n     * Queue HS or Cleave when over this threshold.\n     *\n     * @generated from protobuf field: double hs_rage_threshold = 8;\n     */\n    hsRageThreshold: number;\n    /**\n     * Use Mortal Strike when over this threshold.\n     *\n     * @generated from protobuf field: double ms_rage_threshold = 9;\n     */\n    msRageThreshold: number;\n    /**\n     * Fury only: Use Rend when over this threshold.\n     *\n     * @generated from protobuf field: double rend_rage_threshold = 10;\n     */\n    rendRageThreshold: number;\n    /**\n     * Refresh Rend when remaining duration is less than this threshold.\n     *\n     * @generated from protobuf field: double rend_cd_threshold = 11;\n     */\n    rendCdThreshold: number;\n    /**\n     * @generated from protobuf field: bool use_hs_during_execute = 12;\n     */\n    useHsDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_bt_during_execute = 13;\n     */\n    useBtDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool spam_execute = 14;\n     */\n    spamExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_ww_during_execute = 15;\n     */\n    useWwDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam_over_execute = 16;\n     */\n    useSlamOverExecute: boolean;\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.SunderArmor\n */\nexport enum Warrior_Rotation_SunderArmor {\n    /**\n     * @generated from protobuf enum value: SunderArmorNone = 0;\n     */\n    SunderArmorNone = 0,\n    /**\n     * @generated from protobuf enum value: SunderArmorHelpStack = 1;\n     */\n    SunderArmorHelpStack = 1,\n    /**\n     * @generated from protobuf enum value: SunderArmorMaintain = 2;\n     */\n    SunderArmorMaintain = 2\n}\n/**\n * @generated from protobuf message proto.Warrior.Options\n */\nexport interface Warrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 3;\n     */\n    shout: WarriorShout;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation rotation = 1;\n     */\n    rotation?: ProtectionWarrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 3;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.DemoShout demo_shout = 1;\n     */\n    demoShout: ProtectionWarrior_Rotation_DemoShout;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.ThunderClap thunder_clap = 2;\n     */\n    thunderClap: ProtectionWarrior_Rotation_ThunderClap;\n    /**\n     * @generated from protobuf field: bool use_shield_block = 5;\n     */\n    useShieldBlock: boolean;\n    /**\n     * @generated from protobuf field: bool use_cleave = 4;\n     */\n    useCleave: boolean;\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 hs_rage_threshold = 3;\n     */\n    hsRageThreshold: number;\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.DemoShout\n */\nexport enum ProtectionWarrior_Rotation_DemoShout {\n    /**\n     * @generated from protobuf enum value: DemoShoutNone = 0;\n     */\n    DemoShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: DemoShoutMaintain = 1;\n     */\n    DemoShoutMaintain = 1,\n    /**\n     * @generated from protobuf enum value: DemoShoutFiller = 2;\n     */\n    DemoShoutFiller = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.ThunderClap\n */\nexport enum ProtectionWarrior_Rotation_ThunderClap {\n    /**\n     * @generated from protobuf enum value: ThunderClapNone = 0;\n     */\n    ThunderClapNone = 0,\n    /**\n     * @generated from protobuf enum value: ThunderClapMaintain = 1;\n     */\n    ThunderClapMaintain = 1,\n    /**\n     * @generated from protobuf enum value: ThunderClapOnCD = 2;\n     */\n    ThunderClapOnCD = 2\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: bool use_shield_wall = 8;\n     */\n    useShieldWall: boolean;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 4;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool precast_shout = 5;\n     */\n    precastShout: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_t2 = 6;\n     */\n    precastShoutT2: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_sapphire = 7;\n     */\n    precastShoutSapphire: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarbaricInsults = 43420;\n     */\n    GlyphOfBarbaricInsults = 43420,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlocking = 43425;\n     */\n    GlyphOfBlocking = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43412;\n     */\n    GlyphOfBloodthirst = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnragedRegeneration = 45794;\n     */\n    GlyphOfEnragedRegeneration = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfExecution = 43416;\n     */\n    GlyphOfExecution = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfHamstring = 43417;\n     */\n    GlyphOfHamstring = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicStrike = 43418;\n     */\n    GlyphOfHeroicStrike = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLastStand = 43426;\n     */\n    GlyphOfLastStand = 43426,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfRending = 43423;\n     */\n    GlyphOfRending = 43423,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfTaunt = 43429;\n     */\n    GlyphOfTaunt = 43429,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigilance = 45793;\n     */\n    GlyphOfVigilance = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfWhirlwind = 43432;\n     */\n    GlyphOfWhirlwind = 43432\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodrage = 43396;\n     */\n    GlyphOfBloodrage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfCharge = 43397;\n     */\n    GlyphOfCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfMockingBlow = 43398;\n     */\n    GlyphOfMockingBlow = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"improved_heroic_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_rend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_charge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"iron_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_overpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"anger_management\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"poleaxe_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"sword_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"trauma\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"mortal_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"strength_of_arms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"improved_mortal_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"unrelenting_assault\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"endless_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"armored_to_the_teeth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"improved_demoralizing_shout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"unbridled_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_cleave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"commanding_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"improved_execute\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_intercept\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_berserker_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"bloodthirst\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_whirlwind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"furious_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"improved_berserker_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"unending_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_bloodrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"improved_thunder_clap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_spell_reflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_disarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"puncture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"improved_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"improved_defensive_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"focused_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"critical_block\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"damage_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 86, name: \"improved_sunder_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 87, name: \"improved_shield_wall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 88, name: \"improved_shield_block\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 89, name: \"defiance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 90, name: \"shield_slam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { improvedHeroicStrike: 0, deflection: 0, improvedRend: 0, improvedCharge: 0, ironWill: 0, tacticalMastery: 0, improvedOverpower: 0, angerManagement: false, impale: 0, deepWounds: 0, twoHandedWeaponSpecialization: 0, tasteForBlood: 0, poleaxeSpecialization: 0, sweepingStrikes: false, maceSpecialization: 0, swordSpecialization: 0, weaponMastery: 0, improvedHamstring: 0, trauma: 0, secondWind: 0, mortalStrike: false, strengthOfArms: 0, improvedSlam: 0, juggernaut: false, improvedMortalStrike: 0, unrelentingAssault: 0, suddenDeath: 0, endlessRage: false, bloodFrenzy: 0, wreckingCrew: 0, bladestorm: false, armoredToTheTeeth: 0, boomingVoice: 0, cruelty: 0, improvedDemoralizingShout: 0, unbridledWrath: 0, improvedCleave: 0, piercingHowl: false, bloodCraze: 0, commandingPresence: 0, dualWieldSpecialization: 0, improvedExecute: 0, enrage: 0, precision: 0, deathWish: false, improvedIntercept: 0, improvedBerserkerRage: 0, flurry: 0, intensifyRage: 0, bloodthirst: false, improvedWhirlwind: 0, furiousAttacks: 0, improvedBerserkerStance: 0, heroicFury: false, rampage: false, bloodsurge: 0, unendingFury: 0, titansGrip: false, improvedBloodrage: 0, shieldSpecialization: 0, improvedThunderClap: 0, incite: 0, anticipation: 0, lastStand: false, improvedRevenge: 0, shieldMastery: 0, toughness: 0, improvedSpellReflection: 0, improvedDisarm: 0, puncture: 0, improvedDisciplines: 0, concussionBlow: false, gagOrder: 0, oneHandedWeaponSpecialization: 0, improvedDefensiveStance: 0, vigilance: false, focusedRage: 0, vitality: 0, safeguard: 0, warbringer: false, devastate: false, criticalBlock: 0, swordAndBoard: 0, damageShield: 0, shockwave: false, improvedSunderArmor: 0, improvedShieldWall: 0, improvedShieldBlock: false, defiance: 0, shieldSlam: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_heroic_strike */ 1:\n                    message.improvedHeroicStrike = reader.int32();\n                    break;\n                case /* int32 deflection */ 2:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 improved_rend */ 3:\n                    message.improvedRend = reader.int32();\n                    break;\n                case /* int32 improved_charge */ 4:\n                    message.improvedCharge = reader.int32();\n                    break;\n                case /* int32 iron_will */ 5:\n                    message.ironWill = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 6:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 improved_overpower */ 7:\n                    message.improvedOverpower = reader.int32();\n                    break;\n                case /* bool anger_management */ 8:\n                    message.angerManagement = reader.bool();\n                    break;\n                case /* int32 impale */ 9:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 10:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 11:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 12:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* int32 poleaxe_specialization */ 13:\n                    message.poleaxeSpecialization = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 14:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 mace_specialization */ 15:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* int32 sword_specialization */ 16:\n                    message.swordSpecialization = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 17:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 18:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 trauma */ 19:\n                    message.trauma = reader.int32();\n                    break;\n                case /* int32 second_wind */ 20:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* bool mortal_strike */ 21:\n                    message.mortalStrike = reader.bool();\n                    break;\n                case /* int32 strength_of_arms */ 22:\n                    message.strengthOfArms = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 23:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool juggernaut */ 24:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 improved_mortal_strike */ 25:\n                    message.improvedMortalStrike = reader.int32();\n                    break;\n                case /* int32 unrelenting_assault */ 26:\n                    message.unrelentingAssault = reader.int32();\n                    break;\n                case /* int32 sudden_death */ 27:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* bool endless_rage */ 28:\n                    message.endlessRage = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 29:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 30:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool bladestorm */ 31:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 armored_to_the_teeth */ 32:\n                    message.armoredToTheTeeth = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 33:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 cruelty */ 34:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 improved_demoralizing_shout */ 35:\n                    message.improvedDemoralizingShout = reader.int32();\n                    break;\n                case /* int32 unbridled_wrath */ 36:\n                    message.unbridledWrath = reader.int32();\n                    break;\n                case /* int32 improved_cleave */ 37:\n                    message.improvedCleave = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 38:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 39:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 commanding_presence */ 40:\n                    message.commandingPresence = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 41:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_execute */ 42:\n                    message.improvedExecute = reader.int32();\n                    break;\n                case /* int32 enrage */ 43:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 precision */ 44:\n                    message.precision = reader.int32();\n                    break;\n                case /* bool death_wish */ 45:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 improved_intercept */ 46:\n                    message.improvedIntercept = reader.int32();\n                    break;\n                case /* int32 improved_berserker_rage */ 47:\n                    message.improvedBerserkerRage = reader.int32();\n                    break;\n                case /* int32 flurry */ 48:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 49:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* bool bloodthirst */ 50:\n                    message.bloodthirst = reader.bool();\n                    break;\n                case /* int32 improved_whirlwind */ 51:\n                    message.improvedWhirlwind = reader.int32();\n                    break;\n                case /* int32 furious_attacks */ 52:\n                    message.furiousAttacks = reader.int32();\n                    break;\n                case /* int32 improved_berserker_stance */ 53:\n                    message.improvedBerserkerStance = reader.int32();\n                    break;\n                case /* bool heroic_fury */ 54:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool rampage */ 55:\n                    message.rampage = reader.bool();\n                    break;\n                case /* int32 bloodsurge */ 56:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 unending_fury */ 57:\n                    message.unendingFury = reader.int32();\n                    break;\n                case /* bool titans_grip */ 58:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* int32 improved_bloodrage */ 59:\n                    message.improvedBloodrage = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 60:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_thunder_clap */ 61:\n                    message.improvedThunderClap = reader.int32();\n                    break;\n                case /* int32 incite */ 62:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 anticipation */ 63:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool last_stand */ 64:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 65:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 66:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 67:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_spell_reflection */ 68:\n                    message.improvedSpellReflection = reader.int32();\n                    break;\n                case /* int32 improved_disarm */ 69:\n                    message.improvedDisarm = reader.int32();\n                    break;\n                case /* int32 puncture */ 70:\n                    message.puncture = reader.int32();\n                    break;\n                case /* int32 improved_disciplines */ 71:\n                    message.improvedDisciplines = reader.int32();\n                    break;\n                case /* bool concussion_blow */ 72:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 gag_order */ 73:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 74:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_defensive_stance */ 75:\n                    message.improvedDefensiveStance = reader.int32();\n                    break;\n                case /* bool vigilance */ 76:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 focused_rage */ 77:\n                    message.focusedRage = reader.int32();\n                    break;\n                case /* int32 vitality */ 78:\n                    message.vitality = reader.int32();\n                    break;\n                case /* int32 safeguard */ 79:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* bool warbringer */ 80:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* bool devastate */ 81:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 critical_block */ 82:\n                    message.criticalBlock = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 83:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* int32 damage_shield */ 84:\n                    message.damageShield = reader.int32();\n                    break;\n                case /* bool shockwave */ 85:\n                    message.shockwave = reader.bool();\n                    break;\n                case /* int32 improved_sunder_armor */ 86:\n                    message.improvedSunderArmor = reader.int32();\n                    break;\n                case /* int32 improved_shield_wall */ 87:\n                    message.improvedShieldWall = reader.int32();\n                    break;\n                case /* bool improved_shield_block */ 88:\n                    message.improvedShieldBlock = reader.bool();\n                    break;\n                case /* int32 defiance */ 89:\n                    message.defiance = reader.int32();\n                    break;\n                case /* bool shield_slam */ 90:\n                    message.shieldSlam = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_heroic_strike = 1; */\n        if (message.improvedHeroicStrike !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedHeroicStrike);\n        /* int32 deflection = 2; */\n        if (message.deflection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.deflection);\n        /* int32 improved_rend = 3; */\n        if (message.improvedRend !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedRend);\n        /* int32 improved_charge = 4; */\n        if (message.improvedCharge !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCharge);\n        /* int32 iron_will = 5; */\n        if (message.ironWill !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ironWill);\n        /* int32 tactical_mastery = 6; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 improved_overpower = 7; */\n        if (message.improvedOverpower !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedOverpower);\n        /* bool anger_management = 8; */\n        if (message.angerManagement !== false)\n            writer.tag(8, WireType.Varint).bool(message.angerManagement);\n        /* int32 impale = 9; */\n        if (message.impale !== 0)\n            writer.tag(9, WireType.Varint).int32(message.impale);\n        /* int32 deep_wounds = 10; */\n        if (message.deepWounds !== 0)\n            writer.tag(10, WireType.Varint).int32(message.deepWounds);\n        /* int32 two_handed_weapon_specialization = 11; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(11, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* int32 taste_for_blood = 12; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(12, WireType.Varint).int32(message.tasteForBlood);\n        /* int32 poleaxe_specialization = 13; */\n        if (message.poleaxeSpecialization !== 0)\n            writer.tag(13, WireType.Varint).int32(message.poleaxeSpecialization);\n        /* bool sweeping_strikes = 14; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(14, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 mace_specialization = 15; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(15, WireType.Varint).int32(message.maceSpecialization);\n        /* int32 sword_specialization = 16; */\n        if (message.swordSpecialization !== 0)\n            writer.tag(16, WireType.Varint).int32(message.swordSpecialization);\n        /* int32 weapon_mastery = 17; */\n        if (message.weaponMastery !== 0)\n            writer.tag(17, WireType.Varint).int32(message.weaponMastery);\n        /* int32 improved_hamstring = 18; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 trauma = 19; */\n        if (message.trauma !== 0)\n            writer.tag(19, WireType.Varint).int32(message.trauma);\n        /* int32 second_wind = 20; */\n        if (message.secondWind !== 0)\n            writer.tag(20, WireType.Varint).int32(message.secondWind);\n        /* bool mortal_strike = 21; */\n        if (message.mortalStrike !== false)\n            writer.tag(21, WireType.Varint).bool(message.mortalStrike);\n        /* int32 strength_of_arms = 22; */\n        if (message.strengthOfArms !== 0)\n            writer.tag(22, WireType.Varint).int32(message.strengthOfArms);\n        /* int32 improved_slam = 23; */\n        if (message.improvedSlam !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSlam);\n        /* bool juggernaut = 24; */\n        if (message.juggernaut !== false)\n            writer.tag(24, WireType.Varint).bool(message.juggernaut);\n        /* int32 improved_mortal_strike = 25; */\n        if (message.improvedMortalStrike !== 0)\n            writer.tag(25, WireType.Varint).int32(message.improvedMortalStrike);\n        /* int32 unrelenting_assault = 26; */\n        if (message.unrelentingAssault !== 0)\n            writer.tag(26, WireType.Varint).int32(message.unrelentingAssault);\n        /* int32 sudden_death = 27; */\n        if (message.suddenDeath !== 0)\n            writer.tag(27, WireType.Varint).int32(message.suddenDeath);\n        /* bool endless_rage = 28; */\n        if (message.endlessRage !== false)\n            writer.tag(28, WireType.Varint).bool(message.endlessRage);\n        /* int32 blood_frenzy = 29; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 wrecking_crew = 30; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wreckingCrew);\n        /* bool bladestorm = 31; */\n        if (message.bladestorm !== false)\n            writer.tag(31, WireType.Varint).bool(message.bladestorm);\n        /* int32 armored_to_the_teeth = 32; */\n        if (message.armoredToTheTeeth !== 0)\n            writer.tag(32, WireType.Varint).int32(message.armoredToTheTeeth);\n        /* int32 booming_voice = 33; */\n        if (message.boomingVoice !== 0)\n            writer.tag(33, WireType.Varint).int32(message.boomingVoice);\n        /* int32 cruelty = 34; */\n        if (message.cruelty !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cruelty);\n        /* int32 improved_demoralizing_shout = 35; */\n        if (message.improvedDemoralizingShout !== 0)\n            writer.tag(35, WireType.Varint).int32(message.improvedDemoralizingShout);\n        /* int32 unbridled_wrath = 36; */\n        if (message.unbridledWrath !== 0)\n            writer.tag(36, WireType.Varint).int32(message.unbridledWrath);\n        /* int32 improved_cleave = 37; */\n        if (message.improvedCleave !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedCleave);\n        /* bool piercing_howl = 38; */\n        if (message.piercingHowl !== false)\n            writer.tag(38, WireType.Varint).bool(message.piercingHowl);\n        /* int32 blood_craze = 39; */\n        if (message.bloodCraze !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodCraze);\n        /* int32 commanding_presence = 40; */\n        if (message.commandingPresence !== 0)\n            writer.tag(40, WireType.Varint).int32(message.commandingPresence);\n        /* int32 dual_wield_specialization = 41; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_execute = 42; */\n        if (message.improvedExecute !== 0)\n            writer.tag(42, WireType.Varint).int32(message.improvedExecute);\n        /* int32 enrage = 43; */\n        if (message.enrage !== 0)\n            writer.tag(43, WireType.Varint).int32(message.enrage);\n        /* int32 precision = 44; */\n        if (message.precision !== 0)\n            writer.tag(44, WireType.Varint).int32(message.precision);\n        /* bool death_wish = 45; */\n        if (message.deathWish !== false)\n            writer.tag(45, WireType.Varint).bool(message.deathWish);\n        /* int32 improved_intercept = 46; */\n        if (message.improvedIntercept !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedIntercept);\n        /* int32 improved_berserker_rage = 47; */\n        if (message.improvedBerserkerRage !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedBerserkerRage);\n        /* int32 flurry = 48; */\n        if (message.flurry !== 0)\n            writer.tag(48, WireType.Varint).int32(message.flurry);\n        /* int32 intensify_rage = 49; */\n        if (message.intensifyRage !== 0)\n            writer.tag(49, WireType.Varint).int32(message.intensifyRage);\n        /* bool bloodthirst = 50; */\n        if (message.bloodthirst !== false)\n            writer.tag(50, WireType.Varint).bool(message.bloodthirst);\n        /* int32 improved_whirlwind = 51; */\n        if (message.improvedWhirlwind !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedWhirlwind);\n        /* int32 furious_attacks = 52; */\n        if (message.furiousAttacks !== 0)\n            writer.tag(52, WireType.Varint).int32(message.furiousAttacks);\n        /* int32 improved_berserker_stance = 53; */\n        if (message.improvedBerserkerStance !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedBerserkerStance);\n        /* bool heroic_fury = 54; */\n        if (message.heroicFury !== false)\n            writer.tag(54, WireType.Varint).bool(message.heroicFury);\n        /* bool rampage = 55; */\n        if (message.rampage !== false)\n            writer.tag(55, WireType.Varint).bool(message.rampage);\n        /* int32 bloodsurge = 56; */\n        if (message.bloodsurge !== 0)\n            writer.tag(56, WireType.Varint).int32(message.bloodsurge);\n        /* int32 unending_fury = 57; */\n        if (message.unendingFury !== 0)\n            writer.tag(57, WireType.Varint).int32(message.unendingFury);\n        /* bool titans_grip = 58; */\n        if (message.titansGrip !== false)\n            writer.tag(58, WireType.Varint).bool(message.titansGrip);\n        /* int32 improved_bloodrage = 59; */\n        if (message.improvedBloodrage !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedBloodrage);\n        /* int32 shield_specialization = 60; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(60, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 improved_thunder_clap = 61; */\n        if (message.improvedThunderClap !== 0)\n            writer.tag(61, WireType.Varint).int32(message.improvedThunderClap);\n        /* int32 incite = 62; */\n        if (message.incite !== 0)\n            writer.tag(62, WireType.Varint).int32(message.incite);\n        /* int32 anticipation = 63; */\n        if (message.anticipation !== 0)\n            writer.tag(63, WireType.Varint).int32(message.anticipation);\n        /* bool last_stand = 64; */\n        if (message.lastStand !== false)\n            writer.tag(64, WireType.Varint).bool(message.lastStand);\n        /* int32 improved_revenge = 65; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(65, WireType.Varint).int32(message.improvedRevenge);\n        /* int32 shield_mastery = 66; */\n        if (message.shieldMastery !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shieldMastery);\n        /* int32 toughness = 67; */\n        if (message.toughness !== 0)\n            writer.tag(67, WireType.Varint).int32(message.toughness);\n        /* int32 improved_spell_reflection = 68; */\n        if (message.improvedSpellReflection !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedSpellReflection);\n        /* int32 improved_disarm = 69; */\n        if (message.improvedDisarm !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedDisarm);\n        /* int32 puncture = 70; */\n        if (message.puncture !== 0)\n            writer.tag(70, WireType.Varint).int32(message.puncture);\n        /* int32 improved_disciplines = 71; */\n        if (message.improvedDisciplines !== 0)\n            writer.tag(71, WireType.Varint).int32(message.improvedDisciplines);\n        /* bool concussion_blow = 72; */\n        if (message.concussionBlow !== false)\n            writer.tag(72, WireType.Varint).bool(message.concussionBlow);\n        /* int32 gag_order = 73; */\n        if (message.gagOrder !== 0)\n            writer.tag(73, WireType.Varint).int32(message.gagOrder);\n        /* int32 one_handed_weapon_specialization = 74; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(74, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 improved_defensive_stance = 75; */\n        if (message.improvedDefensiveStance !== 0)\n            writer.tag(75, WireType.Varint).int32(message.improvedDefensiveStance);\n        /* bool vigilance = 76; */\n        if (message.vigilance !== false)\n            writer.tag(76, WireType.Varint).bool(message.vigilance);\n        /* int32 focused_rage = 77; */\n        if (message.focusedRage !== 0)\n            writer.tag(77, WireType.Varint).int32(message.focusedRage);\n        /* int32 vitality = 78; */\n        if (message.vitality !== 0)\n            writer.tag(78, WireType.Varint).int32(message.vitality);\n        /* int32 safeguard = 79; */\n        if (message.safeguard !== 0)\n            writer.tag(79, WireType.Varint).int32(message.safeguard);\n        /* bool warbringer = 80; */\n        if (message.warbringer !== false)\n            writer.tag(80, WireType.Varint).bool(message.warbringer);\n        /* bool devastate = 81; */\n        if (message.devastate !== false)\n            writer.tag(81, WireType.Varint).bool(message.devastate);\n        /* int32 critical_block = 82; */\n        if (message.criticalBlock !== 0)\n            writer.tag(82, WireType.Varint).int32(message.criticalBlock);\n        /* int32 sword_and_board = 83; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(83, WireType.Varint).int32(message.swordAndBoard);\n        /* int32 damage_shield = 84; */\n        if (message.damageShield !== 0)\n            writer.tag(84, WireType.Varint).int32(message.damageShield);\n        /* bool shockwave = 85; */\n        if (message.shockwave !== false)\n            writer.tag(85, WireType.Varint).bool(message.shockwave);\n        /* int32 improved_sunder_armor = 86; */\n        if (message.improvedSunderArmor !== 0)\n            writer.tag(86, WireType.Varint).int32(message.improvedSunderArmor);\n        /* int32 improved_shield_wall = 87; */\n        if (message.improvedShieldWall !== 0)\n            writer.tag(87, WireType.Varint).int32(message.improvedShieldWall);\n        /* bool improved_shield_block = 88; */\n        if (message.improvedShieldBlock !== false)\n            writer.tag(88, WireType.Varint).bool(message.improvedShieldBlock);\n        /* int32 defiance = 89; */\n        if (message.defiance !== 0)\n            writer.tag(89, WireType.Varint).int32(message.defiance);\n        /* bool shield_slam = 90; */\n        if (message.shieldSlam !== false)\n            writer.tag(90, WireType.Varint).bool(message.shieldSlam);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior$Type extends MessageType<Warrior> {\n    constructor() {\n        super(\"proto.Warrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior>): Warrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior): Warrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warrior.Rotation rotation */ 1:\n                    message.rotation = Warrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warrior.Options options */ 3:\n                    message.options = Warrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warrior.Rotation rotation = 1; */\n        if (message.rotation)\n            Warrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior.Options options = 3; */\n        if (message.options)\n            Warrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior\n */\nexport const Warrior = new Warrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Rotation$Type extends MessageType<Warrior_Rotation> {\n    constructor() {\n        super(\"proto.Warrior.Rotation\", [\n            { no: 1, name: \"use_cleave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_rend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"use_ms\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_slam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"prioritize_ww\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"sunderArmor\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.SunderArmor\", Warrior_Rotation_SunderArmor] },\n            { no: 6, name: \"maintain_demo_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"maintain_thunder_clap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"ms_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"rend_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"rend_cd_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"use_hs_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"use_bt_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"spam_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"use_ww_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"use_slam_over_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Rotation>): Warrior_Rotation {\n        const message = { useCleave: false, useRend: false, useMs: false, useSlam: false, prioritizeWw: false, sunderArmor: 0, maintainDemoShout: false, maintainThunderClap: false, hsRageThreshold: 0, msRageThreshold: 0, rendRageThreshold: 0, rendCdThreshold: 0, useHsDuringExecute: false, useBtDuringExecute: false, spamExecute: false, useWwDuringExecute: false, useSlamOverExecute: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Rotation): Warrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_cleave */ 1:\n                    message.useCleave = reader.bool();\n                    break;\n                case /* bool use_rend */ 2:\n                    message.useRend = reader.bool();\n                    break;\n                case /* bool use_ms */ 18:\n                    message.useMs = reader.bool();\n                    break;\n                case /* bool use_slam */ 3:\n                    message.useSlam = reader.bool();\n                    break;\n                case /* bool prioritize_ww */ 4:\n                    message.prioritizeWw = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.SunderArmor sunderArmor */ 5:\n                    message.sunderArmor = reader.int32();\n                    break;\n                case /* bool maintain_demo_shout */ 6:\n                    message.maintainDemoShout = reader.bool();\n                    break;\n                case /* bool maintain_thunder_clap */ 7:\n                    message.maintainThunderClap = reader.bool();\n                    break;\n                case /* double hs_rage_threshold */ 8:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* double ms_rage_threshold */ 9:\n                    message.msRageThreshold = reader.double();\n                    break;\n                case /* double rend_rage_threshold */ 10:\n                    message.rendRageThreshold = reader.double();\n                    break;\n                case /* double rend_cd_threshold */ 11:\n                    message.rendCdThreshold = reader.double();\n                    break;\n                case /* bool use_hs_during_execute */ 12:\n                    message.useHsDuringExecute = reader.bool();\n                    break;\n                case /* bool use_bt_during_execute */ 13:\n                    message.useBtDuringExecute = reader.bool();\n                    break;\n                case /* bool spam_execute */ 14:\n                    message.spamExecute = reader.bool();\n                    break;\n                case /* bool use_ww_during_execute */ 15:\n                    message.useWwDuringExecute = reader.bool();\n                    break;\n                case /* bool use_slam_over_execute */ 16:\n                    message.useSlamOverExecute = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_cleave = 1; */\n        if (message.useCleave !== false)\n            writer.tag(1, WireType.Varint).bool(message.useCleave);\n        /* bool use_rend = 2; */\n        if (message.useRend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRend);\n        /* bool use_ms = 18; */\n        if (message.useMs !== false)\n            writer.tag(18, WireType.Varint).bool(message.useMs);\n        /* bool use_slam = 3; */\n        if (message.useSlam !== false)\n            writer.tag(3, WireType.Varint).bool(message.useSlam);\n        /* bool prioritize_ww = 4; */\n        if (message.prioritizeWw !== false)\n            writer.tag(4, WireType.Varint).bool(message.prioritizeWw);\n        /* proto.Warrior.Rotation.SunderArmor sunderArmor = 5; */\n        if (message.sunderArmor !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sunderArmor);\n        /* bool maintain_demo_shout = 6; */\n        if (message.maintainDemoShout !== false)\n            writer.tag(6, WireType.Varint).bool(message.maintainDemoShout);\n        /* bool maintain_thunder_clap = 7; */\n        if (message.maintainThunderClap !== false)\n            writer.tag(7, WireType.Varint).bool(message.maintainThunderClap);\n        /* double hs_rage_threshold = 8; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.hsRageThreshold);\n        /* double ms_rage_threshold = 9; */\n        if (message.msRageThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.msRageThreshold);\n        /* double rend_rage_threshold = 10; */\n        if (message.rendRageThreshold !== 0)\n            writer.tag(10, WireType.Bit64).double(message.rendRageThreshold);\n        /* double rend_cd_threshold = 11; */\n        if (message.rendCdThreshold !== 0)\n            writer.tag(11, WireType.Bit64).double(message.rendCdThreshold);\n        /* bool use_hs_during_execute = 12; */\n        if (message.useHsDuringExecute !== false)\n            writer.tag(12, WireType.Varint).bool(message.useHsDuringExecute);\n        /* bool use_bt_during_execute = 13; */\n        if (message.useBtDuringExecute !== false)\n            writer.tag(13, WireType.Varint).bool(message.useBtDuringExecute);\n        /* bool spam_execute = 14; */\n        if (message.spamExecute !== false)\n            writer.tag(14, WireType.Varint).bool(message.spamExecute);\n        /* bool use_ww_during_execute = 15; */\n        if (message.useWwDuringExecute !== false)\n            writer.tag(15, WireType.Varint).bool(message.useWwDuringExecute);\n        /* bool use_slam_over_execute = 16; */\n        if (message.useSlamOverExecute !== false)\n            writer.tag(16, WireType.Varint).bool(message.useSlamOverExecute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Rotation\n */\nexport const Warrior_Rotation = new Warrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Options$Type extends MessageType<Warrior_Options> {\n    constructor() {\n        super(\"proto.Warrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Options>): Warrior_Options {\n        const message = { startingRage: 0, useRecklessness: false, shout: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Options): Warrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* proto.WarriorShout shout */ 3:\n                    message.shout = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* proto.WarriorShout shout = 3; */\n        if (message.shout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.shout);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Options\n */\nexport const Warrior_Options = new Warrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionWarrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation rotation */ 1:\n                    message.rotation = ProtectionWarrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionWarrior.Options options */ 3:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionWarrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior.Options options = 3; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", [\n            { no: 1, name: \"demo_shout\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.DemoShout\", ProtectionWarrior_Rotation_DemoShout] },\n            { no: 2, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.ThunderClap\", ProtectionWarrior_Rotation_ThunderClap] },\n            { no: 5, name: \"use_shield_block\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_cleave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"hs_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = { demoShout: 0, thunderClap: 0, useShieldBlock: false, useCleave: false, hsRageThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation.DemoShout demo_shout */ 1:\n                    message.demoShout = reader.int32();\n                    break;\n                case /* proto.ProtectionWarrior.Rotation.ThunderClap thunder_clap */ 2:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* bool use_shield_block */ 5:\n                    message.useShieldBlock = reader.bool();\n                    break;\n                case /* bool use_cleave */ 4:\n                    message.useCleave = reader.bool();\n                    break;\n                case /* int32 hs_rage_threshold */ 3:\n                    message.hsRageThreshold = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation.DemoShout demo_shout = 1; */\n        if (message.demoShout !== 0)\n            writer.tag(1, WireType.Varint).int32(message.demoShout);\n        /* proto.ProtectionWarrior.Rotation.ThunderClap thunder_clap = 2; */\n        if (message.thunderClap !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderClap);\n        /* bool use_shield_block = 5; */\n        if (message.useShieldBlock !== false)\n            writer.tag(5, WireType.Varint).bool(message.useShieldBlock);\n        /* bool use_cleave = 4; */\n        if (message.useCleave !== false)\n            writer.tag(4, WireType.Varint).bool(message.useCleave);\n        /* int32 hs_rage_threshold = 3; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(3, WireType.Varint).int32(message.hsRageThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"use_shield_wall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 5, name: \"precast_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"precast_shout_t2\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"precast_shout_sapphire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = { startingRage: 0, useShieldWall: false, shout: 0, precastShout: false, precastShoutT2: false, precastShoutSapphire: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* bool use_shield_wall */ 8:\n                    message.useShieldWall = reader.bool();\n                    break;\n                case /* proto.WarriorShout shout */ 4:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool precast_shout */ 5:\n                    message.precastShout = reader.bool();\n                    break;\n                case /* bool precast_shout_t2 */ 6:\n                    message.precastShoutT2 = reader.bool();\n                    break;\n                case /* bool precast_shout_sapphire */ 7:\n                    message.precastShoutSapphire = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* bool use_shield_wall = 8; */\n        if (message.useShieldWall !== false)\n            writer.tag(8, WireType.Varint).bool(message.useShieldWall);\n        /* proto.WarriorShout shout = 4; */\n        if (message.shout !== 0)\n            writer.tag(4, WireType.Varint).int32(message.shout);\n        /* bool precast_shout = 5; */\n        if (message.precastShout !== false)\n            writer.tag(5, WireType.Varint).bool(message.precastShout);\n        /* bool precast_shout_t2 = 6; */\n        if (message.precastShoutT2 !== false)\n            writer.tag(6, WireType.Varint).bool(message.precastShoutT2);\n        /* bool precast_shout_sapphire = 7; */\n        if (message.precastShoutSapphire !== false)\n            writer.tag(7, WireType.Varint).bool(message.precastShoutSapphire);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 improved_curse_of_agony = 1;\n     */\n    improvedCurseOfAgony: number;\n    /**\n     * @generated from protobuf field: int32 suppression = 2;\n     */\n    suppression: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 improved_curse_of_weakness = 4;\n     */\n    improvedCurseOfWeakness: number;\n    /**\n     * @generated from protobuf field: int32 improved_drain_soul = 5;\n     */\n    improvedDrainSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 6;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 7;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 fel_concentration = 9;\n     */\n    felConcentration: number;\n    /**\n     * @generated from protobuf field: bool amplify_curse = 10;\n     */\n    amplifyCurse: boolean;\n    /**\n     * @generated from protobuf field: int32 grim_reach = 11;\n     */\n    grimReach: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 12;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: int32 empowered_corruption = 13;\n     */\n    empoweredCorruption: number;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 14;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: bool siphon_life = 15;\n     */\n    siphonLife: boolean;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 16;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_felhunter = 17;\n     */\n    improvedFelhunter: number;\n    /**\n     * @generated from protobuf field: int32 shadow_mastery = 18;\n     */\n    shadowMastery: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 19;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 contagion = 20;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: bool dark_pact = 21;\n     */\n    darkPact: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 22;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: int32 malediction = 23;\n     */\n    malediction: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 24;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: bool unstable_affliction = 25;\n     */\n    unstableAffliction: boolean;\n    /**\n     * @generated from protobuf field: bool pandemic = 26;\n     */\n    pandemic: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 27;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: bool haunt = 28;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 improved_healthstone = 29;\n     */\n    improvedHealthstone: number;\n    /**\n     * @generated from protobuf field: int32 improved_imp = 30;\n     */\n    improvedImp: number;\n    /**\n     * @generated from protobuf field: int32 demonic_embrace = 31;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 32;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 33;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 demonic_brutality = 34;\n     */\n    demonicBrutality: number;\n    /**\n     * @generated from protobuf field: int32 fel_vitality = 35;\n     */\n    felVitality: number;\n    /**\n     * @generated from protobuf field: int32 improved_sayaad = 36;\n     */\n    improvedSayaad: number;\n    /**\n     * @generated from protobuf field: bool soul_link = 37;\n     */\n    soulLink: boolean;\n    /**\n     * @generated from protobuf field: bool fel_domination = 38;\n     */\n    felDomination: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 39;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 unholy_power = 40;\n     */\n    unholyPower: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 41;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: bool mana_feed = 42;\n     */\n    manaFeed: boolean;\n    /**\n     * @generated from protobuf field: int32 master_conjuror = 43;\n     */\n    masterConjuror: number;\n    /**\n     * @generated from protobuf field: int32 master_demonologist = 44;\n     */\n    masterDemonologist: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 45;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: int32 demonic_resilience = 46;\n     */\n    demonicResilience: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 47;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_knowledge = 48;\n     */\n    demonicKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 demonic_tactics = 49;\n     */\n    demonicTactics: number;\n    /**\n     * @generated from protobuf field: int32 decimation = 50;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 improved_demonic_tactics = 51;\n     */\n    improvedDemonicTactics: number;\n    /**\n     * @generated from protobuf field: bool summon_felguard = 52;\n     */\n    summonFelguard: boolean;\n    /**\n     * @generated from protobuf field: int32 nemesis = 53;\n     */\n    nemesis: number;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 54;\n     */\n    demonicPact: number;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 55;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 improved_shadow_bolt = 56;\n     */\n    improvedShadowBolt: number;\n    /**\n     * @generated from protobuf field: int32 bane = 57;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 58;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 molten_skin = 59;\n     */\n    moltenSkin: number;\n    /**\n     * @generated from protobuf field: int32 cataclysm = 60;\n     */\n    cataclysm: number;\n    /**\n     * @generated from protobuf field: int32 demonic_power = 61;\n     */\n    demonicPower: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 62;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 ruin = 63;\n     */\n    ruin: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 64;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: int32 destructive_reach = 65;\n     */\n    destructiveReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 66;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 67;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 68;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: bool devastation = 69;\n     */\n    devastation: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 70;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 71;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: bool conflagrate = 72;\n     */\n    conflagrate: boolean;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 73;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 pyroclasm = 74;\n     */\n    pyroclasm: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 75;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_leech = 76;\n     */\n    improvedSoulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 77;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 78;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 79;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 80;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 81;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.Warlock\n */\nexport interface Warlock {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation rotation = 1;\n     */\n    rotation?: Warlock_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarlockTalents talents = 2;\n     */\n    talents?: WarlockTalents;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options options = 3;\n     */\n    options?: Warlock_Options;\n}\n/**\n * @generated from protobuf message proto.Warlock.Rotation\n */\nexport interface Warlock_Rotation {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Preset preset = 1;\n     */\n    preset: Warlock_Rotation_Preset;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Curse curse = 2;\n     */\n    curse: Warlock_Rotation_Curse;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.PrimarySpell primary_spell = 3;\n     */\n    primarySpell: Warlock_Rotation_PrimarySpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SecondaryDot secondary_dot = 4;\n     */\n    secondaryDot: Warlock_Rotation_SecondaryDot;\n    /**\n     * @generated from protobuf field: bool corruption = 5;\n     */\n    corruption: boolean;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 6;\n     */\n    detonateSeed: boolean;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SpecSpell spec_spell = 7;\n     */\n    specSpell: Warlock_Rotation_SpecSpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Type type = 8;\n     */\n    type: Warlock_Rotation_Type;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Preset\n */\nexport enum Warlock_Rotation_Preset {\n    /**\n     * @generated from protobuf enum value: Manual = 0;\n     */\n    Manual = 0,\n    /**\n     * @generated from protobuf enum value: Automatic = 1;\n     */\n    Automatic = 1\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Type\n */\nexport enum Warlock_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Affliction = 0;\n     */\n    Affliction = 0,\n    /**\n     * @generated from protobuf enum value: Demonology = 1;\n     */\n    Demonology = 1,\n    /**\n     * @generated from protobuf enum value: Destruction = 2;\n     */\n    Destruction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.PrimarySpell\n */\nexport enum Warlock_Rotation_PrimarySpell {\n    /**\n     * @generated from protobuf enum value: UnknownSpell = 0;\n     */\n    UnknownSpell = 0,\n    /**\n     * @generated from protobuf enum value: ShadowBolt = 1;\n     */\n    ShadowBolt = 1,\n    /**\n     * @generated from protobuf enum value: Incinerate = 2;\n     */\n    Incinerate = 2,\n    /**\n     * @generated from protobuf enum value: Seed = 3;\n     */\n    Seed = 3\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Curse\n */\nexport enum Warlock_Rotation_Curse {\n    /**\n     * @generated from protobuf enum value: NoCurse = 0;\n     */\n    NoCurse = 0,\n    /**\n     * @generated from protobuf enum value: Elements = 1;\n     */\n    Elements = 1,\n    /**\n     * @generated from protobuf enum value: Weakness = 2;\n     */\n    Weakness = 2,\n    /**\n     * @generated from protobuf enum value: Doom = 3;\n     */\n    Doom = 3,\n    /**\n     * @generated from protobuf enum value: Agony = 4;\n     */\n    Agony = 4,\n    /**\n     * @generated from protobuf enum value: Tongues = 5;\n     */\n    Tongues = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SecondaryDot\n */\nexport enum Warlock_Rotation_SecondaryDot {\n    /**\n     * @generated from protobuf enum value: NoSecondaryDot = 0;\n     */\n    NoSecondaryDot = 0,\n    /**\n     * @generated from protobuf enum value: Immolate = 1;\n     */\n    Immolate = 1,\n    /**\n     * @generated from protobuf enum value: UnstableAffliction = 2;\n     */\n    UnstableAffliction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SpecSpell\n */\nexport enum Warlock_Rotation_SpecSpell {\n    /**\n     * @generated from protobuf enum value: NoSpecSpell = 0;\n     */\n    NoSpecSpell = 0,\n    /**\n     * @generated from protobuf enum value: ChaosBolt = 1;\n     */\n    ChaosBolt = 1,\n    /**\n     * @generated from protobuf enum value: Haunt = 2;\n     */\n    Haunt = 2\n}\n/**\n * @generated from protobuf message proto.Warlock.Options\n */\nexport interface Warlock_Options {\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Armor armor = 1;\n     */\n    armor: Warlock_Options_Armor;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Summon summon = 2;\n     */\n    summon: Warlock_Options_Summon;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.WeaponImbue weaponImbue = 3;\n     */\n    weaponImbue: Warlock_Options_WeaponImbue;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Summon\n */\nexport enum Warlock_Options_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Armor\n */\nexport enum Warlock_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: FelArmor = 1;\n     */\n    FelArmor = 1,\n    /**\n     * @generated from protobuf enum value: DemonArmor = 2;\n     */\n    DemonArmor = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.WeaponImbue\n */\nexport enum Warlock_Options_WeaponImbue {\n    /**\n     * @generated from protobuf enum value: NoWeaponImbue = 0;\n     */\n    NoWeaponImbue = 0,\n    /**\n     * @generated from protobuf enum value: GrandSpellstone = 1;\n     */\n    GrandSpellstone = 1,\n    /**\n     * @generated from protobuf enum value: GrandFirestone = 2;\n     */\n    GrandFirestone = 2\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfAgony = 42456;\n     */\n    GlyphOfCurseOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 42457;\n     */\n    GlyphOfDeathCoil = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfQuickDecay = 50077;\n     */\n    GlyphOfQuickDecay = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfSearingPain = 42466;\n     */\n    GlyphOfSearingPain = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSiphonLife = 42469;\n     */\n    GlyphOfSiphonLife = 42469,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfSuccubus = 42471;\n     */\n    GlyphOfSuccubus = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhausion = 43392;\n     */\n    GlyphOfCurseOfExhausion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnslaveDemon = 43393;\n     */\n    GlyphOfEnslaveDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfKilrogg = 43391;\n     */\n    GlyphOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfSouls = 43394;\n     */\n    GlyphOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"improved_curse_of_agony\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_curse_of_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_drain_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fel_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"amplify_curse\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"grim_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"empowered_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"siphon_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_felhunter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"shadow_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"dark_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"malediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"unstable_affliction\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"pandemic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_healthstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"demonic_brutality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"fel_vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_sayaad\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"soul_link\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"fel_domination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"unholy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"mana_feed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"master_conjuror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"master_demonologist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"demonic_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"demonic_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"improved_demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"summon_felguard\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nemesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_shadow_bolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"molten_skin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"cataclysm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"demonic_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ruin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"destructive_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"devastation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"conflagrate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"pyroclasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { improvedCurseOfAgony: 0, suppression: 0, improvedCorruption: 0, improvedCurseOfWeakness: 0, improvedDrainSoul: 0, improvedLifeTap: 0, soulSiphon: 0, improvedFear: 0, felConcentration: 0, amplifyCurse: false, grimReach: 0, nightfall: 0, empoweredCorruption: 0, shadowEmbrace: 0, siphonLife: false, curseOfExhaustion: false, improvedFelhunter: 0, shadowMastery: 0, eradication: 0, contagion: 0, darkPact: false, improvedHowlOfTerror: 0, malediction: 0, deathsEmbrace: 0, unstableAffliction: false, pandemic: false, everlastingAffliction: 0, haunt: false, improvedHealthstone: 0, improvedImp: 0, demonicEmbrace: 0, felSynergy: 0, improvedHealthFunnel: 0, demonicBrutality: 0, felVitality: 0, improvedSayaad: 0, soulLink: false, felDomination: false, demonicAegis: 0, unholyPower: 0, masterSummoner: 0, manaFeed: false, masterConjuror: 0, masterDemonologist: 0, moltenCore: 0, demonicResilience: 0, demonicEmpowerment: false, demonicKnowledge: 0, demonicTactics: 0, decimation: 0, improvedDemonicTactics: 0, summonFelguard: false, nemesis: 0, demonicPact: 0, metamorphosis: false, improvedShadowBolt: 0, bane: 0, aftermath: 0, moltenSkin: 0, cataclysm: 0, demonicPower: 0, shadowburn: false, ruin: 0, intensity: 0, destructiveReach: 0, improvedSearingPain: 0, backlash: 0, improvedImmolate: 0, devastation: false, netherProtection: 0, emberstorm: 0, conflagrate: false, soulLeech: 0, pyroclasm: 0, shadowAndFlame: 0, improvedSoulLeech: 0, backdraft: 0, shadowfury: false, empoweredImp: 0, fireAndBrimstone: 0, chaosBolt: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_curse_of_agony */ 1:\n                    message.improvedCurseOfAgony = reader.int32();\n                    break;\n                case /* int32 suppression */ 2:\n                    message.suppression = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 improved_curse_of_weakness */ 4:\n                    message.improvedCurseOfWeakness = reader.int32();\n                    break;\n                case /* int32 improved_drain_soul */ 5:\n                    message.improvedDrainSoul = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 6:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 7:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 fel_concentration */ 9:\n                    message.felConcentration = reader.int32();\n                    break;\n                case /* bool amplify_curse */ 10:\n                    message.amplifyCurse = reader.bool();\n                    break;\n                case /* int32 grim_reach */ 11:\n                    message.grimReach = reader.int32();\n                    break;\n                case /* int32 nightfall */ 12:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* int32 empowered_corruption */ 13:\n                    message.empoweredCorruption = reader.int32();\n                    break;\n                case /* int32 shadow_embrace */ 14:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* bool siphon_life */ 15:\n                    message.siphonLife = reader.bool();\n                    break;\n                case /* bool curse_of_exhaustion */ 16:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_felhunter */ 17:\n                    message.improvedFelhunter = reader.int32();\n                    break;\n                case /* int32 shadow_mastery */ 18:\n                    message.shadowMastery = reader.int32();\n                    break;\n                case /* int32 eradication */ 19:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 contagion */ 20:\n                    message.contagion = reader.int32();\n                    break;\n                case /* bool dark_pact */ 21:\n                    message.darkPact = reader.bool();\n                    break;\n                case /* int32 improved_howl_of_terror */ 22:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* int32 malediction */ 23:\n                    message.malediction = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 24:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* bool unstable_affliction */ 25:\n                    message.unstableAffliction = reader.bool();\n                    break;\n                case /* bool pandemic */ 26:\n                    message.pandemic = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 27:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* bool haunt */ 28:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 improved_healthstone */ 29:\n                    message.improvedHealthstone = reader.int32();\n                    break;\n                case /* int32 improved_imp */ 30:\n                    message.improvedImp = reader.int32();\n                    break;\n                case /* int32 demonic_embrace */ 31:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 32:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 improved_health_funnel */ 33:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 demonic_brutality */ 34:\n                    message.demonicBrutality = reader.int32();\n                    break;\n                case /* int32 fel_vitality */ 35:\n                    message.felVitality = reader.int32();\n                    break;\n                case /* int32 improved_sayaad */ 36:\n                    message.improvedSayaad = reader.int32();\n                    break;\n                case /* bool soul_link */ 37:\n                    message.soulLink = reader.bool();\n                    break;\n                case /* bool fel_domination */ 38:\n                    message.felDomination = reader.bool();\n                    break;\n                case /* int32 demonic_aegis */ 39:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 unholy_power */ 40:\n                    message.unholyPower = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 41:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* bool mana_feed */ 42:\n                    message.manaFeed = reader.bool();\n                    break;\n                case /* int32 master_conjuror */ 43:\n                    message.masterConjuror = reader.int32();\n                    break;\n                case /* int32 master_demonologist */ 44:\n                    message.masterDemonologist = reader.int32();\n                    break;\n                case /* int32 molten_core */ 45:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* int32 demonic_resilience */ 46:\n                    message.demonicResilience = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 47:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 demonic_knowledge */ 48:\n                    message.demonicKnowledge = reader.int32();\n                    break;\n                case /* int32 demonic_tactics */ 49:\n                    message.demonicTactics = reader.int32();\n                    break;\n                case /* int32 decimation */ 50:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 improved_demonic_tactics */ 51:\n                    message.improvedDemonicTactics = reader.int32();\n                    break;\n                case /* bool summon_felguard */ 52:\n                    message.summonFelguard = reader.bool();\n                    break;\n                case /* int32 nemesis */ 53:\n                    message.nemesis = reader.int32();\n                    break;\n                case /* int32 demonic_pact */ 54:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool metamorphosis */ 55:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 improved_shadow_bolt */ 56:\n                    message.improvedShadowBolt = reader.int32();\n                    break;\n                case /* int32 bane */ 57:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 aftermath */ 58:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 molten_skin */ 59:\n                    message.moltenSkin = reader.int32();\n                    break;\n                case /* int32 cataclysm */ 60:\n                    message.cataclysm = reader.int32();\n                    break;\n                case /* int32 demonic_power */ 61:\n                    message.demonicPower = reader.int32();\n                    break;\n                case /* bool shadowburn */ 62:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 ruin */ 63:\n                    message.ruin = reader.int32();\n                    break;\n                case /* int32 intensity */ 64:\n                    message.intensity = reader.int32();\n                    break;\n                case /* int32 destructive_reach */ 65:\n                    message.destructiveReach = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 66:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 backlash */ 67:\n                    message.backlash = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 68:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* bool devastation */ 69:\n                    message.devastation = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 70:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 71:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* bool conflagrate */ 72:\n                    message.conflagrate = reader.bool();\n                    break;\n                case /* int32 soul_leech */ 73:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 pyroclasm */ 74:\n                    message.pyroclasm = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 75:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_soul_leech */ 76:\n                    message.improvedSoulLeech = reader.int32();\n                    break;\n                case /* int32 backdraft */ 77:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowfury */ 78:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 empowered_imp */ 79:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* int32 fire_and_brimstone */ 80:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool chaos_bolt */ 81:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_curse_of_agony = 1; */\n        if (message.improvedCurseOfAgony !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedCurseOfAgony);\n        /* int32 suppression = 2; */\n        if (message.suppression !== 0)\n            writer.tag(2, WireType.Varint).int32(message.suppression);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 improved_curse_of_weakness = 4; */\n        if (message.improvedCurseOfWeakness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCurseOfWeakness);\n        /* int32 improved_drain_soul = 5; */\n        if (message.improvedDrainSoul !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedDrainSoul);\n        /* int32 improved_life_tap = 6; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 soul_siphon = 7; */\n        if (message.soulSiphon !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulSiphon);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 fel_concentration = 9; */\n        if (message.felConcentration !== 0)\n            writer.tag(9, WireType.Varint).int32(message.felConcentration);\n        /* bool amplify_curse = 10; */\n        if (message.amplifyCurse !== false)\n            writer.tag(10, WireType.Varint).bool(message.amplifyCurse);\n        /* int32 grim_reach = 11; */\n        if (message.grimReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.grimReach);\n        /* int32 nightfall = 12; */\n        if (message.nightfall !== 0)\n            writer.tag(12, WireType.Varint).int32(message.nightfall);\n        /* int32 empowered_corruption = 13; */\n        if (message.empoweredCorruption !== 0)\n            writer.tag(13, WireType.Varint).int32(message.empoweredCorruption);\n        /* int32 shadow_embrace = 14; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(14, WireType.Varint).int32(message.shadowEmbrace);\n        /* bool siphon_life = 15; */\n        if (message.siphonLife !== false)\n            writer.tag(15, WireType.Varint).bool(message.siphonLife);\n        /* bool curse_of_exhaustion = 16; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(16, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_felhunter = 17; */\n        if (message.improvedFelhunter !== 0)\n            writer.tag(17, WireType.Varint).int32(message.improvedFelhunter);\n        /* int32 shadow_mastery = 18; */\n        if (message.shadowMastery !== 0)\n            writer.tag(18, WireType.Varint).int32(message.shadowMastery);\n        /* int32 eradication = 19; */\n        if (message.eradication !== 0)\n            writer.tag(19, WireType.Varint).int32(message.eradication);\n        /* int32 contagion = 20; */\n        if (message.contagion !== 0)\n            writer.tag(20, WireType.Varint).int32(message.contagion);\n        /* bool dark_pact = 21; */\n        if (message.darkPact !== false)\n            writer.tag(21, WireType.Varint).bool(message.darkPact);\n        /* int32 improved_howl_of_terror = 22; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* int32 malediction = 23; */\n        if (message.malediction !== 0)\n            writer.tag(23, WireType.Varint).int32(message.malediction);\n        /* int32 deaths_embrace = 24; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(24, WireType.Varint).int32(message.deathsEmbrace);\n        /* bool unstable_affliction = 25; */\n        if (message.unstableAffliction !== false)\n            writer.tag(25, WireType.Varint).bool(message.unstableAffliction);\n        /* bool pandemic = 26; */\n        if (message.pandemic !== false)\n            writer.tag(26, WireType.Varint).bool(message.pandemic);\n        /* int32 everlasting_affliction = 27; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(27, WireType.Varint).int32(message.everlastingAffliction);\n        /* bool haunt = 28; */\n        if (message.haunt !== false)\n            writer.tag(28, WireType.Varint).bool(message.haunt);\n        /* int32 improved_healthstone = 29; */\n        if (message.improvedHealthstone !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedHealthstone);\n        /* int32 improved_imp = 30; */\n        if (message.improvedImp !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedImp);\n        /* int32 demonic_embrace = 31; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(31, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 fel_synergy = 32; */\n        if (message.felSynergy !== 0)\n            writer.tag(32, WireType.Varint).int32(message.felSynergy);\n        /* int32 improved_health_funnel = 33; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 demonic_brutality = 34; */\n        if (message.demonicBrutality !== 0)\n            writer.tag(34, WireType.Varint).int32(message.demonicBrutality);\n        /* int32 fel_vitality = 35; */\n        if (message.felVitality !== 0)\n            writer.tag(35, WireType.Varint).int32(message.felVitality);\n        /* int32 improved_sayaad = 36; */\n        if (message.improvedSayaad !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedSayaad);\n        /* bool soul_link = 37; */\n        if (message.soulLink !== false)\n            writer.tag(37, WireType.Varint).bool(message.soulLink);\n        /* bool fel_domination = 38; */\n        if (message.felDomination !== false)\n            writer.tag(38, WireType.Varint).bool(message.felDomination);\n        /* int32 demonic_aegis = 39; */\n        if (message.demonicAegis !== 0)\n            writer.tag(39, WireType.Varint).int32(message.demonicAegis);\n        /* int32 unholy_power = 40; */\n        if (message.unholyPower !== 0)\n            writer.tag(40, WireType.Varint).int32(message.unholyPower);\n        /* int32 master_summoner = 41; */\n        if (message.masterSummoner !== 0)\n            writer.tag(41, WireType.Varint).int32(message.masterSummoner);\n        /* bool mana_feed = 42; */\n        if (message.manaFeed !== false)\n            writer.tag(42, WireType.Varint).bool(message.manaFeed);\n        /* int32 master_conjuror = 43; */\n        if (message.masterConjuror !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterConjuror);\n        /* int32 master_demonologist = 44; */\n        if (message.masterDemonologist !== 0)\n            writer.tag(44, WireType.Varint).int32(message.masterDemonologist);\n        /* int32 molten_core = 45; */\n        if (message.moltenCore !== 0)\n            writer.tag(45, WireType.Varint).int32(message.moltenCore);\n        /* int32 demonic_resilience = 46; */\n        if (message.demonicResilience !== 0)\n            writer.tag(46, WireType.Varint).int32(message.demonicResilience);\n        /* bool demonic_empowerment = 47; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(47, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 demonic_knowledge = 48; */\n        if (message.demonicKnowledge !== 0)\n            writer.tag(48, WireType.Varint).int32(message.demonicKnowledge);\n        /* int32 demonic_tactics = 49; */\n        if (message.demonicTactics !== 0)\n            writer.tag(49, WireType.Varint).int32(message.demonicTactics);\n        /* int32 decimation = 50; */\n        if (message.decimation !== 0)\n            writer.tag(50, WireType.Varint).int32(message.decimation);\n        /* int32 improved_demonic_tactics = 51; */\n        if (message.improvedDemonicTactics !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedDemonicTactics);\n        /* bool summon_felguard = 52; */\n        if (message.summonFelguard !== false)\n            writer.tag(52, WireType.Varint).bool(message.summonFelguard);\n        /* int32 nemesis = 53; */\n        if (message.nemesis !== 0)\n            writer.tag(53, WireType.Varint).int32(message.nemesis);\n        /* int32 demonic_pact = 54; */\n        if (message.demonicPact !== 0)\n            writer.tag(54, WireType.Varint).int32(message.demonicPact);\n        /* bool metamorphosis = 55; */\n        if (message.metamorphosis !== false)\n            writer.tag(55, WireType.Varint).bool(message.metamorphosis);\n        /* int32 improved_shadow_bolt = 56; */\n        if (message.improvedShadowBolt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedShadowBolt);\n        /* int32 bane = 57; */\n        if (message.bane !== 0)\n            writer.tag(57, WireType.Varint).int32(message.bane);\n        /* int32 aftermath = 58; */\n        if (message.aftermath !== 0)\n            writer.tag(58, WireType.Varint).int32(message.aftermath);\n        /* int32 molten_skin = 59; */\n        if (message.moltenSkin !== 0)\n            writer.tag(59, WireType.Varint).int32(message.moltenSkin);\n        /* int32 cataclysm = 60; */\n        if (message.cataclysm !== 0)\n            writer.tag(60, WireType.Varint).int32(message.cataclysm);\n        /* int32 demonic_power = 61; */\n        if (message.demonicPower !== 0)\n            writer.tag(61, WireType.Varint).int32(message.demonicPower);\n        /* bool shadowburn = 62; */\n        if (message.shadowburn !== false)\n            writer.tag(62, WireType.Varint).bool(message.shadowburn);\n        /* int32 ruin = 63; */\n        if (message.ruin !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ruin);\n        /* int32 intensity = 64; */\n        if (message.intensity !== 0)\n            writer.tag(64, WireType.Varint).int32(message.intensity);\n        /* int32 destructive_reach = 65; */\n        if (message.destructiveReach !== 0)\n            writer.tag(65, WireType.Varint).int32(message.destructiveReach);\n        /* int32 improved_searing_pain = 66; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(66, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 backlash = 67; */\n        if (message.backlash !== 0)\n            writer.tag(67, WireType.Varint).int32(message.backlash);\n        /* int32 improved_immolate = 68; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedImmolate);\n        /* bool devastation = 69; */\n        if (message.devastation !== false)\n            writer.tag(69, WireType.Varint).bool(message.devastation);\n        /* int32 nether_protection = 70; */\n        if (message.netherProtection !== 0)\n            writer.tag(70, WireType.Varint).int32(message.netherProtection);\n        /* int32 emberstorm = 71; */\n        if (message.emberstorm !== 0)\n            writer.tag(71, WireType.Varint).int32(message.emberstorm);\n        /* bool conflagrate = 72; */\n        if (message.conflagrate !== false)\n            writer.tag(72, WireType.Varint).bool(message.conflagrate);\n        /* int32 soul_leech = 73; */\n        if (message.soulLeech !== 0)\n            writer.tag(73, WireType.Varint).int32(message.soulLeech);\n        /* int32 pyroclasm = 74; */\n        if (message.pyroclasm !== 0)\n            writer.tag(74, WireType.Varint).int32(message.pyroclasm);\n        /* int32 shadow_and_flame = 75; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_soul_leech = 76; */\n        if (message.improvedSoulLeech !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedSoulLeech);\n        /* int32 backdraft = 77; */\n        if (message.backdraft !== 0)\n            writer.tag(77, WireType.Varint).int32(message.backdraft);\n        /* bool shadowfury = 78; */\n        if (message.shadowfury !== false)\n            writer.tag(78, WireType.Varint).bool(message.shadowfury);\n        /* int32 empowered_imp = 79; */\n        if (message.empoweredImp !== 0)\n            writer.tag(79, WireType.Varint).int32(message.empoweredImp);\n        /* int32 fire_and_brimstone = 80; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(80, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool chaos_bolt = 81; */\n        if (message.chaosBolt !== false)\n            writer.tag(81, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock$Type extends MessageType<Warlock> {\n    constructor() {\n        super(\"proto.Warlock\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warlock_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarlockTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock>): Warlock {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock): Warlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation rotation */ 1:\n                    message.rotation = Warlock_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarlockTalents talents */ 2:\n                    message.talents = WarlockTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warlock.Options options */ 3:\n                    message.options = Warlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation rotation = 1; */\n        if (message.rotation)\n            Warlock_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarlockTalents talents = 2; */\n        if (message.talents)\n            WarlockTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock.Options options = 3; */\n        if (message.options)\n            Warlock_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock\n */\nexport const Warlock = new Warlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Rotation$Type extends MessageType<Warlock_Rotation> {\n    constructor() {\n        super(\"proto.Warlock.Rotation\", [\n            { no: 1, name: \"preset\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Preset\", Warlock_Rotation_Preset] },\n            { no: 2, name: \"curse\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Curse\", Warlock_Rotation_Curse] },\n            { no: 3, name: \"primary_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.PrimarySpell\", Warlock_Rotation_PrimarySpell] },\n            { no: 4, name: \"secondary_dot\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SecondaryDot\", Warlock_Rotation_SecondaryDot] },\n            { no: 5, name: \"corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"spec_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SpecSpell\", Warlock_Rotation_SpecSpell] },\n            { no: 8, name: \"type\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Type\", Warlock_Rotation_Type] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Rotation>): Warlock_Rotation {\n        const message = { preset: 0, curse: 0, primarySpell: 0, secondaryDot: 0, corruption: false, detonateSeed: false, specSpell: 0, type: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Rotation): Warlock_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation.Preset preset */ 1:\n                    message.preset = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Curse curse */ 2:\n                    message.curse = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.PrimarySpell primary_spell */ 3:\n                    message.primarySpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.SecondaryDot secondary_dot */ 4:\n                    message.secondaryDot = reader.int32();\n                    break;\n                case /* bool corruption */ 5:\n                    message.corruption = reader.bool();\n                    break;\n                case /* bool detonate_seed */ 6:\n                    message.detonateSeed = reader.bool();\n                    break;\n                case /* proto.Warlock.Rotation.SpecSpell spec_spell */ 7:\n                    message.specSpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Type type */ 8:\n                    message.type = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation.Preset preset = 1; */\n        if (message.preset !== 0)\n            writer.tag(1, WireType.Varint).int32(message.preset);\n        /* proto.Warlock.Rotation.Curse curse = 2; */\n        if (message.curse !== 0)\n            writer.tag(2, WireType.Varint).int32(message.curse);\n        /* proto.Warlock.Rotation.PrimarySpell primary_spell = 3; */\n        if (message.primarySpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primarySpell);\n        /* proto.Warlock.Rotation.SecondaryDot secondary_dot = 4; */\n        if (message.secondaryDot !== 0)\n            writer.tag(4, WireType.Varint).int32(message.secondaryDot);\n        /* bool corruption = 5; */\n        if (message.corruption !== false)\n            writer.tag(5, WireType.Varint).bool(message.corruption);\n        /* bool detonate_seed = 6; */\n        if (message.detonateSeed !== false)\n            writer.tag(6, WireType.Varint).bool(message.detonateSeed);\n        /* proto.Warlock.Rotation.SpecSpell spec_spell = 7; */\n        if (message.specSpell !== 0)\n            writer.tag(7, WireType.Varint).int32(message.specSpell);\n        /* proto.Warlock.Rotation.Type type = 8; */\n        if (message.type !== 0)\n            writer.tag(8, WireType.Varint).int32(message.type);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Rotation\n */\nexport const Warlock_Rotation = new Warlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Options$Type extends MessageType<Warlock_Options> {\n    constructor() {\n        super(\"proto.Warlock.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Armor\", Warlock_Options_Armor] },\n            { no: 2, name: \"summon\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Summon\", Warlock_Options_Summon] },\n            { no: 3, name: \"weaponImbue\", kind: \"enum\", T: () => [\"proto.Warlock.Options.WeaponImbue\", Warlock_Options_WeaponImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Options>): Warlock_Options {\n        const message = { armor: 0, summon: 0, weaponImbue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Options): Warlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Options.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.Summon summon */ 2:\n                    message.summon = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.WeaponImbue weaponImbue */ 3:\n                    message.weaponImbue = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Options.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* proto.Warlock.Options.Summon summon = 2; */\n        if (message.summon !== 0)\n            writer.tag(2, WireType.Varint).int32(message.summon);\n        /* proto.Warlock.Options.WeaponImbue weaponImbue = 3; */\n        if (message.weaponImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.weaponImbue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Options\n */\nexport const Warlock_Options = new Warlock_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 convection = 1;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 2;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 3;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 4;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 5;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 7;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_fury = 8;\n     */\n    elementalFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_nova = 9;\n     */\n    improvedFireNova: number;\n    /**\n     * @generated from protobuf field: int32 eye_of_the_storm = 10;\n     */\n    eyeOfTheStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 11;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: bool call_of_thunder = 12;\n     */\n    callOfThunder: boolean;\n    /**\n     * @generated from protobuf field: int32 unrelenting_storm = 13;\n     */\n    unrelentingStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 14;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 lightning_mastery = 15;\n     */\n    lightningMastery: number;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 16;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 storm_earth_and_fire = 17;\n     */\n    stormEarthAndFire: number;\n    /**\n     * @generated from protobuf field: int32 booming_echoes = 18;\n     */\n    boomingEchoes: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 19;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lightning_overload = 20;\n     */\n    lightningOverload: number;\n    /**\n     * @generated from protobuf field: int32 astral_shift = 21;\n     */\n    astralShift: number;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 22;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 23;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: int32 shamanism = 24;\n     */\n    shamanism: number;\n    /**\n     * @generated from protobuf field: bool thunderstorm = 25;\n     */\n    thunderstorm: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 enhancing_totems = 26;\n     */\n    enhancingTotems: number;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 27;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_knowledge = 28;\n     */\n    ancestralKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 guardian_totems = 29;\n     */\n    guardianTotems: number;\n    /**\n     * @generated from protobuf field: int32 thundering_strikes = 30;\n     */\n    thunderingStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_ghost_wolf = 31;\n     */\n    improvedGhostWolf: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 32;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_weapons = 33;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_focus = 34;\n     */\n    shamanisticFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 anticipation = 35;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 36;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 37;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_windfury_totem = 38;\n     */\n    improvedWindfuryTotem: number;\n    /**\n     * @generated from protobuf field: bool spirit_weapons = 39;\n     */\n    spiritWeapons: boolean;\n    /**\n     * @generated from protobuf field: int32 mental_dexterity = 40;\n     */\n    mentalDexterity: number;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 41;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 42;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 43;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 44;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 45;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool stormstrike = 46;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 47;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: bool lava_lash = 48;\n     */\n    lavaLash: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_stormstrike = 49;\n     */\n    improvedStormstrike: number;\n    /**\n     * @generated from protobuf field: int32 mental_quickness = 50;\n     */\n    mentalQuickness: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 51;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 52;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 53;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 54;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_healing_wave = 55;\n     */\n    improvedHealingWave: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 56;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_reincarnation = 57;\n     */\n    improvedReincarnation: number;\n    /**\n     * @generated from protobuf field: int32 healing_grace = 58;\n     */\n    healingGrace: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 59;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_water_shield = 60;\n     */\n    improvedWaterShield: number;\n    /**\n     * @generated from protobuf field: int32 healing_focus = 61;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: bool tidal_force = 62;\n     */\n    tidalForce: boolean;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 63;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: int32 restorative_totems = 64;\n     */\n    restorativeTotems: number;\n    /**\n     * @generated from protobuf field: int32 tidal_mastery = 65;\n     */\n    tidalMastery: number;\n    /**\n     * @generated from protobuf field: int32 healing_way = 66;\n     */\n    healingWay: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 67;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 68;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 purification = 69;\n     */\n    purification: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 70;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 71;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: bool cleanse_spirit = 72;\n     */\n    cleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 73;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: int32 improved_chain_heal = 74;\n     */\n    improvedChainHeal: number;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 75;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 76;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool earth_shield = 77;\n     */\n    earthShield: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_earth_shield = 78;\n     */\n    improvedEarthShield: number;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 79;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: bool riptide = 80;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use mana tide when appropriate.\n     *\n     * @generated from protobuf field: bool use_mana_tide = 5;\n     */\n    useManaTide: boolean;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 6;\n     */\n    useFireElemental: boolean;\n    /**\n     * If set, will revert to regular fire totems when fire elemental goes OOM,\n     * instead of waiting the full 2 minutes.\n     *\n     * @generated from protobuf field: bool recall_fire_elemental_on_oom = 7;\n     */\n    recallFireElementalOnOom: boolean;\n    /**\n     * If set, any time a 2-minute totem is about to expire, will recall and\n     * replace all totems.\n     *\n     * @generated from protobuf field: bool recall_totems = 8;\n     */\n    recallTotems: boolean;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation rotation = 1;\n     */\n    rotation?: ElementalShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 3;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation.RotationType type = 1;\n     */\n    type: ElementalShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool in_thunderstorm_range = 2;\n     */\n    inThunderstormRange: boolean;\n    /**\n     * These options are used for the manual rotation.\n     *\n     * @generated from protobuf field: bool use_fire_nova = 4;\n     */\n    useFireNova: boolean;\n    /**\n     * @generated from protobuf field: double fn_min_mana_per = 9;\n     */\n    fnMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool use_chain_lightning = 5;\n     */\n    useChainLightning: boolean;\n    /**\n     * @generated from protobuf field: bool use_cl_only_gap = 11;\n     */\n    useClOnlyGap: boolean;\n    /**\n     * @generated from protobuf field: double cl_min_mana_per = 10;\n     */\n    clMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool overwrite_flameshock = 6;\n     */\n    overwriteFlameshock: boolean;\n    /**\n     * @generated from protobuf field: bool always_crit_lvb = 7;\n     */\n    alwaysCritLvb: boolean;\n    /**\n     * @generated from protobuf field: bool use_thunderstorm = 8;\n     */\n    useThunderstorm: boolean;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Rotation.RotationType\n */\nexport enum ElementalShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation rotation = 1;\n     */\n    rotation?: EnhancementShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 1;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.RotationType rotation_type = 2;\n     */\n    rotationType: EnhancementShaman_Rotation_RotationType;\n    /**\n     * weaving options\n     *\n     * @generated from protobuf field: bool lavaburst_weave = 3;\n     */\n    lavaburstWeave: boolean;\n    /**\n     * @generated from protobuf field: bool lightningbolt_weave = 4;\n     */\n    lightningboltWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 maelstromweapon_min_stack = 5;\n     */\n    maelstromweaponMinStack: number;\n    /**\n     * other general rotation config options\n     *\n     * @generated from protobuf field: double firenova_mana_threshold = 6;\n     */\n    firenovaManaThreshold: number;\n    /**\n     * @generated from protobuf field: double shamanistic_rage_mana_threshold = 7;\n     */\n    shamanisticRageManaThreshold: number;\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.RotationType\n */\nexport enum EnhancementShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Priority = 1;\n     */\n    Priority = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * TODO: add spells here for custom rotation (if nessecary?)\n *\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.CustomRotationSpell\n */\nexport enum EnhancementShaman_Rotation_CustomRotationSpell {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Stormstrike = 1;\n     */\n    Stormstrike = 1,\n    /**\n     * find a way to differentiate tooltips for this, lightning bolt weaves, and downranked flametongue\n     *\n     * @generated from protobuf enum value: StormstrikeDebuffMissing = 2;\n     */\n    StormstrikeDebuffMissing = 2,\n    /**\n     * @generated from protobuf enum value: LightningBolt = 3;\n     */\n    LightningBolt = 3,\n    /**\n     * @generated from protobuf enum value: LightningBoltWeave = 4;\n     */\n    LightningBoltWeave = 4,\n    /**\n     * @generated from protobuf enum value: FlameShock = 5;\n     */\n    FlameShock = 5,\n    /**\n     * @generated from protobuf enum value: EarthShock = 6;\n     */\n    EarthShock = 6,\n    /**\n     * @generated from protobuf enum value: LavaLash = 7;\n     */\n    LavaLash = 7,\n    /**\n     * @generated from protobuf enum value: LavaBurst = 8;\n     */\n    LavaBurst = 8,\n    /**\n     * @generated from protobuf enum value: LightningShieldSpell = 9;\n     */\n    LightningShieldSpell = 9,\n    /**\n     * @generated from protobuf enum value: FireNova = 10;\n     */\n    FireNova = 10,\n    /**\n     * fire totems as well maybe?\n     *\n     * @generated from protobuf enum value: ChainLightning = 11;\n     */\n    ChainLightning = 11\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 3;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 5;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLava = 41524;\n     */\n    GlyphOfLava = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserHealingWave = 41535;\n     */\n    GlyphOfLesserHealingWave = 41535,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaTide = 41538;\n     */\n    GlyphOfManaTide = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemOfWrath = 45776;\n     */\n    GlyphOfTotemOfWrath = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterMastery = 41541;\n     */\n    GlyphOfWaterMastery = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 43386;\n     */\n    GlyphOfWaterShield = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: TranquilAirTotem = 1;\n     */\n    TranquilAirTotem = 1,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfWrath = 3;\n     */\n    TotemOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 4;\n     */\n    FlametongueTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueWeaponDownrank = 3;\n     */\n    FlametongueWeaponDownrank = 3,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 4;\n     */\n    FrostbrandWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"elemental_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_fire_nova\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"eye_of_the_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"call_of_thunder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"unrelenting_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lightning_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"storm_earth_and_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"booming_echoes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"lightning_overload\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"astral_shift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"shamanism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"enhancing_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"ancestral_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"guardian_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"thundering_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_ghost_wolf\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_windfury_totem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"spirit_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"mental_dexterity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"lava_lash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_stormstrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mental_quickness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_healing_wave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_reincarnation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"healing_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_water_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"tidal_force\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"restorative_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"tidal_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"healing_way\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"purification\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"improved_chain_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"earth_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"improved_earth_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, elementalDevastation: 0, reverberation: 0, elementalFocus: false, elementalFury: 0, improvedFireNova: 0, eyeOfTheStorm: 0, elementalReach: 0, callOfThunder: false, unrelentingStorm: 0, elementalPrecision: 0, lightningMastery: 0, elementalMastery: false, stormEarthAndFire: 0, boomingEchoes: 0, elementalOath: 0, lightningOverload: 0, astralShift: 0, totemOfWrath: false, lavaFlows: 0, shamanism: 0, thunderstorm: false, enhancingTotems: 0, earthsGrasp: 0, ancestralKnowledge: 0, guardianTotems: 0, thunderingStrikes: 0, improvedGhostWolf: 0, improvedShields: 0, elementalWeapons: 0, shamanisticFocus: false, anticipation: 0, flurry: 0, toughness: 0, improvedWindfuryTotem: 0, spiritWeapons: false, mentalDexterity: 0, unleashedRage: 0, weaponMastery: 0, frozenPower: 0, dualWieldSpecialization: 0, dualWield: false, stormstrike: false, staticShock: 0, lavaLash: false, improvedStormstrike: 0, mentalQuickness: 0, shamanisticRage: false, earthenPower: 0, maelstromWeapon: 0, feralSpirit: false, improvedHealingWave: 0, totemicFocus: 0, improvedReincarnation: 0, healingGrace: 0, tidalFocus: 0, improvedWaterShield: 0, healingFocus: 0, tidalForce: false, ancestralHealing: 0, restorativeTotems: 0, tidalMastery: 0, healingWay: 0, naturesSwiftness: false, focusedMind: 0, purification: 0, naturesGuardian: 0, manaTideTotem: false, cleanseSpirit: false, blessingOfTheEternals: 0, improvedChainHeal: 0, naturesBlessing: 0, ancestralAwakening: 0, earthShield: false, improvedEarthShield: 0, tidalWaves: 0, riptide: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 convection */ 1:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 2:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 3:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 4:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 5:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 7:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_fury */ 8:\n                    message.elementalFury = reader.int32();\n                    break;\n                case /* int32 improved_fire_nova */ 9:\n                    message.improvedFireNova = reader.int32();\n                    break;\n                case /* int32 eye_of_the_storm */ 10:\n                    message.eyeOfTheStorm = reader.int32();\n                    break;\n                case /* int32 elemental_reach */ 11:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* bool call_of_thunder */ 12:\n                    message.callOfThunder = reader.bool();\n                    break;\n                case /* int32 unrelenting_storm */ 13:\n                    message.unrelentingStorm = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 14:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 lightning_mastery */ 15:\n                    message.lightningMastery = reader.int32();\n                    break;\n                case /* bool elemental_mastery */ 16:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 storm_earth_and_fire */ 17:\n                    message.stormEarthAndFire = reader.int32();\n                    break;\n                case /* int32 booming_echoes */ 18:\n                    message.boomingEchoes = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 19:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lightning_overload */ 20:\n                    message.lightningOverload = reader.int32();\n                    break;\n                case /* int32 astral_shift */ 21:\n                    message.astralShift = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 22:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* int32 lava_flows */ 23:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* int32 shamanism */ 24:\n                    message.shamanism = reader.int32();\n                    break;\n                case /* bool thunderstorm */ 25:\n                    message.thunderstorm = reader.bool();\n                    break;\n                case /* int32 enhancing_totems */ 26:\n                    message.enhancingTotems = reader.int32();\n                    break;\n                case /* int32 earths_grasp */ 27:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* int32 ancestral_knowledge */ 28:\n                    message.ancestralKnowledge = reader.int32();\n                    break;\n                case /* int32 guardian_totems */ 29:\n                    message.guardianTotems = reader.int32();\n                    break;\n                case /* int32 thundering_strikes */ 30:\n                    message.thunderingStrikes = reader.int32();\n                    break;\n                case /* int32 improved_ghost_wolf */ 31:\n                    message.improvedGhostWolf = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 32:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_weapons */ 33:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* bool shamanistic_focus */ 34:\n                    message.shamanisticFocus = reader.bool();\n                    break;\n                case /* int32 anticipation */ 35:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 flurry */ 36:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 toughness */ 37:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_windfury_totem */ 38:\n                    message.improvedWindfuryTotem = reader.int32();\n                    break;\n                case /* bool spirit_weapons */ 39:\n                    message.spiritWeapons = reader.bool();\n                    break;\n                case /* int32 mental_dexterity */ 40:\n                    message.mentalDexterity = reader.int32();\n                    break;\n                case /* int32 unleashed_rage */ 41:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 42:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 43:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 44:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* bool dual_wield */ 45:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool stormstrike */ 46:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 47:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* bool lava_lash */ 48:\n                    message.lavaLash = reader.bool();\n                    break;\n                case /* int32 improved_stormstrike */ 49:\n                    message.improvedStormstrike = reader.int32();\n                    break;\n                case /* int32 mental_quickness */ 50:\n                    message.mentalQuickness = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 51:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 earthen_power */ 52:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 53:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 54:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 improved_healing_wave */ 55:\n                    message.improvedHealingWave = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 56:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 improved_reincarnation */ 57:\n                    message.improvedReincarnation = reader.int32();\n                    break;\n                case /* int32 healing_grace */ 58:\n                    message.healingGrace = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 59:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 improved_water_shield */ 60:\n                    message.improvedWaterShield = reader.int32();\n                    break;\n                case /* int32 healing_focus */ 61:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* bool tidal_force */ 62:\n                    message.tidalForce = reader.bool();\n                    break;\n                case /* int32 ancestral_healing */ 63:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* int32 restorative_totems */ 64:\n                    message.restorativeTotems = reader.int32();\n                    break;\n                case /* int32 tidal_mastery */ 65:\n                    message.tidalMastery = reader.int32();\n                    break;\n                case /* int32 healing_way */ 66:\n                    message.healingWay = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 67:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 focused_mind */ 68:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 purification */ 69:\n                    message.purification = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 70:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 71:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* bool cleanse_spirit */ 72:\n                    message.cleanseSpirit = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 73:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* int32 improved_chain_heal */ 74:\n                    message.improvedChainHeal = reader.int32();\n                    break;\n                case /* int32 natures_blessing */ 75:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 76:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool earth_shield */ 77:\n                    message.earthShield = reader.bool();\n                    break;\n                case /* int32 improved_earth_shield */ 78:\n                    message.improvedEarthShield = reader.int32();\n                    break;\n                case /* int32 tidal_waves */ 79:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* bool riptide */ 80:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 convection = 1; */\n        if (message.convection !== 0)\n            writer.tag(1, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 2; */\n        if (message.concussion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 3; */\n        if (message.callOfFlame !== 0)\n            writer.tag(3, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 4; */\n        if (message.elementalWarding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.elementalWarding);\n        /* int32 elemental_devastation = 5; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* bool elemental_focus = 7; */\n        if (message.elementalFocus !== false)\n            writer.tag(7, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_fury = 8; */\n        if (message.elementalFury !== 0)\n            writer.tag(8, WireType.Varint).int32(message.elementalFury);\n        /* int32 improved_fire_nova = 9; */\n        if (message.improvedFireNova !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedFireNova);\n        /* int32 eye_of_the_storm = 10; */\n        if (message.eyeOfTheStorm !== 0)\n            writer.tag(10, WireType.Varint).int32(message.eyeOfTheStorm);\n        /* int32 elemental_reach = 11; */\n        if (message.elementalReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalReach);\n        /* bool call_of_thunder = 12; */\n        if (message.callOfThunder !== false)\n            writer.tag(12, WireType.Varint).bool(message.callOfThunder);\n        /* int32 unrelenting_storm = 13; */\n        if (message.unrelentingStorm !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unrelentingStorm);\n        /* int32 elemental_precision = 14; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(14, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 lightning_mastery = 15; */\n        if (message.lightningMastery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lightningMastery);\n        /* bool elemental_mastery = 16; */\n        if (message.elementalMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.elementalMastery);\n        /* int32 storm_earth_and_fire = 17; */\n        if (message.stormEarthAndFire !== 0)\n            writer.tag(17, WireType.Varint).int32(message.stormEarthAndFire);\n        /* int32 booming_echoes = 18; */\n        if (message.boomingEchoes !== 0)\n            writer.tag(18, WireType.Varint).int32(message.boomingEchoes);\n        /* int32 elemental_oath = 19; */\n        if (message.elementalOath !== 0)\n            writer.tag(19, WireType.Varint).int32(message.elementalOath);\n        /* int32 lightning_overload = 20; */\n        if (message.lightningOverload !== 0)\n            writer.tag(20, WireType.Varint).int32(message.lightningOverload);\n        /* int32 astral_shift = 21; */\n        if (message.astralShift !== 0)\n            writer.tag(21, WireType.Varint).int32(message.astralShift);\n        /* bool totem_of_wrath = 22; */\n        if (message.totemOfWrath !== false)\n            writer.tag(22, WireType.Varint).bool(message.totemOfWrath);\n        /* int32 lava_flows = 23; */\n        if (message.lavaFlows !== 0)\n            writer.tag(23, WireType.Varint).int32(message.lavaFlows);\n        /* int32 shamanism = 24; */\n        if (message.shamanism !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shamanism);\n        /* bool thunderstorm = 25; */\n        if (message.thunderstorm !== false)\n            writer.tag(25, WireType.Varint).bool(message.thunderstorm);\n        /* int32 enhancing_totems = 26; */\n        if (message.enhancingTotems !== 0)\n            writer.tag(26, WireType.Varint).int32(message.enhancingTotems);\n        /* int32 earths_grasp = 27; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthsGrasp);\n        /* int32 ancestral_knowledge = 28; */\n        if (message.ancestralKnowledge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.ancestralKnowledge);\n        /* int32 guardian_totems = 29; */\n        if (message.guardianTotems !== 0)\n            writer.tag(29, WireType.Varint).int32(message.guardianTotems);\n        /* int32 thundering_strikes = 30; */\n        if (message.thunderingStrikes !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thunderingStrikes);\n        /* int32 improved_ghost_wolf = 31; */\n        if (message.improvedGhostWolf !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedGhostWolf);\n        /* int32 improved_shields = 32; */\n        if (message.improvedShields !== 0)\n            writer.tag(32, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_weapons = 33; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(33, WireType.Varint).int32(message.elementalWeapons);\n        /* bool shamanistic_focus = 34; */\n        if (message.shamanisticFocus !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticFocus);\n        /* int32 anticipation = 35; */\n        if (message.anticipation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.anticipation);\n        /* int32 flurry = 36; */\n        if (message.flurry !== 0)\n            writer.tag(36, WireType.Varint).int32(message.flurry);\n        /* int32 toughness = 37; */\n        if (message.toughness !== 0)\n            writer.tag(37, WireType.Varint).int32(message.toughness);\n        /* int32 improved_windfury_totem = 38; */\n        if (message.improvedWindfuryTotem !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedWindfuryTotem);\n        /* bool spirit_weapons = 39; */\n        if (message.spiritWeapons !== false)\n            writer.tag(39, WireType.Varint).bool(message.spiritWeapons);\n        /* int32 mental_dexterity = 40; */\n        if (message.mentalDexterity !== 0)\n            writer.tag(40, WireType.Varint).int32(message.mentalDexterity);\n        /* int32 unleashed_rage = 41; */\n        if (message.unleashedRage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unleashedRage);\n        /* int32 weapon_mastery = 42; */\n        if (message.weaponMastery !== 0)\n            writer.tag(42, WireType.Varint).int32(message.weaponMastery);\n        /* int32 frozen_power = 43; */\n        if (message.frozenPower !== 0)\n            writer.tag(43, WireType.Varint).int32(message.frozenPower);\n        /* int32 dual_wield_specialization = 44; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(44, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* bool dual_wield = 45; */\n        if (message.dualWield !== false)\n            writer.tag(45, WireType.Varint).bool(message.dualWield);\n        /* bool stormstrike = 46; */\n        if (message.stormstrike !== false)\n            writer.tag(46, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 47; */\n        if (message.staticShock !== 0)\n            writer.tag(47, WireType.Varint).int32(message.staticShock);\n        /* bool lava_lash = 48; */\n        if (message.lavaLash !== false)\n            writer.tag(48, WireType.Varint).bool(message.lavaLash);\n        /* int32 improved_stormstrike = 49; */\n        if (message.improvedStormstrike !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedStormstrike);\n        /* int32 mental_quickness = 50; */\n        if (message.mentalQuickness !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mentalQuickness);\n        /* bool shamanistic_rage = 51; */\n        if (message.shamanisticRage !== false)\n            writer.tag(51, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 earthen_power = 52; */\n        if (message.earthenPower !== 0)\n            writer.tag(52, WireType.Varint).int32(message.earthenPower);\n        /* int32 maelstrom_weapon = 53; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(53, WireType.Varint).int32(message.maelstromWeapon);\n        /* bool feral_spirit = 54; */\n        if (message.feralSpirit !== false)\n            writer.tag(54, WireType.Varint).bool(message.feralSpirit);\n        /* int32 improved_healing_wave = 55; */\n        if (message.improvedHealingWave !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedHealingWave);\n        /* int32 totemic_focus = 56; */\n        if (message.totemicFocus !== 0)\n            writer.tag(56, WireType.Varint).int32(message.totemicFocus);\n        /* int32 improved_reincarnation = 57; */\n        if (message.improvedReincarnation !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedReincarnation);\n        /* int32 healing_grace = 58; */\n        if (message.healingGrace !== 0)\n            writer.tag(58, WireType.Varint).int32(message.healingGrace);\n        /* int32 tidal_focus = 59; */\n        if (message.tidalFocus !== 0)\n            writer.tag(59, WireType.Varint).int32(message.tidalFocus);\n        /* int32 improved_water_shield = 60; */\n        if (message.improvedWaterShield !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedWaterShield);\n        /* int32 healing_focus = 61; */\n        if (message.healingFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.healingFocus);\n        /* bool tidal_force = 62; */\n        if (message.tidalForce !== false)\n            writer.tag(62, WireType.Varint).bool(message.tidalForce);\n        /* int32 ancestral_healing = 63; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ancestralHealing);\n        /* int32 restorative_totems = 64; */\n        if (message.restorativeTotems !== 0)\n            writer.tag(64, WireType.Varint).int32(message.restorativeTotems);\n        /* int32 tidal_mastery = 65; */\n        if (message.tidalMastery !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tidalMastery);\n        /* int32 healing_way = 66; */\n        if (message.healingWay !== 0)\n            writer.tag(66, WireType.Varint).int32(message.healingWay);\n        /* bool natures_swiftness = 67; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(67, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 focused_mind = 68; */\n        if (message.focusedMind !== 0)\n            writer.tag(68, WireType.Varint).int32(message.focusedMind);\n        /* int32 purification = 69; */\n        if (message.purification !== 0)\n            writer.tag(69, WireType.Varint).int32(message.purification);\n        /* int32 natures_guardian = 70; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(70, WireType.Varint).int32(message.naturesGuardian);\n        /* bool mana_tide_totem = 71; */\n        if (message.manaTideTotem !== false)\n            writer.tag(71, WireType.Varint).bool(message.manaTideTotem);\n        /* bool cleanse_spirit = 72; */\n        if (message.cleanseSpirit !== false)\n            writer.tag(72, WireType.Varint).bool(message.cleanseSpirit);\n        /* int32 blessing_of_the_eternals = 73; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(73, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* int32 improved_chain_heal = 74; */\n        if (message.improvedChainHeal !== 0)\n            writer.tag(74, WireType.Varint).int32(message.improvedChainHeal);\n        /* int32 natures_blessing = 75; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(75, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 ancestral_awakening = 76; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(76, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool earth_shield = 77; */\n        if (message.earthShield !== false)\n            writer.tag(77, WireType.Varint).bool(message.earthShield);\n        /* int32 improved_earth_shield = 78; */\n        if (message.improvedEarthShield !== 0)\n            writer.tag(78, WireType.Varint).int32(message.improvedEarthShield);\n        /* int32 tidal_waves = 79; */\n        if (message.tidalWaves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.tidalWaves);\n        /* bool riptide = 80; */\n        if (message.riptide !== false)\n            writer.tag(80, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 5, name: \"use_mana_tide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"recall_fire_elemental_on_oom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"recall_totems\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useManaTide: false, useFireElemental: false, recallFireElementalOnOom: false, recallTotems: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_mana_tide */ 5:\n                    message.useManaTide = reader.bool();\n                    break;\n                case /* bool use_fire_elemental */ 6:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* bool recall_fire_elemental_on_oom */ 7:\n                    message.recallFireElementalOnOom = reader.bool();\n                    break;\n                case /* bool recall_totems */ 8:\n                    message.recallTotems = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        /* bool use_mana_tide = 5; */\n        if (message.useManaTide !== false)\n            writer.tag(5, WireType.Varint).bool(message.useManaTide);\n        /* bool use_fire_elemental = 6; */\n        if (message.useFireElemental !== false)\n            writer.tag(6, WireType.Varint).bool(message.useFireElemental);\n        /* bool recall_fire_elemental_on_oom = 7; */\n        if (message.recallFireElementalOnOom !== false)\n            writer.tag(7, WireType.Varint).bool(message.recallFireElementalOnOom);\n        /* bool recall_totems = 8; */\n        if (message.recallTotems !== false)\n            writer.tag(8, WireType.Varint).bool(message.recallTotems);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ElementalShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Rotation rotation */ 1:\n                    message.rotation = ElementalShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            ElementalShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", [\n            { no: 3, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Rotation.RotationType\", ElementalShaman_Rotation_RotationType] },\n            { no: 2, name: \"in_thunderstorm_range\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_fire_nova\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"fn_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_chain_lightning\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"use_cl_only_gap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"cl_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"overwrite_flameshock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"always_crit_lvb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = { type: 0, inThunderstormRange: false, useFireNova: false, fnMinManaPer: 0, useChainLightning: false, useClOnlyGap: false, clMinManaPer: 0, overwriteFlameshock: false, alwaysCritLvb: false, useThunderstorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 3:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.ElementalShaman.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* bool in_thunderstorm_range */ 2:\n                    message.inThunderstormRange = reader.bool();\n                    break;\n                case /* bool use_fire_nova */ 4:\n                    message.useFireNova = reader.bool();\n                    break;\n                case /* double fn_min_mana_per */ 9:\n                    message.fnMinManaPer = reader.double();\n                    break;\n                case /* bool use_chain_lightning */ 5:\n                    message.useChainLightning = reader.bool();\n                    break;\n                case /* bool use_cl_only_gap */ 11:\n                    message.useClOnlyGap = reader.bool();\n                    break;\n                case /* double cl_min_mana_per */ 10:\n                    message.clMinManaPer = reader.double();\n                    break;\n                case /* bool overwrite_flameshock */ 6:\n                    message.overwriteFlameshock = reader.bool();\n                    break;\n                case /* bool always_crit_lvb */ 7:\n                    message.alwaysCritLvb = reader.bool();\n                    break;\n                case /* bool use_thunderstorm */ 8:\n                    message.useThunderstorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 3; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* bool in_thunderstorm_range = 2; */\n        if (message.inThunderstormRange !== false)\n            writer.tag(2, WireType.Varint).bool(message.inThunderstormRange);\n        /* bool use_fire_nova = 4; */\n        if (message.useFireNova !== false)\n            writer.tag(4, WireType.Varint).bool(message.useFireNova);\n        /* double fn_min_mana_per = 9; */\n        if (message.fnMinManaPer !== 0)\n            writer.tag(9, WireType.Bit64).double(message.fnMinManaPer);\n        /* bool use_chain_lightning = 5; */\n        if (message.useChainLightning !== false)\n            writer.tag(5, WireType.Varint).bool(message.useChainLightning);\n        /* bool use_cl_only_gap = 11; */\n        if (message.useClOnlyGap !== false)\n            writer.tag(11, WireType.Varint).bool(message.useClOnlyGap);\n        /* double cl_min_mana_per = 10; */\n        if (message.clMinManaPer !== 0)\n            writer.tag(10, WireType.Bit64).double(message.clMinManaPer);\n        /* bool overwrite_flameshock = 6; */\n        if (message.overwriteFlameshock !== false)\n            writer.tag(6, WireType.Varint).bool(message.overwriteFlameshock);\n        /* bool always_crit_lvb = 7; */\n        if (message.alwaysCritLvb !== false)\n            writer.tag(7, WireType.Varint).bool(message.alwaysCritLvb);\n        /* bool use_thunderstorm = 8; */\n        if (message.useThunderstorm !== false)\n            writer.tag(8, WireType.Varint).bool(message.useThunderstorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { shield: 0, bloodlust: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => EnhancementShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Rotation rotation */ 1:\n                    message.rotation = EnhancementShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            EnhancementShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", [\n            { no: 1, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 2, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.RotationType\", EnhancementShaman_Rotation_RotationType] },\n            { no: 3, name: \"lavaburst_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"lightningbolt_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"maelstromweapon_min_stack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"firenova_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"shamanistic_rage_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = { rotationType: 0, lavaburstWeave: false, lightningboltWeave: false, maelstromweaponMinStack: 0, firenovaManaThreshold: 0, shamanisticRageManaThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 1:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.EnhancementShaman.Rotation.RotationType rotation_type */ 2:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool lavaburst_weave */ 3:\n                    message.lavaburstWeave = reader.bool();\n                    break;\n                case /* bool lightningbolt_weave */ 4:\n                    message.lightningboltWeave = reader.bool();\n                    break;\n                case /* int32 maelstromweapon_min_stack */ 5:\n                    message.maelstromweaponMinStack = reader.int32();\n                    break;\n                case /* double firenova_mana_threshold */ 6:\n                    message.firenovaManaThreshold = reader.double();\n                    break;\n                case /* double shamanistic_rage_mana_threshold */ 7:\n                    message.shamanisticRageManaThreshold = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 1; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Rotation.RotationType rotation_type = 2; */\n        if (message.rotationType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.rotationType);\n        /* bool lavaburst_weave = 3; */\n        if (message.lavaburstWeave !== false)\n            writer.tag(3, WireType.Varint).bool(message.lavaburstWeave);\n        /* bool lightningbolt_weave = 4; */\n        if (message.lightningboltWeave !== false)\n            writer.tag(4, WireType.Varint).bool(message.lightningboltWeave);\n        /* int32 maelstromweapon_min_stack = 5; */\n        if (message.maelstromweaponMinStack !== 0)\n            writer.tag(5, WireType.Varint).int32(message.maelstromweaponMinStack);\n        /* double firenova_mana_threshold = 6; */\n        if (message.firenovaManaThreshold !== 0)\n            writer.tag(6, WireType.Bit64).double(message.firenovaManaThreshold);\n        /* double shamanistic_rage_mana_threshold = 7; */\n        if (message.shamanisticRageManaThreshold !== 0)\n            writer.tag(7, WireType.Bit64).double(message.shamanisticRageManaThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] },\n            { no: 5, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { shield: 0, bloodlust: false, syncType: 0, imbueMh: 0, imbueOh: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 3:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 5:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        /* proto.ShamanSyncType sync_type = 3; */\n        if (message.syncType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        /* proto.ShamanImbue imbue_oh = 5; */\n        if (message.imbueOh !== 0)\n            writer.tag(5, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 improved_eviscerate = 1;\n     */\n    improvedEviscerate: number;\n    /**\n     * @generated from protobuf field: int32 remorseless_attacks = 2;\n     */\n    remorselessAttacks: number;\n    /**\n     * @generated from protobuf field: int32 malice = 3;\n     */\n    malice: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 blood_spatter = 5;\n     */\n    bloodSpatter: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: bool vigor = 7;\n     */\n    vigor: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 8;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 9;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 improved_poisons = 11;\n     */\n    improvedPoisons: number;\n    /**\n     * @generated from protobuf field: int32 fleet_footed = 12;\n     */\n    fleetFooted: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 13;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_kidney_shot = 14;\n     */\n    improvedKidneyShot: number;\n    /**\n     * @generated from protobuf field: int32 quick_recovery = 15;\n     */\n    quickRecovery: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 16;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murder = 17;\n     */\n    murder: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 18;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool overkill = 19;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 20;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 focused_attacks = 21;\n     */\n    focusedAttacks: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 22;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: int32 master_poisoner = 23;\n     */\n    masterPoisoner: number;\n    /**\n     * @generated from protobuf field: bool mutilate = 24;\n     */\n    mutilate: boolean;\n    /**\n     * @generated from protobuf field: int32 turn_the_tables = 25;\n     */\n    turnTheTables: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 26;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: bool hunger_for_blood = 27;\n     */\n    hungerForBlood: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_gouge = 28;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 29;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 30;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 31;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 32;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 precision = 33;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 endurance = 34;\n     */\n    endurance: number;\n    /**\n     * @generated from protobuf field: bool riposte = 35;\n     */\n    riposte: boolean;\n    /**\n     * @generated from protobuf field: int32 close_quarters_combat = 36;\n     */\n    closeQuartersCombat: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 37;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 38;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 39;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 40;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 41;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: bool blade_flurry = 42;\n     */\n    bladeFlurry: boolean;\n    /**\n     * @generated from protobuf field: int32 hack_and_slash = 43;\n     */\n    hackAndSlash: number;\n    /**\n     * @generated from protobuf field: int32 weapon_expertise = 44;\n     */\n    weaponExpertise: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 45;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 46;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 47;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 nerves_of_steel = 48;\n     */\n    nervesOfSteel: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 49;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 50;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 unfair_advantage = 51;\n     */\n    unfairAdvantage: number;\n    /**\n     * @generated from protobuf field: bool surprise_attacks = 52;\n     */\n    surpriseAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 53;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 prey_on_the_weak = 54;\n     */\n    preyOnTheWeak: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 55;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 relentless_strikes = 56;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 master_of_deception = 57;\n     */\n    masterOfDeception: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 58;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 sleight_of_hand = 59;\n     */\n    sleightOfHand: number;\n    /**\n     * @generated from protobuf field: int32 dirty_tricks = 60;\n     */\n    dirtyTricks: number;\n    /**\n     * @generated from protobuf field: int32 camouflage = 61;\n     */\n    camouflage: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 62;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: bool ghostly_strike = 63;\n     */\n    ghostlyStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 64;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: int32 setup = 65;\n     */\n    setup: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 66;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 67;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 heightened_senses = 68;\n     */\n    heightenedSenses: number;\n    /**\n     * @generated from protobuf field: bool preparation = 69;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 dirty_deeds = 70;\n     */\n    dirtyDeeds: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 71;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 master_of_subtlety = 72;\n     */\n    masterOfSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 deadliness = 73;\n     */\n    deadliness: number;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 74;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 75;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 76;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: int32 sinister_calling = 77;\n     */\n    sinisterCalling: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 78;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 79;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool shadowstep = 80;\n     */\n    shadowstep: boolean;\n    /**\n     * @generated from protobuf field: int32 filthy_tricks = 81;\n     */\n    filthyTricks: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 82;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 83;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.Rogue\n */\nexport interface Rogue {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation rotation = 1;\n     */\n    rotation?: Rogue_Rotation;\n    /**\n     * @generated from protobuf field: proto.RogueTalents talents = 2;\n     */\n    talents?: RogueTalents;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options options = 3;\n     */\n    options?: Rogue_Options;\n}\n/**\n * @generated from protobuf message proto.Rogue.Rotation\n */\nexport interface Rogue_Rotation {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency expose_armor_frequency = 1;\n     */\n    exposeArmorFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_expose_armor = 2;\n     */\n    minimumComboPointsExposeArmor: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3;\n     */\n    tricksOfTheTradeFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4;\n     */\n    combatFinisherPriority: Rogue_Rotation_CombatPriority;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5;\n     */\n    assassinationFinisherPriority: Rogue_Rotation_AssassinationPriority;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_primary_finisher = 6;\n     */\n    minimumComboPointsPrimaryFinisher: number;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_secondary_finisher = 7;\n     */\n    minimumComboPointsSecondaryFinisher: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];\n     */\n    multiTargetSliceFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_multi_target_slice = 9;\n     */\n    minimumComboPointsMultiTargetSlice: number;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.Frequency\n */\nexport enum Rogue_Rotation_Frequency {\n    /**\n     * @generated from protobuf enum value: Never = 0;\n     */\n    Never = 0,\n    /**\n     * @generated from protobuf enum value: Once = 1;\n     */\n    Once = 1,\n    /**\n     * @generated from protobuf enum value: Maintain = 2;\n     */\n    Maintain = 2,\n    /**\n     * @generated from protobuf enum value: Build = 3;\n     */\n    Build = 3,\n    /**\n     * @generated from protobuf enum value: Fill = 4;\n     */\n    Fill = 4,\n    /**\n     * @generated from protobuf enum value: FrequencyUnknown = 5;\n     */\n    FrequencyUnknown = 5\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.CombatPriority\n */\nexport enum Rogue_Rotation_CombatPriority {\n    /**\n     * @generated from protobuf enum value: RuptureEviscerate = 0;\n     */\n    RuptureEviscerate = 0,\n    /**\n     * @generated from protobuf enum value: EviscerateRupture = 1;\n     */\n    EviscerateRupture = 1,\n    /**\n     * @generated from protobuf enum value: CombatPriorityUnknown = 2;\n     */\n    CombatPriorityUnknown = 2\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.AssassinationPriority\n */\nexport enum Rogue_Rotation_AssassinationPriority {\n    /**\n     * @generated from protobuf enum value: EnvenomRupture = 0;\n     */\n    EnvenomRupture = 0,\n    /**\n     * @generated from protobuf enum value: RuptureEnvenom = 1;\n     */\n    RuptureEnvenom = 1,\n    /**\n     * @generated from protobuf enum value: AssassinationPriorityUnknown = 2;\n     */\n    AssassinationPriorityUnknown = 2\n}\n/**\n * @generated from protobuf message proto.Rogue.Options\n */\nexport interface Rogue_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: Rogue_Options_PoisonImbue;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Options.PoisonImbue\n */\nexport enum Rogue_Options_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostlyStrike = 42965;\n     */\n    GlyphOfGhostlyStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungerForBlood = 45761;\n     */\n    GlyphOfHungerForBlood = 45761,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigor = 42971;\n     */\n    GlyphOfVigor = 42971\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 43380;\n     */\n    GlyphOfVanish = 43380\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"improved_eviscerate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"remorseless_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"malice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"blood_spatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"vigor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"fleet_footed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_kidney_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"quick_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"murder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"master_poisoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"mutilate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"turn_the_tables\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hunger_for_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"endurance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"riposte\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"close_quarters_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"blade_flurry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"hack_and_slash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"weapon_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"nerves_of_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"unfair_advantage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"surprise_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"prey_on_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"master_of_deception\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sleight_of_hand\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"dirty_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"camouflage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"ghostly_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 64, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"setup\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"heightened_senses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"dirty_deeds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"master_of_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"deadliness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"sinister_calling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"shadowstep\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"filthy_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { improvedEviscerate: 0, remorselessAttacks: 0, malice: 0, ruthlessness: 0, bloodSpatter: 0, puncturingWounds: 0, vigor: false, improvedExposeArmor: 0, lethality: 0, vilePoisons: 0, improvedPoisons: 0, fleetFooted: 0, coldBlood: false, improvedKidneyShot: 0, quickRecovery: 0, sealFate: 0, murder: 0, deadlyBrew: 0, overkill: false, deadenedNerves: 0, focusedAttacks: 0, findWeakness: 0, masterPoisoner: 0, mutilate: false, turnTheTables: 0, cutToTheChase: 0, hungerForBlood: false, improvedGouge: 0, improvedSinisterStrike: 0, dualWieldSpecialization: 0, improvedSliceAndDice: 0, deflection: 0, precision: 0, endurance: 0, riposte: false, closeQuartersCombat: 0, improvedKick: 0, improvedSprint: 0, lightningReflexes: 0, aggression: 0, maceSpecialization: 0, bladeFlurry: false, hackAndSlash: 0, weaponExpertise: 0, bladeTwisting: 0, vitality: 0, adrenalineRush: false, nervesOfSteel: 0, throwingSpecialization: 0, combatPotency: 0, unfairAdvantage: 0, surpriseAttacks: false, savageCombat: 0, preyOnTheWeak: 0, killingSpree: false, relentlessStrikes: 0, masterOfDeception: 0, opportunity: 0, sleightOfHand: 0, dirtyTricks: 0, camouflage: 0, elusiveness: 0, ghostlyStrike: false, serratedBlades: 0, setup: 0, initiative: 0, improvedAmbush: 0, heightenedSenses: 0, preparation: false, dirtyDeeds: 0, hemorrhage: false, masterOfSubtlety: 0, deadliness: 0, envelopingShadows: 0, premeditation: false, cheatDeath: 0, sinisterCalling: 0, waylay: 0, honorAmongThieves: 0, shadowstep: false, filthyTricks: 0, slaughterFromTheShadows: 0, shadowDance: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_eviscerate */ 1:\n                    message.improvedEviscerate = reader.int32();\n                    break;\n                case /* int32 remorseless_attacks */ 2:\n                    message.remorselessAttacks = reader.int32();\n                    break;\n                case /* int32 malice */ 3:\n                    message.malice = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 blood_spatter */ 5:\n                    message.bloodSpatter = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* bool vigor */ 7:\n                    message.vigor = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 8:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 lethality */ 9:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 improved_poisons */ 11:\n                    message.improvedPoisons = reader.int32();\n                    break;\n                case /* int32 fleet_footed */ 12:\n                    message.fleetFooted = reader.int32();\n                    break;\n                case /* bool cold_blood */ 13:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 improved_kidney_shot */ 14:\n                    message.improvedKidneyShot = reader.int32();\n                    break;\n                case /* int32 quick_recovery */ 15:\n                    message.quickRecovery = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 16:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murder */ 17:\n                    message.murder = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 18:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool overkill */ 19:\n                    message.overkill = reader.bool();\n                    break;\n                case /* int32 deadened_nerves */ 20:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 focused_attacks */ 21:\n                    message.focusedAttacks = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 22:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* int32 master_poisoner */ 23:\n                    message.masterPoisoner = reader.int32();\n                    break;\n                case /* bool mutilate */ 24:\n                    message.mutilate = reader.bool();\n                    break;\n                case /* int32 turn_the_tables */ 25:\n                    message.turnTheTables = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 26:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* bool hunger_for_blood */ 27:\n                    message.hungerForBlood = reader.bool();\n                    break;\n                case /* int32 improved_gouge */ 28:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 29:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 30:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 31:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 deflection */ 32:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 precision */ 33:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 endurance */ 34:\n                    message.endurance = reader.int32();\n                    break;\n                case /* bool riposte */ 35:\n                    message.riposte = reader.bool();\n                    break;\n                case /* int32 close_quarters_combat */ 36:\n                    message.closeQuartersCombat = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 37:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 38:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 39:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 aggression */ 40:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 mace_specialization */ 41:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* bool blade_flurry */ 42:\n                    message.bladeFlurry = reader.bool();\n                    break;\n                case /* int32 hack_and_slash */ 43:\n                    message.hackAndSlash = reader.int32();\n                    break;\n                case /* int32 weapon_expertise */ 44:\n                    message.weaponExpertise = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 45:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 vitality */ 46:\n                    message.vitality = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 47:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 nerves_of_steel */ 48:\n                    message.nervesOfSteel = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 49:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 50:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 unfair_advantage */ 51:\n                    message.unfairAdvantage = reader.int32();\n                    break;\n                case /* bool surprise_attacks */ 52:\n                    message.surpriseAttacks = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 53:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 prey_on_the_weak */ 54:\n                    message.preyOnTheWeak = reader.int32();\n                    break;\n                case /* bool killing_spree */ 55:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 relentless_strikes */ 56:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 master_of_deception */ 57:\n                    message.masterOfDeception = reader.int32();\n                    break;\n                case /* int32 opportunity */ 58:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 sleight_of_hand */ 59:\n                    message.sleightOfHand = reader.int32();\n                    break;\n                case /* int32 dirty_tricks */ 60:\n                    message.dirtyTricks = reader.int32();\n                    break;\n                case /* int32 camouflage */ 61:\n                    message.camouflage = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 62:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* bool ghostly_strike */ 63:\n                    message.ghostlyStrike = reader.bool();\n                    break;\n                case /* int32 serrated_blades */ 64:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* int32 setup */ 65:\n                    message.setup = reader.int32();\n                    break;\n                case /* int32 initiative */ 66:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 67:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 heightened_senses */ 68:\n                    message.heightenedSenses = reader.int32();\n                    break;\n                case /* bool preparation */ 69:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 dirty_deeds */ 70:\n                    message.dirtyDeeds = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 71:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 master_of_subtlety */ 72:\n                    message.masterOfSubtlety = reader.int32();\n                    break;\n                case /* int32 deadliness */ 73:\n                    message.deadliness = reader.int32();\n                    break;\n                case /* int32 enveloping_shadows */ 74:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* bool premeditation */ 75:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 cheat_death */ 76:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* int32 sinister_calling */ 77:\n                    message.sinisterCalling = reader.int32();\n                    break;\n                case /* int32 waylay */ 78:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 honor_among_thieves */ 79:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool shadowstep */ 80:\n                    message.shadowstep = reader.bool();\n                    break;\n                case /* int32 filthy_tricks */ 81:\n                    message.filthyTricks = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 82:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 83:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_eviscerate = 1; */\n        if (message.improvedEviscerate !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedEviscerate);\n        /* int32 remorseless_attacks = 2; */\n        if (message.remorselessAttacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.remorselessAttacks);\n        /* int32 malice = 3; */\n        if (message.malice !== 0)\n            writer.tag(3, WireType.Varint).int32(message.malice);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 blood_spatter = 5; */\n        if (message.bloodSpatter !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodSpatter);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* bool vigor = 7; */\n        if (message.vigor !== false)\n            writer.tag(7, WireType.Varint).bool(message.vigor);\n        /* int32 improved_expose_armor = 8; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 lethality = 9; */\n        if (message.lethality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.lethality);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 improved_poisons = 11; */\n        if (message.improvedPoisons !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedPoisons);\n        /* int32 fleet_footed = 12; */\n        if (message.fleetFooted !== 0)\n            writer.tag(12, WireType.Varint).int32(message.fleetFooted);\n        /* bool cold_blood = 13; */\n        if (message.coldBlood !== false)\n            writer.tag(13, WireType.Varint).bool(message.coldBlood);\n        /* int32 improved_kidney_shot = 14; */\n        if (message.improvedKidneyShot !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedKidneyShot);\n        /* int32 quick_recovery = 15; */\n        if (message.quickRecovery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.quickRecovery);\n        /* int32 seal_fate = 16; */\n        if (message.sealFate !== 0)\n            writer.tag(16, WireType.Varint).int32(message.sealFate);\n        /* int32 murder = 17; */\n        if (message.murder !== 0)\n            writer.tag(17, WireType.Varint).int32(message.murder);\n        /* int32 deadly_brew = 18; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.deadlyBrew);\n        /* bool overkill = 19; */\n        if (message.overkill !== false)\n            writer.tag(19, WireType.Varint).bool(message.overkill);\n        /* int32 deadened_nerves = 20; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(20, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 focused_attacks = 21; */\n        if (message.focusedAttacks !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedAttacks);\n        /* int32 find_weakness = 22; */\n        if (message.findWeakness !== 0)\n            writer.tag(22, WireType.Varint).int32(message.findWeakness);\n        /* int32 master_poisoner = 23; */\n        if (message.masterPoisoner !== 0)\n            writer.tag(23, WireType.Varint).int32(message.masterPoisoner);\n        /* bool mutilate = 24; */\n        if (message.mutilate !== false)\n            writer.tag(24, WireType.Varint).bool(message.mutilate);\n        /* int32 turn_the_tables = 25; */\n        if (message.turnTheTables !== 0)\n            writer.tag(25, WireType.Varint).int32(message.turnTheTables);\n        /* int32 cut_to_the_chase = 26; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(26, WireType.Varint).int32(message.cutToTheChase);\n        /* bool hunger_for_blood = 27; */\n        if (message.hungerForBlood !== false)\n            writer.tag(27, WireType.Varint).bool(message.hungerForBlood);\n        /* int32 improved_gouge = 28; */\n        if (message.improvedGouge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedGouge);\n        /* int32 improved_sinister_strike = 29; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 dual_wield_specialization = 30; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(30, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_slice_and_dice = 31; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 deflection = 32; */\n        if (message.deflection !== 0)\n            writer.tag(32, WireType.Varint).int32(message.deflection);\n        /* int32 precision = 33; */\n        if (message.precision !== 0)\n            writer.tag(33, WireType.Varint).int32(message.precision);\n        /* int32 endurance = 34; */\n        if (message.endurance !== 0)\n            writer.tag(34, WireType.Varint).int32(message.endurance);\n        /* bool riposte = 35; */\n        if (message.riposte !== false)\n            writer.tag(35, WireType.Varint).bool(message.riposte);\n        /* int32 close_quarters_combat = 36; */\n        if (message.closeQuartersCombat !== 0)\n            writer.tag(36, WireType.Varint).int32(message.closeQuartersCombat);\n        /* int32 improved_kick = 37; */\n        if (message.improvedKick !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedKick);\n        /* int32 improved_sprint = 38; */\n        if (message.improvedSprint !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedSprint);\n        /* int32 lightning_reflexes = 39; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 aggression = 40; */\n        if (message.aggression !== 0)\n            writer.tag(40, WireType.Varint).int32(message.aggression);\n        /* int32 mace_specialization = 41; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.maceSpecialization);\n        /* bool blade_flurry = 42; */\n        if (message.bladeFlurry !== false)\n            writer.tag(42, WireType.Varint).bool(message.bladeFlurry);\n        /* int32 hack_and_slash = 43; */\n        if (message.hackAndSlash !== 0)\n            writer.tag(43, WireType.Varint).int32(message.hackAndSlash);\n        /* int32 weapon_expertise = 44; */\n        if (message.weaponExpertise !== 0)\n            writer.tag(44, WireType.Varint).int32(message.weaponExpertise);\n        /* int32 blade_twisting = 45; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(45, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 vitality = 46; */\n        if (message.vitality !== 0)\n            writer.tag(46, WireType.Varint).int32(message.vitality);\n        /* bool adrenaline_rush = 47; */\n        if (message.adrenalineRush !== false)\n            writer.tag(47, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 nerves_of_steel = 48; */\n        if (message.nervesOfSteel !== 0)\n            writer.tag(48, WireType.Varint).int32(message.nervesOfSteel);\n        /* int32 throwing_specialization = 49; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(49, WireType.Varint).int32(message.throwingSpecialization);\n        /* int32 combat_potency = 50; */\n        if (message.combatPotency !== 0)\n            writer.tag(50, WireType.Varint).int32(message.combatPotency);\n        /* int32 unfair_advantage = 51; */\n        if (message.unfairAdvantage !== 0)\n            writer.tag(51, WireType.Varint).int32(message.unfairAdvantage);\n        /* bool surprise_attacks = 52; */\n        if (message.surpriseAttacks !== false)\n            writer.tag(52, WireType.Varint).bool(message.surpriseAttacks);\n        /* int32 savage_combat = 53; */\n        if (message.savageCombat !== 0)\n            writer.tag(53, WireType.Varint).int32(message.savageCombat);\n        /* int32 prey_on_the_weak = 54; */\n        if (message.preyOnTheWeak !== 0)\n            writer.tag(54, WireType.Varint).int32(message.preyOnTheWeak);\n        /* bool killing_spree = 55; */\n        if (message.killingSpree !== false)\n            writer.tag(55, WireType.Varint).bool(message.killingSpree);\n        /* int32 relentless_strikes = 56; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 master_of_deception = 57; */\n        if (message.masterOfDeception !== 0)\n            writer.tag(57, WireType.Varint).int32(message.masterOfDeception);\n        /* int32 opportunity = 58; */\n        if (message.opportunity !== 0)\n            writer.tag(58, WireType.Varint).int32(message.opportunity);\n        /* int32 sleight_of_hand = 59; */\n        if (message.sleightOfHand !== 0)\n            writer.tag(59, WireType.Varint).int32(message.sleightOfHand);\n        /* int32 dirty_tricks = 60; */\n        if (message.dirtyTricks !== 0)\n            writer.tag(60, WireType.Varint).int32(message.dirtyTricks);\n        /* int32 camouflage = 61; */\n        if (message.camouflage !== 0)\n            writer.tag(61, WireType.Varint).int32(message.camouflage);\n        /* int32 elusiveness = 62; */\n        if (message.elusiveness !== 0)\n            writer.tag(62, WireType.Varint).int32(message.elusiveness);\n        /* bool ghostly_strike = 63; */\n        if (message.ghostlyStrike !== false)\n            writer.tag(63, WireType.Varint).bool(message.ghostlyStrike);\n        /* int32 serrated_blades = 64; */\n        if (message.serratedBlades !== 0)\n            writer.tag(64, WireType.Varint).int32(message.serratedBlades);\n        /* int32 setup = 65; */\n        if (message.setup !== 0)\n            writer.tag(65, WireType.Varint).int32(message.setup);\n        /* int32 initiative = 66; */\n        if (message.initiative !== 0)\n            writer.tag(66, WireType.Varint).int32(message.initiative);\n        /* int32 improved_ambush = 67; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(67, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 heightened_senses = 68; */\n        if (message.heightenedSenses !== 0)\n            writer.tag(68, WireType.Varint).int32(message.heightenedSenses);\n        /* bool preparation = 69; */\n        if (message.preparation !== false)\n            writer.tag(69, WireType.Varint).bool(message.preparation);\n        /* int32 dirty_deeds = 70; */\n        if (message.dirtyDeeds !== 0)\n            writer.tag(70, WireType.Varint).int32(message.dirtyDeeds);\n        /* bool hemorrhage = 71; */\n        if (message.hemorrhage !== false)\n            writer.tag(71, WireType.Varint).bool(message.hemorrhage);\n        /* int32 master_of_subtlety = 72; */\n        if (message.masterOfSubtlety !== 0)\n            writer.tag(72, WireType.Varint).int32(message.masterOfSubtlety);\n        /* int32 deadliness = 73; */\n        if (message.deadliness !== 0)\n            writer.tag(73, WireType.Varint).int32(message.deadliness);\n        /* int32 enveloping_shadows = 74; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(74, WireType.Varint).int32(message.envelopingShadows);\n        /* bool premeditation = 75; */\n        if (message.premeditation !== false)\n            writer.tag(75, WireType.Varint).bool(message.premeditation);\n        /* int32 cheat_death = 76; */\n        if (message.cheatDeath !== 0)\n            writer.tag(76, WireType.Varint).int32(message.cheatDeath);\n        /* int32 sinister_calling = 77; */\n        if (message.sinisterCalling !== 0)\n            writer.tag(77, WireType.Varint).int32(message.sinisterCalling);\n        /* int32 waylay = 78; */\n        if (message.waylay !== 0)\n            writer.tag(78, WireType.Varint).int32(message.waylay);\n        /* int32 honor_among_thieves = 79; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool shadowstep = 80; */\n        if (message.shadowstep !== false)\n            writer.tag(80, WireType.Varint).bool(message.shadowstep);\n        /* int32 filthy_tricks = 81; */\n        if (message.filthyTricks !== 0)\n            writer.tag(81, WireType.Varint).int32(message.filthyTricks);\n        /* int32 slaughter_from_the_shadows = 82; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(82, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* bool shadow_dance = 83; */\n        if (message.shadowDance !== false)\n            writer.tag(83, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue$Type extends MessageType<Rogue> {\n    constructor() {\n        super(\"proto.Rogue\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Rogue_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => RogueTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Rogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue>): Rogue {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue): Rogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation rotation */ 1:\n                    message.rotation = Rogue_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RogueTalents talents */ 2:\n                    message.talents = RogueTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Rogue.Options options */ 3:\n                    message.options = Rogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation rotation = 1; */\n        if (message.rotation)\n            Rogue_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RogueTalents talents = 2; */\n        if (message.talents)\n            RogueTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options options = 3; */\n        if (message.options)\n            Rogue_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue\n */\nexport const Rogue = new Rogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Rotation$Type extends MessageType<Rogue_Rotation> {\n    constructor() {\n        super(\"proto.Rogue.Rotation\", [\n            { no: 1, name: \"expose_armor_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 2, name: \"minimum_combo_points_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"tricks_of_the_trade_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 4, name: \"combat_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.CombatPriority\", Rogue_Rotation_CombatPriority] },\n            { no: 5, name: \"assassination_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.AssassinationPriority\", Rogue_Rotation_AssassinationPriority] },\n            { no: 6, name: \"minimum_combo_points_primary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"minimum_combo_points_secondary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"MultiTargetSliceFrequency\", kind: \"enum\", jsonName: \"MultiTargetSliceFrequency\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 9, name: \"minimum_combo_points_multi_target_slice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Rotation>): Rogue_Rotation {\n        const message = { exposeArmorFrequency: 0, minimumComboPointsExposeArmor: 0, tricksOfTheTradeFrequency: 0, combatFinisherPriority: 0, assassinationFinisherPriority: 0, minimumComboPointsPrimaryFinisher: 0, minimumComboPointsSecondaryFinisher: 0, multiTargetSliceFrequency: 0, minimumComboPointsMultiTargetSlice: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Rotation): Rogue_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation.Frequency expose_armor_frequency */ 1:\n                    message.exposeArmorFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_expose_armor */ 2:\n                    message.minimumComboPointsExposeArmor = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency */ 3:\n                    message.tricksOfTheTradeFrequency = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority */ 4:\n                    message.combatFinisherPriority = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority */ 5:\n                    message.assassinationFinisherPriority = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_primary_finisher */ 6:\n                    message.minimumComboPointsPrimaryFinisher = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_secondary_finisher */ 7:\n                    message.minimumComboPointsSecondaryFinisher = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];*/ 8:\n                    message.multiTargetSliceFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_multi_target_slice */ 9:\n                    message.minimumComboPointsMultiTargetSlice = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation.Frequency expose_armor_frequency = 1; */\n        if (message.exposeArmorFrequency !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exposeArmorFrequency);\n        /* int32 minimum_combo_points_expose_armor = 2; */\n        if (message.minimumComboPointsExposeArmor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minimumComboPointsExposeArmor);\n        /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3; */\n        if (message.tricksOfTheTradeFrequency !== 0)\n            writer.tag(3, WireType.Varint).int32(message.tricksOfTheTradeFrequency);\n        /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4; */\n        if (message.combatFinisherPriority !== 0)\n            writer.tag(4, WireType.Varint).int32(message.combatFinisherPriority);\n        /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5; */\n        if (message.assassinationFinisherPriority !== 0)\n            writer.tag(5, WireType.Varint).int32(message.assassinationFinisherPriority);\n        /* int32 minimum_combo_points_primary_finisher = 6; */\n        if (message.minimumComboPointsPrimaryFinisher !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minimumComboPointsPrimaryFinisher);\n        /* int32 minimum_combo_points_secondary_finisher = 7; */\n        if (message.minimumComboPointsSecondaryFinisher !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minimumComboPointsSecondaryFinisher);\n        /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"]; */\n        if (message.multiTargetSliceFrequency !== 0)\n            writer.tag(8, WireType.Varint).int32(message.multiTargetSliceFrequency);\n        /* int32 minimum_combo_points_multi_target_slice = 9; */\n        if (message.minimumComboPointsMultiTargetSlice !== 0)\n            writer.tag(9, WireType.Varint).int32(message.minimumComboPointsMultiTargetSlice);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Rotation\n */\nexport const Rogue_Rotation = new Rogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Options$Type extends MessageType<Rogue_Options> {\n    constructor() {\n        super(\"proto.Rogue.Options\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Options>): Rogue_Options {\n        const message = { mhImbue: 0, ohImbue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Options): Rogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.Rogue.Options.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Options\n */\nexport const Rogue_Options = new Rogue_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 unbreakable_will = 1;\n     */\n    unbreakableWill: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 silent_resolve = 3;\n     */\n    silentResolve: number;\n    /**\n     * @generated from protobuf field: int32 improved_inner_fire = 4;\n     */\n    improvedInnerFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_fortitude = 5;\n     */\n    improvedPowerWordFortitude: number;\n    /**\n     * @generated from protobuf field: int32 martyrdom = 6;\n     */\n    martyrdom: number;\n    /**\n     * @generated from protobuf field: int32 meditation = 7;\n     */\n    meditation: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 8;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_shield = 9;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 absolution = 10;\n     */\n    absolution: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 11;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 improved_mana_burn = 12;\n     */\n    improvedManaBurn: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 13;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 mental_strength = 14;\n     */\n    mentalStrength: number;\n    /**\n     * @generated from protobuf field: bool soul_warding = 15;\n     */\n    soulWarding: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_power = 16;\n     */\n    focusedPower: number;\n    /**\n     * @generated from protobuf field: int32 enlightenment = 17;\n     */\n    enlightenment: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 18;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 19;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flash_heal = 20;\n     */\n    improvedFlashHeal: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 21;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 22;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 aspiration = 23;\n     */\n    aspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 24;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 25;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 grace = 26;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 27;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: bool penance = 28;\n     */\n    penance: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 healing_focus = 29;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_renew = 30;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 holy_specialization = 31;\n     */\n    holySpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spell_warding = 32;\n     */\n    spellWarding: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 33;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 34;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_recovery = 35;\n     */\n    blessedRecovery: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 36;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 holy_reach = 37;\n     */\n    holyReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_healing = 38;\n     */\n    improvedHealing: number;\n    /**\n     * @generated from protobuf field: int32 searing_light = 39;\n     */\n    searingLight: number;\n    /**\n     * @generated from protobuf field: int32 healing_prayers = 40;\n     */\n    healingPrayers: number;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 41;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 spiritual_guidance = 42;\n     */\n    spiritualGuidance: number;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 43;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_healing = 44;\n     */\n    spiritualHealing: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 45;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 46;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 47;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 48;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 49;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 serendipity = 50;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 empowered_renew = 51;\n     */\n    empoweredRenew: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 52;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 53;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 divine_providence = 54;\n     */\n    divineProvidence: number;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 55;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 spirit_tap = 56;\n     */\n    spiritTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_spirit_tap = 57;\n     */\n    improvedSpiritTap: number;\n    /**\n     * @generated from protobuf field: int32 darkness = 58;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 shadow_affinity = 59;\n     */\n    shadowAffinity: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 60;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 shadow_focus = 61;\n     */\n    shadowFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 62;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 63;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: bool mind_flay = 64;\n     */\n    mindFlay: boolean;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 65;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 shadow_reach = 66;\n     */\n    shadowReach: number;\n    /**\n     * @generated from protobuf field: int32 shadow_weaving = 67;\n     */\n    shadowWeaving: number;\n    /**\n     * @generated from protobuf field: bool silence = 68;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 69;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_vampiric_embrace = 70;\n     */\n    improvedVampiricEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 71;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 72;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 73;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 74;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_power = 75;\n     */\n    shadowPower: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadowform = 76;\n     */\n    improvedShadowform: number;\n    /**\n     * @generated from protobuf field: int32 misery = 77;\n     */\n    misery: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 78;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 79;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 80;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 81;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 82;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation rotation = 1;\n     */\n    rotation?: ShadowPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation.RotationType rotation_type = 1;\n     */\n    rotationType: ShadowPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool precast_vt = 2;\n     */\n    precastVt: boolean; // casts VT ahead of the start of the fight so that it lands on 0\n    /**\n     * @generated from protobuf field: double latency = 3;\n     */\n    latency: number; // Latency between actions\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Rotation.RotationType\n */\nexport enum ShadowPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Basic = 1;\n     */\n    Basic = 1,\n    /**\n     * @generated from protobuf enum value: Clipping = 2;\n     */\n    Clipping = 2,\n    /**\n     * @generated from protobuf enum value: Ideal = 3;\n     */\n    Ideal = 3,\n    /**\n     * @generated from protobuf enum value: AoE = 4;\n     */\n    AoE = 4\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options.Armor armor = 2;\n     */\n    armor: ShadowPriest_Options_Armor;\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 4;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 5;\n     */\n    useShadowWordDeath: boolean;\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Options.Armor\n */\nexport enum ShadowPriest_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.SmitePriest\n */\nexport interface SmitePriest {\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Rotation rotation = 1;\n     */\n    rotation?: SmitePriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Options options = 3;\n     */\n    options?: SmitePriest_Options;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Rotation\n */\nexport interface SmitePriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Rotation.RotationType rotation_type = 1;\n     */\n    rotationType: SmitePriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 2;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 3;\n     */\n    useShadowWordDeath: boolean;\n}\n/**\n * @generated from protobuf enum proto.SmitePriest.Rotation.RotationType\n */\nexport enum SmitePriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Basic = 1;\n     */\n    Basic = 1,\n    /**\n     * @generated from protobuf enum value: HolyFireWeave = 2;\n     */\n    HolyFireWeave = 2\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Options\n */\nexport interface SmitePriest_Options {\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfHymnOfHope = 45758;\n     */\n    GlyphOfHymnOfHope = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindControl = 42405;\n     */\n    GlyphOfMindControl = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindSear = 45757;\n     */\n    GlyphOfMindSear = 45757,\n    /**\n     * @generated from protobuf enum value: GlyphOfPainSuppression = 45760;\n     */\n    GlyphOfPainSuppression = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 42407;\n     */\n    GlyphOfShadow = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritOfRedemption = 42417;\n     */\n    GlyphOfSpiritOfRedemption = 42417\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"unbreakable_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"silent_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_inner_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_power_word_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"martyrdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"absolution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_mana_burn\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"mental_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soul_warding\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"focused_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"enlightenment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_flash_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"aspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"penance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"holy_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"spell_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"blessed_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"holy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"searing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"healing_prayers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"spiritual_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"spiritual_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"empowered_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"divine_providence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"shadow_affinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shadow_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"mind_flay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shadow_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"shadow_weaving\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 69, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"improved_vampiric_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 75, name: \"shadow_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_shadowform\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"misery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { unbreakableWill: 0, twinDisciplines: 0, silentResolve: 0, improvedInnerFire: 0, improvedPowerWordFortitude: 0, martyrdom: 0, meditation: 0, innerFocus: false, improvedPowerWordShield: 0, absolution: 0, mentalAgility: 0, improvedManaBurn: 0, reflectiveShield: 0, mentalStrength: 0, soulWarding: false, focusedPower: 0, enlightenment: 0, focusedWill: 0, powerInfusion: false, improvedFlashHeal: 0, renewedHope: 0, rapture: 0, aspiration: 0, divineAegis: 0, painSuppression: false, grace: 0, borrowedTime: 0, penance: false, healingFocus: 0, improvedRenew: 0, holySpecialization: 0, spellWarding: 0, divineFury: 0, desperatePrayer: false, blessedRecovery: 0, inspiration: 0, holyReach: 0, improvedHealing: 0, searingLight: 0, healingPrayers: 0, spiritOfRedemption: false, spiritualGuidance: 0, surgeOfLight: 0, spiritualHealing: 0, holyConcentration: 0, lightwell: false, blessedResilience: 0, bodyAndSoul: 0, empoweredHealing: 0, serendipity: 0, empoweredRenew: 0, circleOfHealing: false, testOfFaith: 0, divineProvidence: 0, guardianSpirit: false, spiritTap: 0, improvedSpiritTap: 0, darkness: 0, shadowAffinity: 0, improvedShadowWordPain: 0, shadowFocus: 0, improvedPsychicScream: 0, improvedMindBlast: 0, mindFlay: false, veiledShadows: 0, shadowReach: 0, shadowWeaving: 0, silence: false, vampiricEmbrace: false, improvedVampiricEmbrace: 0, focusedMind: 0, mindMelt: 0, improvedDevouringPlague: 0, shadowform: false, shadowPower: 0, improvedShadowform: 0, misery: 0, psychicHorror: false, vampiricTouch: false, painAndSuffering: 0, twistedFaith: 0, dispersion: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unbreakable_will */ 1:\n                    message.unbreakableWill = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 silent_resolve */ 3:\n                    message.silentResolve = reader.int32();\n                    break;\n                case /* int32 improved_inner_fire */ 4:\n                    message.improvedInnerFire = reader.int32();\n                    break;\n                case /* int32 improved_power_word_fortitude */ 5:\n                    message.improvedPowerWordFortitude = reader.int32();\n                    break;\n                case /* int32 martyrdom */ 6:\n                    message.martyrdom = reader.int32();\n                    break;\n                case /* int32 meditation */ 7:\n                    message.meditation = reader.int32();\n                    break;\n                case /* bool inner_focus */ 8:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 improved_power_word_shield */ 9:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 absolution */ 10:\n                    message.absolution = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 11:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 improved_mana_burn */ 12:\n                    message.improvedManaBurn = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 13:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 mental_strength */ 14:\n                    message.mentalStrength = reader.int32();\n                    break;\n                case /* bool soul_warding */ 15:\n                    message.soulWarding = reader.bool();\n                    break;\n                case /* int32 focused_power */ 16:\n                    message.focusedPower = reader.int32();\n                    break;\n                case /* int32 enlightenment */ 17:\n                    message.enlightenment = reader.int32();\n                    break;\n                case /* int32 focused_will */ 18:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* bool power_infusion */ 19:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 improved_flash_heal */ 20:\n                    message.improvedFlashHeal = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 21:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* int32 rapture */ 22:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 aspiration */ 23:\n                    message.aspiration = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 24:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 25:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 grace */ 26:\n                    message.grace = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 27:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* bool penance */ 28:\n                    message.penance = reader.bool();\n                    break;\n                case /* int32 healing_focus */ 29:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* int32 improved_renew */ 30:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 holy_specialization */ 31:\n                    message.holySpecialization = reader.int32();\n                    break;\n                case /* int32 spell_warding */ 32:\n                    message.spellWarding = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 33:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 34:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 blessed_recovery */ 35:\n                    message.blessedRecovery = reader.int32();\n                    break;\n                case /* int32 inspiration */ 36:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 holy_reach */ 37:\n                    message.holyReach = reader.int32();\n                    break;\n                case /* int32 improved_healing */ 38:\n                    message.improvedHealing = reader.int32();\n                    break;\n                case /* int32 searing_light */ 39:\n                    message.searingLight = reader.int32();\n                    break;\n                case /* int32 healing_prayers */ 40:\n                    message.healingPrayers = reader.int32();\n                    break;\n                case /* bool spirit_of_redemption */ 41:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 spiritual_guidance */ 42:\n                    message.spiritualGuidance = reader.int32();\n                    break;\n                case /* int32 surge_of_light */ 43:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 spiritual_healing */ 44:\n                    message.spiritualHealing = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 45:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 46:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 47:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 48:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 49:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 serendipity */ 50:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 empowered_renew */ 51:\n                    message.empoweredRenew = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 52:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* int32 test_of_faith */ 53:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 divine_providence */ 54:\n                    message.divineProvidence = reader.int32();\n                    break;\n                case /* bool guardian_spirit */ 55:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 spirit_tap */ 56:\n                    message.spiritTap = reader.int32();\n                    break;\n                case /* int32 improved_spirit_tap */ 57:\n                    message.improvedSpiritTap = reader.int32();\n                    break;\n                case /* int32 darkness */ 58:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 shadow_affinity */ 59:\n                    message.shadowAffinity = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 60:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 shadow_focus */ 61:\n                    message.shadowFocus = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 62:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 63:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* bool mind_flay */ 64:\n                    message.mindFlay = reader.bool();\n                    break;\n                case /* int32 veiled_shadows */ 65:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 shadow_reach */ 66:\n                    message.shadowReach = reader.int32();\n                    break;\n                case /* int32 shadow_weaving */ 67:\n                    message.shadowWeaving = reader.int32();\n                    break;\n                case /* bool silence */ 68:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 69:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 improved_vampiric_embrace */ 70:\n                    message.improvedVampiricEmbrace = reader.int32();\n                    break;\n                case /* int32 focused_mind */ 71:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 72:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 73:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* bool shadowform */ 74:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 shadow_power */ 75:\n                    message.shadowPower = reader.int32();\n                    break;\n                case /* int32 improved_shadowform */ 76:\n                    message.improvedShadowform = reader.int32();\n                    break;\n                case /* int32 misery */ 77:\n                    message.misery = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 78:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* bool vampiric_touch */ 79:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 pain_and_suffering */ 80:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 81:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool dispersion */ 82:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unbreakable_will = 1; */\n        if (message.unbreakableWill !== 0)\n            writer.tag(1, WireType.Varint).int32(message.unbreakableWill);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 silent_resolve = 3; */\n        if (message.silentResolve !== 0)\n            writer.tag(3, WireType.Varint).int32(message.silentResolve);\n        /* int32 improved_inner_fire = 4; */\n        if (message.improvedInnerFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedInnerFire);\n        /* int32 improved_power_word_fortitude = 5; */\n        if (message.improvedPowerWordFortitude !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedPowerWordFortitude);\n        /* int32 martyrdom = 6; */\n        if (message.martyrdom !== 0)\n            writer.tag(6, WireType.Varint).int32(message.martyrdom);\n        /* int32 meditation = 7; */\n        if (message.meditation !== 0)\n            writer.tag(7, WireType.Varint).int32(message.meditation);\n        /* bool inner_focus = 8; */\n        if (message.innerFocus !== false)\n            writer.tag(8, WireType.Varint).bool(message.innerFocus);\n        /* int32 improved_power_word_shield = 9; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 absolution = 10; */\n        if (message.absolution !== 0)\n            writer.tag(10, WireType.Varint).int32(message.absolution);\n        /* int32 mental_agility = 11; */\n        if (message.mentalAgility !== 0)\n            writer.tag(11, WireType.Varint).int32(message.mentalAgility);\n        /* int32 improved_mana_burn = 12; */\n        if (message.improvedManaBurn !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedManaBurn);\n        /* int32 reflective_shield = 13; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(13, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 mental_strength = 14; */\n        if (message.mentalStrength !== 0)\n            writer.tag(14, WireType.Varint).int32(message.mentalStrength);\n        /* bool soul_warding = 15; */\n        if (message.soulWarding !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulWarding);\n        /* int32 focused_power = 16; */\n        if (message.focusedPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.focusedPower);\n        /* int32 enlightenment = 17; */\n        if (message.enlightenment !== 0)\n            writer.tag(17, WireType.Varint).int32(message.enlightenment);\n        /* int32 focused_will = 18; */\n        if (message.focusedWill !== 0)\n            writer.tag(18, WireType.Varint).int32(message.focusedWill);\n        /* bool power_infusion = 19; */\n        if (message.powerInfusion !== false)\n            writer.tag(19, WireType.Varint).bool(message.powerInfusion);\n        /* int32 improved_flash_heal = 20; */\n        if (message.improvedFlashHeal !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFlashHeal);\n        /* int32 renewed_hope = 21; */\n        if (message.renewedHope !== 0)\n            writer.tag(21, WireType.Varint).int32(message.renewedHope);\n        /* int32 rapture = 22; */\n        if (message.rapture !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapture);\n        /* int32 aspiration = 23; */\n        if (message.aspiration !== 0)\n            writer.tag(23, WireType.Varint).int32(message.aspiration);\n        /* int32 divine_aegis = 24; */\n        if (message.divineAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 25; */\n        if (message.painSuppression !== false)\n            writer.tag(25, WireType.Varint).bool(message.painSuppression);\n        /* int32 grace = 26; */\n        if (message.grace !== 0)\n            writer.tag(26, WireType.Varint).int32(message.grace);\n        /* int32 borrowed_time = 27; */\n        if (message.borrowedTime !== 0)\n            writer.tag(27, WireType.Varint).int32(message.borrowedTime);\n        /* bool penance = 28; */\n        if (message.penance !== false)\n            writer.tag(28, WireType.Varint).bool(message.penance);\n        /* int32 healing_focus = 29; */\n        if (message.healingFocus !== 0)\n            writer.tag(29, WireType.Varint).int32(message.healingFocus);\n        /* int32 improved_renew = 30; */\n        if (message.improvedRenew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedRenew);\n        /* int32 holy_specialization = 31; */\n        if (message.holySpecialization !== 0)\n            writer.tag(31, WireType.Varint).int32(message.holySpecialization);\n        /* int32 spell_warding = 32; */\n        if (message.spellWarding !== 0)\n            writer.tag(32, WireType.Varint).int32(message.spellWarding);\n        /* int32 divine_fury = 33; */\n        if (message.divineFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 34; */\n        if (message.desperatePrayer !== false)\n            writer.tag(34, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 blessed_recovery = 35; */\n        if (message.blessedRecovery !== 0)\n            writer.tag(35, WireType.Varint).int32(message.blessedRecovery);\n        /* int32 inspiration = 36; */\n        if (message.inspiration !== 0)\n            writer.tag(36, WireType.Varint).int32(message.inspiration);\n        /* int32 holy_reach = 37; */\n        if (message.holyReach !== 0)\n            writer.tag(37, WireType.Varint).int32(message.holyReach);\n        /* int32 improved_healing = 38; */\n        if (message.improvedHealing !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedHealing);\n        /* int32 searing_light = 39; */\n        if (message.searingLight !== 0)\n            writer.tag(39, WireType.Varint).int32(message.searingLight);\n        /* int32 healing_prayers = 40; */\n        if (message.healingPrayers !== 0)\n            writer.tag(40, WireType.Varint).int32(message.healingPrayers);\n        /* bool spirit_of_redemption = 41; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(41, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 spiritual_guidance = 42; */\n        if (message.spiritualGuidance !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualGuidance);\n        /* int32 surge_of_light = 43; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(43, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 spiritual_healing = 44; */\n        if (message.spiritualHealing !== 0)\n            writer.tag(44, WireType.Varint).int32(message.spiritualHealing);\n        /* int32 holy_concentration = 45; */\n        if (message.holyConcentration !== 0)\n            writer.tag(45, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 46; */\n        if (message.lightwell !== false)\n            writer.tag(46, WireType.Varint).bool(message.lightwell);\n        /* int32 blessed_resilience = 47; */\n        if (message.blessedResilience !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blessedResilience);\n        /* int32 body_and_soul = 48; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(48, WireType.Varint).int32(message.bodyAndSoul);\n        /* int32 empowered_healing = 49; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(49, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 serendipity = 50; */\n        if (message.serendipity !== 0)\n            writer.tag(50, WireType.Varint).int32(message.serendipity);\n        /* int32 empowered_renew = 51; */\n        if (message.empoweredRenew !== 0)\n            writer.tag(51, WireType.Varint).int32(message.empoweredRenew);\n        /* bool circle_of_healing = 52; */\n        if (message.circleOfHealing !== false)\n            writer.tag(52, WireType.Varint).bool(message.circleOfHealing);\n        /* int32 test_of_faith = 53; */\n        if (message.testOfFaith !== 0)\n            writer.tag(53, WireType.Varint).int32(message.testOfFaith);\n        /* int32 divine_providence = 54; */\n        if (message.divineProvidence !== 0)\n            writer.tag(54, WireType.Varint).int32(message.divineProvidence);\n        /* bool guardian_spirit = 55; */\n        if (message.guardianSpirit !== false)\n            writer.tag(55, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 spirit_tap = 56; */\n        if (message.spiritTap !== 0)\n            writer.tag(56, WireType.Varint).int32(message.spiritTap);\n        /* int32 improved_spirit_tap = 57; */\n        if (message.improvedSpiritTap !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedSpiritTap);\n        /* int32 darkness = 58; */\n        if (message.darkness !== 0)\n            writer.tag(58, WireType.Varint).int32(message.darkness);\n        /* int32 shadow_affinity = 59; */\n        if (message.shadowAffinity !== 0)\n            writer.tag(59, WireType.Varint).int32(message.shadowAffinity);\n        /* int32 improved_shadow_word_pain = 60; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 shadow_focus = 61; */\n        if (message.shadowFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.shadowFocus);\n        /* int32 improved_psychic_scream = 62; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(62, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 63; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(63, WireType.Varint).int32(message.improvedMindBlast);\n        /* bool mind_flay = 64; */\n        if (message.mindFlay !== false)\n            writer.tag(64, WireType.Varint).bool(message.mindFlay);\n        /* int32 veiled_shadows = 65; */\n        if (message.veiledShadows !== 0)\n            writer.tag(65, WireType.Varint).int32(message.veiledShadows);\n        /* int32 shadow_reach = 66; */\n        if (message.shadowReach !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shadowReach);\n        /* int32 shadow_weaving = 67; */\n        if (message.shadowWeaving !== 0)\n            writer.tag(67, WireType.Varint).int32(message.shadowWeaving);\n        /* bool silence = 68; */\n        if (message.silence !== false)\n            writer.tag(68, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 69; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(69, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 improved_vampiric_embrace = 70; */\n        if (message.improvedVampiricEmbrace !== 0)\n            writer.tag(70, WireType.Varint).int32(message.improvedVampiricEmbrace);\n        /* int32 focused_mind = 71; */\n        if (message.focusedMind !== 0)\n            writer.tag(71, WireType.Varint).int32(message.focusedMind);\n        /* int32 mind_melt = 72; */\n        if (message.mindMelt !== 0)\n            writer.tag(72, WireType.Varint).int32(message.mindMelt);\n        /* int32 improved_devouring_plague = 73; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* bool shadowform = 74; */\n        if (message.shadowform !== false)\n            writer.tag(74, WireType.Varint).bool(message.shadowform);\n        /* int32 shadow_power = 75; */\n        if (message.shadowPower !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowPower);\n        /* int32 improved_shadowform = 76; */\n        if (message.improvedShadowform !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedShadowform);\n        /* int32 misery = 77; */\n        if (message.misery !== 0)\n            writer.tag(77, WireType.Varint).int32(message.misery);\n        /* bool psychic_horror = 78; */\n        if (message.psychicHorror !== false)\n            writer.tag(78, WireType.Varint).bool(message.psychicHorror);\n        /* bool vampiric_touch = 79; */\n        if (message.vampiricTouch !== false)\n            writer.tag(79, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 pain_and_suffering = 80; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(80, WireType.Varint).int32(message.painAndSuffering);\n        /* int32 twisted_faith = 81; */\n        if (message.twistedFaith !== 0)\n            writer.tag(81, WireType.Varint).int32(message.twistedFaith);\n        /* bool dispersion = 82; */\n        if (message.dispersion !== false)\n            writer.tag(82, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ShadowPriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation rotation */ 1:\n                    message.rotation = ShadowPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            ShadowPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Rotation.RotationType\", ShadowPriest_Rotation_RotationType] },\n            { no: 2, name: \"precast_vt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"latency\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = { rotationType: 0, precastVt: false, latency: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation.RotationType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool precast_vt */ 2:\n                    message.precastVt = reader.bool();\n                    break;\n                case /* double latency */ 3:\n                    message.latency = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation.RotationType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool precast_vt = 2; */\n        if (message.precastVt !== false)\n            writer.tag(2, WireType.Varint).bool(message.precastVt);\n        /* double latency = 3; */\n        if (message.latency !== 0)\n            writer.tag(3, WireType.Bit64).double(message.latency);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"armor\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Options.Armor\", ShadowPriest_Options_Armor] },\n            { no: 4, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = { useShadowfiend: false, armor: 0, useMindBlast: false, useShadowWordDeath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.ShadowPriest.Options.Armor armor */ 2:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_mind_blast */ 4:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 5:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.ShadowPriest.Options.Armor armor = 2; */\n        if (message.armor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.armor);\n        /* bool use_mind_blast = 4; */\n        if (message.useMindBlast !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 5; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useShadowWordDeath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest$Type extends MessageType<SmitePriest> {\n    constructor() {\n        super(\"proto.SmitePriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => SmitePriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => SmitePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest>): SmitePriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest): SmitePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SmitePriest.Rotation rotation */ 1:\n                    message.rotation = SmitePriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.SmitePriest.Options options */ 3:\n                    message.options = SmitePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SmitePriest.Rotation rotation = 1; */\n        if (message.rotation)\n            SmitePriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest.Options options = 3; */\n        if (message.options)\n            SmitePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest\n */\nexport const SmitePriest = new SmitePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Rotation$Type extends MessageType<SmitePriest_Rotation> {\n    constructor() {\n        super(\"proto.SmitePriest.Rotation\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.SmitePriest.Rotation.RotationType\", SmitePriest_Rotation_RotationType] },\n            { no: 2, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Rotation>): SmitePriest_Rotation {\n        const message = { rotationType: 0, useMindBlast: false, useShadowWordDeath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Rotation): SmitePriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SmitePriest.Rotation.RotationType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool use_mind_blast */ 2:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 3:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SmitePriest.Rotation.RotationType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool use_mind_blast = 2; */\n        if (message.useMindBlast !== false)\n            writer.tag(2, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 3; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShadowWordDeath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Rotation\n */\nexport const SmitePriest_Rotation = new SmitePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Options$Type extends MessageType<SmitePriest_Options> {\n    constructor() {\n        super(\"proto.SmitePriest.Options\", [\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Options>): SmitePriest_Options {\n        const message = { useShadowfiend: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Options): SmitePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Options\n */\nexport const SmitePriest_Options = new SmitePriest_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 spiritual_focus = 1;\n     */\n    spiritualFocus: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 2;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 healing_light = 3;\n     */\n    healingLight: number;\n    /**\n     * @generated from protobuf field: int32 divine_intellect = 4;\n     */\n    divineIntellect: number;\n    /**\n     * @generated from protobuf field: int32 unyielding_faith = 5;\n     */\n    unyieldingFaith: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 6;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 illumination = 7;\n     */\n    illumination: number;\n    /**\n     * @generated from protobuf field: int32 improved_lay_on_hands = 8;\n     */\n    improvedLayOnHands: number;\n    /**\n     * @generated from protobuf field: int32 improved_concentration_aura = 9;\n     */\n    improvedConcentrationAura: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_wisdom = 10;\n     */\n    improvedBlessingOfWisdom: number;\n    /**\n     * @generated from protobuf field: int32 blessed_hands = 11;\n     */\n    blessedHands: number;\n    /**\n     * @generated from protobuf field: int32 pure_of_heart = 12;\n     */\n    pureOfHeart: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 13;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_light = 14;\n     */\n    sanctifiedLight: number;\n    /**\n     * @generated from protobuf field: int32 purifying_power = 15;\n     */\n    purifyingPower: number;\n    /**\n     * @generated from protobuf field: int32 holy_power = 16;\n     */\n    holyPower: number;\n    /**\n     * @generated from protobuf field: int32 lights_grace = 17;\n     */\n    lightsGrace: number;\n    /**\n     * @generated from protobuf field: bool holy_shock = 18;\n     */\n    holyShock: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: int32 sacred_cleansing = 20;\n     */\n    sacredCleansing: number;\n    /**\n     * @generated from protobuf field: int32 holy_guidance = 21;\n     */\n    holyGuidance: number;\n    /**\n     * @generated from protobuf field: bool divine_illumination = 22;\n     */\n    divineIllumination: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 23;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 24;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 25;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 26;\n     */\n    beaconOfLight: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 27;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 divine_strength = 28;\n     */\n    divineStrength: number;\n    /**\n     * @generated from protobuf field: int32 stoicism = 29;\n     */\n    stoicism: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 30;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 31;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool divine_sacrifice = 32;\n     */\n    divineSacrifice: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_righteous_fury = 33;\n     */\n    improvedRighteousFury: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 34;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardian = 35;\n     */\n    divineGuardian: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 36;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 improved_devotion_aura = 37;\n     */\n    improvedDevotionAura: number;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 38;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: int32 reckoning = 39;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 40;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 41;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_attunement = 42;\n     */\n    spiritualAttunement: number;\n    /**\n     * @generated from protobuf field: bool holy_shield = 43;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 ardent_defender = 44;\n     */\n    ardentDefender: number;\n    /**\n     * @generated from protobuf field: int32 redoubt = 45;\n     */\n    redoubt: number;\n    /**\n     * @generated from protobuf field: int32 combat_expertise = 46;\n     */\n    combatExpertise: number;\n    /**\n     * @generated from protobuf field: int32 touched_by_the_light = 47;\n     */\n    touchedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool avengers_shield = 48;\n     */\n    avengersShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 49;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 50;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 51;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 52;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 deflection = 53;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 benediction = 54;\n     */\n    benediction: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgements = 55;\n     */\n    improvedJudgements: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_crusader = 56;\n     */\n    heartOfTheCrusader: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_might = 57;\n     */\n    improvedBlessingOfMight: number;\n    /**\n     * @generated from protobuf field: int32 vindication = 58;\n     */\n    vindication: number;\n    /**\n     * @generated from protobuf field: int32 conviction = 59;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool seal_of_command = 60;\n     */\n    sealOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 61;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 eye_for_an_eye = 62;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 sanctity_of_battle = 63;\n     */\n    sanctityOfBattle: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 64;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 65;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 66;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: int32 vengeance = 67;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 68;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 69;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: bool repentance = 70;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_wise = 71;\n     */\n    judgementsOfTheWise: number;\n    /**\n     * @generated from protobuf field: int32 fanaticism = 72;\n     */\n    fanaticism: number;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 73;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 swift_retribution = 74;\n     */\n    swiftRetribution: number;\n    /**\n     * @generated from protobuf field: bool crusader_strike = 75;\n     */\n    crusaderStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 sheath_of_light = 76;\n     */\n    sheathOfLight: number;\n    /**\n     * @generated from protobuf field: int32 righteous_vengeance = 77;\n     */\n    righteousVengeance: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 78;\n     */\n    divineStorm: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation rotation = 1;\n     */\n    rotation?: RetributionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: int32 exo_slack = 1;\n     */\n    exoSlack: number;\n    /**\n     * @generated from protobuf field: int32 cons_slack = 2;\n     */\n    consSlack: number;\n    /**\n     * @generated from protobuf field: double divine_plea_percentage = 3;\n     */\n    divinePleaPercentage: number;\n    /**\n     * @generated from protobuf field: int32 holy_wrath_threshold = 4;\n     */\n    holyWrathThreshold: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_cast_sequence = 10;\n     */\n    customCastSequence?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation.RotationType type = 9;\n     */\n    type: RetributionPaladin_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool use_divine_plea = 11;\n     */\n    useDivinePlea: boolean;\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.SpellOption\n */\nexport enum RetributionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: DivineStorm = 2;\n     */\n    DivineStorm = 2,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 3;\n     */\n    HammerOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: Consecration = 4;\n     */\n    Consecration = 4,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 5;\n     */\n    HolyWrath = 5,\n    /**\n     * @generated from protobuf enum value: CrusaderStrike = 6;\n     */\n    CrusaderStrike = 6,\n    /**\n     * @generated from protobuf enum value: Exorcism = 7;\n     */\n    Exorcism = 7,\n    /**\n     * @generated from protobuf enum value: DivinePlea = 8;\n     */\n    DivinePlea = 8\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.RotationType\n */\nexport enum RetributionPaladin_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Standard = 1;\n     */\n    Standard = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2,\n    /**\n     * @generated from protobuf enum value: CastSequence = 3;\n     */\n    CastSequence = 3\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Rotation rotation = 1;\n     */\n    rotation?: ProtectionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: bool prioritize_holy_shield = 1;\n     */\n    prioritizeHolyShield: boolean;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 2;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.ProtectionPaladin.Rotation.SpellOption\n */\nexport enum ProtectionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 2;\n     */\n    HammerOfWrath = 2,\n    /**\n     * @generated from protobuf enum value: Consecration = 3;\n     */\n    Consecration = 3,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 4;\n     */\n    HolyWrath = 4,\n    /**\n     * @generated from protobuf enum value: Exorcism = 5;\n     */\n    Exorcism = 5,\n    /**\n     * @generated from protobuf enum value: ShieldOfRighteousness = 6;\n     */\n    ShieldOfRighteousness = 6,\n    /**\n     * @generated from protobuf enum value: AvengersShield = 7;\n     */\n    AvengersShield = 7,\n    /**\n     * @generated from protobuf enum value: HammerOfTheRighteous = 8;\n     */\n    HammerOfTheRighteous = 8\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengerSShield = 41101;\n     */\n    GlyphOfAvengerSShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengingWrath = 41107;\n     */\n    GlyphOfAvengingWrath = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineStorm = 45743;\n     */\n    GlyphOfDivineStorm = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashOfLight = 41105;\n     */\n    GlyphOfFlashOfLight = 41105,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyLight = 41106;\n     */\n    GlyphOfHolyLight = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousDefense = 41100;\n     */\n    GlyphOfRighteousDefense = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfCommand = 41094;\n     */\n    GlyphOfSealOfCommand = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfLight = 41110;\n     */\n    GlyphOfSealOfLight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfRighteousness = 43868;\n     */\n    GlyphOfSealOfRighteousness = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfVengeance = 43869;\n     */\n    GlyphOfSealOfVengeance = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfWisdom = 41109;\n     */\n    GlyphOfSealOfWisdom = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfRighteousness = 45744;\n     */\n    GlyphOfShieldOfRighteousness = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritualAttunement = 41096;\n     */\n    GlyphOfSpiritualAttunement = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfWisdom = 43366;\n     */\n    GlyphOfBlessingOfWisdom = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfSenseUndead = 43368;\n     */\n    GlyphOfSenseUndead = 43368,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWise = 43369;\n     */\n    GlyphOfTheWise = 43369\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2,\n    /**\n     * @generated from protobuf enum value: BlessingOfSalvation = 3;\n     */\n    BlessingOfSalvation = 3,\n    /**\n     * @generated from protobuf enum value: BlessingOfWisdom = 4;\n     */\n    BlessingOfWisdom = 4,\n    /**\n     * @generated from protobuf enum value: BlessingOfSanctuary = 5;\n     */\n    BlessingOfSanctuary = 5,\n    /**\n     * @generated from protobuf enum value: BlessingOfLight = 6;\n     */\n    BlessingOfLight = 6\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"spiritual_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"healing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"divine_intellect\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"unyielding_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"illumination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_lay_on_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_concentration_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_blessing_of_wisdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"blessed_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"pure_of_heart\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"sanctified_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"purifying_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"holy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"lights_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"holy_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"sacred_cleansing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"holy_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"divine_illumination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"stoicism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"divine_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_righteous_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"divine_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_devotion_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"spiritual_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"ardent_defender\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"redoubt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"combat_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"touched_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"avengers_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"benediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"improved_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_blessing_of_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vindication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"seal_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"sanctity_of_battle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"fanaticism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"swift_retribution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"crusader_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"sheath_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"righteous_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { spiritualFocus: 0, sealsOfThePure: 0, healingLight: 0, divineIntellect: 0, unyieldingFaith: 0, auraMastery: false, illumination: 0, improvedLayOnHands: 0, improvedConcentrationAura: 0, improvedBlessingOfWisdom: 0, blessedHands: 0, pureOfHeart: 0, divineFavor: false, sanctifiedLight: 0, purifyingPower: 0, holyPower: 0, lightsGrace: 0, holyShock: false, blessedLife: 0, sacredCleansing: 0, holyGuidance: 0, divineIllumination: false, judgementsOfThePure: 0, infusionOfLight: 0, enlightenedJudgements: 0, beaconOfLight: false, divinity: 0, divineStrength: 0, stoicism: 0, guardiansFavor: 0, anticipation: 0, divineSacrifice: false, improvedRighteousFury: 0, toughness: 0, divineGuardian: 0, improvedHammerOfJustice: 0, improvedDevotionAura: 0, blessingOfSanctuary: false, reckoning: 0, sacredDuty: 0, oneHandedWeaponSpecialization: 0, spiritualAttunement: 0, holyShield: false, ardentDefender: 0, redoubt: 0, combatExpertise: 0, touchedByTheLight: 0, avengersShield: false, guardedByTheLight: 0, shieldOfTheTemplar: 0, judgementsOfTheJust: 0, hammerOfTheRighteous: false, deflection: 0, benediction: 0, improvedJudgements: 0, heartOfTheCrusader: 0, improvedBlessingOfMight: 0, vindication: 0, conviction: 0, sealOfCommand: false, pursuitOfJustice: 0, eyeForAnEye: 0, sanctityOfBattle: 0, crusade: 0, twoHandedWeaponSpecialization: 0, sanctifiedRetribution: false, vengeance: 0, divinePurpose: 0, theArtOfWar: 0, repentance: false, judgementsOfTheWise: 0, fanaticism: 0, sanctifiedWrath: 0, swiftRetribution: 0, crusaderStrike: false, sheathOfLight: 0, righteousVengeance: 0, divineStorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spiritual_focus */ 1:\n                    message.spiritualFocus = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 2:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 healing_light */ 3:\n                    message.healingLight = reader.int32();\n                    break;\n                case /* int32 divine_intellect */ 4:\n                    message.divineIntellect = reader.int32();\n                    break;\n                case /* int32 unyielding_faith */ 5:\n                    message.unyieldingFaith = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 6:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 illumination */ 7:\n                    message.illumination = reader.int32();\n                    break;\n                case /* int32 improved_lay_on_hands */ 8:\n                    message.improvedLayOnHands = reader.int32();\n                    break;\n                case /* int32 improved_concentration_aura */ 9:\n                    message.improvedConcentrationAura = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_wisdom */ 10:\n                    message.improvedBlessingOfWisdom = reader.int32();\n                    break;\n                case /* int32 blessed_hands */ 11:\n                    message.blessedHands = reader.int32();\n                    break;\n                case /* int32 pure_of_heart */ 12:\n                    message.pureOfHeart = reader.int32();\n                    break;\n                case /* bool divine_favor */ 13:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 sanctified_light */ 14:\n                    message.sanctifiedLight = reader.int32();\n                    break;\n                case /* int32 purifying_power */ 15:\n                    message.purifyingPower = reader.int32();\n                    break;\n                case /* int32 holy_power */ 16:\n                    message.holyPower = reader.int32();\n                    break;\n                case /* int32 lights_grace */ 17:\n                    message.lightsGrace = reader.int32();\n                    break;\n                case /* bool holy_shock */ 18:\n                    message.holyShock = reader.bool();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* int32 sacred_cleansing */ 20:\n                    message.sacredCleansing = reader.int32();\n                    break;\n                case /* int32 holy_guidance */ 21:\n                    message.holyGuidance = reader.int32();\n                    break;\n                case /* bool divine_illumination */ 22:\n                    message.divineIllumination = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_pure */ 23:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 infusion_of_light */ 24:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 25:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 26:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 divinity */ 27:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 divine_strength */ 28:\n                    message.divineStrength = reader.int32();\n                    break;\n                case /* int32 stoicism */ 29:\n                    message.stoicism = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 30:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 anticipation */ 31:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool divine_sacrifice */ 32:\n                    message.divineSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_righteous_fury */ 33:\n                    message.improvedRighteousFury = reader.int32();\n                    break;\n                case /* int32 toughness */ 34:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 divine_guardian */ 35:\n                    message.divineGuardian = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 36:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 improved_devotion_aura */ 37:\n                    message.improvedDevotionAura = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 38:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* int32 reckoning */ 39:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* int32 sacred_duty */ 40:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 41:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 spiritual_attunement */ 42:\n                    message.spiritualAttunement = reader.int32();\n                    break;\n                case /* bool holy_shield */ 43:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 ardent_defender */ 44:\n                    message.ardentDefender = reader.int32();\n                    break;\n                case /* int32 redoubt */ 45:\n                    message.redoubt = reader.int32();\n                    break;\n                case /* int32 combat_expertise */ 46:\n                    message.combatExpertise = reader.int32();\n                    break;\n                case /* int32 touched_by_the_light */ 47:\n                    message.touchedByTheLight = reader.int32();\n                    break;\n                case /* bool avengers_shield */ 48:\n                    message.avengersShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 49:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 50:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 51:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 52:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 deflection */ 53:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 benediction */ 54:\n                    message.benediction = reader.int32();\n                    break;\n                case /* int32 improved_judgements */ 55:\n                    message.improvedJudgements = reader.int32();\n                    break;\n                case /* int32 heart_of_the_crusader */ 56:\n                    message.heartOfTheCrusader = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_might */ 57:\n                    message.improvedBlessingOfMight = reader.int32();\n                    break;\n                case /* int32 vindication */ 58:\n                    message.vindication = reader.int32();\n                    break;\n                case /* int32 conviction */ 59:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool seal_of_command */ 60:\n                    message.sealOfCommand = reader.bool();\n                    break;\n                case /* int32 pursuit_of_justice */ 61:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* int32 eye_for_an_eye */ 62:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 sanctity_of_battle */ 63:\n                    message.sanctityOfBattle = reader.int32();\n                    break;\n                case /* int32 crusade */ 64:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 65:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool sanctified_retribution */ 66:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* int32 vengeance */ 67:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 divine_purpose */ 68:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 the_art_of_war */ 69:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* bool repentance */ 70:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_wise */ 71:\n                    message.judgementsOfTheWise = reader.int32();\n                    break;\n                case /* int32 fanaticism */ 72:\n                    message.fanaticism = reader.int32();\n                    break;\n                case /* int32 sanctified_wrath */ 73:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 swift_retribution */ 74:\n                    message.swiftRetribution = reader.int32();\n                    break;\n                case /* bool crusader_strike */ 75:\n                    message.crusaderStrike = reader.bool();\n                    break;\n                case /* int32 sheath_of_light */ 76:\n                    message.sheathOfLight = reader.int32();\n                    break;\n                case /* int32 righteous_vengeance */ 77:\n                    message.righteousVengeance = reader.int32();\n                    break;\n                case /* bool divine_storm */ 78:\n                    message.divineStorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spiritual_focus = 1; */\n        if (message.spiritualFocus !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spiritualFocus);\n        /* int32 seals_of_the_pure = 2; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(2, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 healing_light = 3; */\n        if (message.healingLight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.healingLight);\n        /* int32 divine_intellect = 4; */\n        if (message.divineIntellect !== 0)\n            writer.tag(4, WireType.Varint).int32(message.divineIntellect);\n        /* int32 unyielding_faith = 5; */\n        if (message.unyieldingFaith !== 0)\n            writer.tag(5, WireType.Varint).int32(message.unyieldingFaith);\n        /* bool aura_mastery = 6; */\n        if (message.auraMastery !== false)\n            writer.tag(6, WireType.Varint).bool(message.auraMastery);\n        /* int32 illumination = 7; */\n        if (message.illumination !== 0)\n            writer.tag(7, WireType.Varint).int32(message.illumination);\n        /* int32 improved_lay_on_hands = 8; */\n        if (message.improvedLayOnHands !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedLayOnHands);\n        /* int32 improved_concentration_aura = 9; */\n        if (message.improvedConcentrationAura !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedConcentrationAura);\n        /* int32 improved_blessing_of_wisdom = 10; */\n        if (message.improvedBlessingOfWisdom !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedBlessingOfWisdom);\n        /* int32 blessed_hands = 11; */\n        if (message.blessedHands !== 0)\n            writer.tag(11, WireType.Varint).int32(message.blessedHands);\n        /* int32 pure_of_heart = 12; */\n        if (message.pureOfHeart !== 0)\n            writer.tag(12, WireType.Varint).int32(message.pureOfHeart);\n        /* bool divine_favor = 13; */\n        if (message.divineFavor !== false)\n            writer.tag(13, WireType.Varint).bool(message.divineFavor);\n        /* int32 sanctified_light = 14; */\n        if (message.sanctifiedLight !== 0)\n            writer.tag(14, WireType.Varint).int32(message.sanctifiedLight);\n        /* int32 purifying_power = 15; */\n        if (message.purifyingPower !== 0)\n            writer.tag(15, WireType.Varint).int32(message.purifyingPower);\n        /* int32 holy_power = 16; */\n        if (message.holyPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.holyPower);\n        /* int32 lights_grace = 17; */\n        if (message.lightsGrace !== 0)\n            writer.tag(17, WireType.Varint).int32(message.lightsGrace);\n        /* bool holy_shock = 18; */\n        if (message.holyShock !== false)\n            writer.tag(18, WireType.Varint).bool(message.holyShock);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* int32 sacred_cleansing = 20; */\n        if (message.sacredCleansing !== 0)\n            writer.tag(20, WireType.Varint).int32(message.sacredCleansing);\n        /* int32 holy_guidance = 21; */\n        if (message.holyGuidance !== 0)\n            writer.tag(21, WireType.Varint).int32(message.holyGuidance);\n        /* bool divine_illumination = 22; */\n        if (message.divineIllumination !== false)\n            writer.tag(22, WireType.Varint).bool(message.divineIllumination);\n        /* int32 judgements_of_the_pure = 23; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(23, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 infusion_of_light = 24; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 enlightened_judgements = 25; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(25, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 26; */\n        if (message.beaconOfLight !== false)\n            writer.tag(26, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 divinity = 27; */\n        if (message.divinity !== 0)\n            writer.tag(27, WireType.Varint).int32(message.divinity);\n        /* int32 divine_strength = 28; */\n        if (message.divineStrength !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineStrength);\n        /* int32 stoicism = 29; */\n        if (message.stoicism !== 0)\n            writer.tag(29, WireType.Varint).int32(message.stoicism);\n        /* int32 guardians_favor = 30; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(30, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 anticipation = 31; */\n        if (message.anticipation !== 0)\n            writer.tag(31, WireType.Varint).int32(message.anticipation);\n        /* bool divine_sacrifice = 32; */\n        if (message.divineSacrifice !== false)\n            writer.tag(32, WireType.Varint).bool(message.divineSacrifice);\n        /* int32 improved_righteous_fury = 33; */\n        if (message.improvedRighteousFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedRighteousFury);\n        /* int32 toughness = 34; */\n        if (message.toughness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.toughness);\n        /* int32 divine_guardian = 35; */\n        if (message.divineGuardian !== 0)\n            writer.tag(35, WireType.Varint).int32(message.divineGuardian);\n        /* int32 improved_hammer_of_justice = 36; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 improved_devotion_aura = 37; */\n        if (message.improvedDevotionAura !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedDevotionAura);\n        /* bool blessing_of_sanctuary = 38; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(38, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* int32 reckoning = 39; */\n        if (message.reckoning !== 0)\n            writer.tag(39, WireType.Varint).int32(message.reckoning);\n        /* int32 sacred_duty = 40; */\n        if (message.sacredDuty !== 0)\n            writer.tag(40, WireType.Varint).int32(message.sacredDuty);\n        /* int32 one_handed_weapon_specialization = 41; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 spiritual_attunement = 42; */\n        if (message.spiritualAttunement !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualAttunement);\n        /* bool holy_shield = 43; */\n        if (message.holyShield !== false)\n            writer.tag(43, WireType.Varint).bool(message.holyShield);\n        /* int32 ardent_defender = 44; */\n        if (message.ardentDefender !== 0)\n            writer.tag(44, WireType.Varint).int32(message.ardentDefender);\n        /* int32 redoubt = 45; */\n        if (message.redoubt !== 0)\n            writer.tag(45, WireType.Varint).int32(message.redoubt);\n        /* int32 combat_expertise = 46; */\n        if (message.combatExpertise !== 0)\n            writer.tag(46, WireType.Varint).int32(message.combatExpertise);\n        /* int32 touched_by_the_light = 47; */\n        if (message.touchedByTheLight !== 0)\n            writer.tag(47, WireType.Varint).int32(message.touchedByTheLight);\n        /* bool avengers_shield = 48; */\n        if (message.avengersShield !== false)\n            writer.tag(48, WireType.Varint).bool(message.avengersShield);\n        /* int32 guarded_by_the_light = 49; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(49, WireType.Varint).int32(message.guardedByTheLight);\n        /* int32 shield_of_the_templar = 50; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* int32 judgements_of_the_just = 51; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(51, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* bool hammer_of_the_righteous = 52; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(52, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 deflection = 53; */\n        if (message.deflection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.deflection);\n        /* int32 benediction = 54; */\n        if (message.benediction !== 0)\n            writer.tag(54, WireType.Varint).int32(message.benediction);\n        /* int32 improved_judgements = 55; */\n        if (message.improvedJudgements !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedJudgements);\n        /* int32 heart_of_the_crusader = 56; */\n        if (message.heartOfTheCrusader !== 0)\n            writer.tag(56, WireType.Varint).int32(message.heartOfTheCrusader);\n        /* int32 improved_blessing_of_might = 57; */\n        if (message.improvedBlessingOfMight !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedBlessingOfMight);\n        /* int32 vindication = 58; */\n        if (message.vindication !== 0)\n            writer.tag(58, WireType.Varint).int32(message.vindication);\n        /* int32 conviction = 59; */\n        if (message.conviction !== 0)\n            writer.tag(59, WireType.Varint).int32(message.conviction);\n        /* bool seal_of_command = 60; */\n        if (message.sealOfCommand !== false)\n            writer.tag(60, WireType.Varint).bool(message.sealOfCommand);\n        /* int32 pursuit_of_justice = 61; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(61, WireType.Varint).int32(message.pursuitOfJustice);\n        /* int32 eye_for_an_eye = 62; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(62, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 sanctity_of_battle = 63; */\n        if (message.sanctityOfBattle !== 0)\n            writer.tag(63, WireType.Varint).int32(message.sanctityOfBattle);\n        /* int32 crusade = 64; */\n        if (message.crusade !== 0)\n            writer.tag(64, WireType.Varint).int32(message.crusade);\n        /* int32 two_handed_weapon_specialization = 65; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(65, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool sanctified_retribution = 66; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(66, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* int32 vengeance = 67; */\n        if (message.vengeance !== 0)\n            writer.tag(67, WireType.Varint).int32(message.vengeance);\n        /* int32 divine_purpose = 68; */\n        if (message.divinePurpose !== 0)\n            writer.tag(68, WireType.Varint).int32(message.divinePurpose);\n        /* int32 the_art_of_war = 69; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(69, WireType.Varint).int32(message.theArtOfWar);\n        /* bool repentance = 70; */\n        if (message.repentance !== false)\n            writer.tag(70, WireType.Varint).bool(message.repentance);\n        /* int32 judgements_of_the_wise = 71; */\n        if (message.judgementsOfTheWise !== 0)\n            writer.tag(71, WireType.Varint).int32(message.judgementsOfTheWise);\n        /* int32 fanaticism = 72; */\n        if (message.fanaticism !== 0)\n            writer.tag(72, WireType.Varint).int32(message.fanaticism);\n        /* int32 sanctified_wrath = 73; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(73, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 swift_retribution = 74; */\n        if (message.swiftRetribution !== 0)\n            writer.tag(74, WireType.Varint).int32(message.swiftRetribution);\n        /* bool crusader_strike = 75; */\n        if (message.crusaderStrike !== false)\n            writer.tag(75, WireType.Varint).bool(message.crusaderStrike);\n        /* int32 sheath_of_light = 76; */\n        if (message.sheathOfLight !== 0)\n            writer.tag(76, WireType.Varint).int32(message.sheathOfLight);\n        /* int32 righteous_vengeance = 77; */\n        if (message.righteousVengeance !== 0)\n            writer.tag(77, WireType.Varint).int32(message.righteousVengeance);\n        /* bool divine_storm = 78; */\n        if (message.divineStorm !== false)\n            writer.tag(78, WireType.Varint).bool(message.divineStorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RetributionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Rotation rotation */ 1:\n                    message.rotation = RetributionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            RetributionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", [\n            { no: 1, name: \"exo_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"cons_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"divine_plea_percentage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"holy_wrath_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 10, name: \"custom_cast_sequence\", kind: \"message\", T: () => CustomRotation },\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RetributionPaladin.Rotation.RotationType\", RetributionPaladin_Rotation_RotationType] },\n            { no: 11, name: \"use_divine_plea\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = { exoSlack: 0, consSlack: 0, divinePleaPercentage: 0, holyWrathThreshold: 0, type: 0, useDivinePlea: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 exo_slack */ 1:\n                    message.exoSlack = reader.int32();\n                    break;\n                case /* int32 cons_slack */ 2:\n                    message.consSlack = reader.int32();\n                    break;\n                case /* double divine_plea_percentage */ 3:\n                    message.divinePleaPercentage = reader.double();\n                    break;\n                case /* int32 holy_wrath_threshold */ 4:\n                    message.holyWrathThreshold = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* proto.CustomRotation custom_cast_sequence */ 10:\n                    message.customCastSequence = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customCastSequence);\n                    break;\n                case /* proto.RetributionPaladin.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_divine_plea */ 11:\n                    message.useDivinePlea = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 exo_slack = 1; */\n        if (message.exoSlack !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exoSlack);\n        /* int32 cons_slack = 2; */\n        if (message.consSlack !== 0)\n            writer.tag(2, WireType.Varint).int32(message.consSlack);\n        /* double divine_plea_percentage = 3; */\n        if (message.divinePleaPercentage !== 0)\n            writer.tag(3, WireType.Bit64).double(message.divinePleaPercentage);\n        /* int32 holy_wrath_threshold = 4; */\n        if (message.holyWrathThreshold !== 0)\n            writer.tag(4, WireType.Varint).int32(message.holyWrathThreshold);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CustomRotation custom_cast_sequence = 10; */\n        if (message.customCastSequence)\n            CustomRotation.internalBinaryWrite(message.customCastSequence, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* bool use_divine_plea = 11; */\n        if (message.useDivinePlea !== false)\n            writer.tag(11, WireType.Varint).bool(message.useDivinePlea);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Rotation rotation */ 1:\n                    message.rotation = ProtectionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", [\n            { no: 1, name: \"prioritize_holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = { prioritizeHolyShield: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool prioritize_holy_shield */ 1:\n                    message.prioritizeHolyShield = reader.bool();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 2:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool prioritize_holy_shield = 1; */\n        if (message.prioritizeHolyShield !== false)\n            writer.tag(1, WireType.Varint).bool(message.prioritizeHolyShield);\n        /* proto.CustomRotation custom_rotation = 2; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_subtlety = 1;\n     */\n    arcaneSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 arcane_focus = 2;\n     */\n    arcaneFocus: number;\n    /**\n     * @generated from protobuf field: int32 arcane_stability = 3;\n     */\n    arcaneStability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_fortitude = 4;\n     */\n    arcaneFortitude: number;\n    /**\n     * @generated from protobuf field: int32 magic_absorption = 5;\n     */\n    magicAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_concentration = 6;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 magic_attunement = 7;\n     */\n    magicAttunement: number;\n    /**\n     * @generated from protobuf field: int32 spell_impact = 8;\n     */\n    spellImpact: number;\n    /**\n     * @generated from protobuf field: int32 student_of_the_mind = 9;\n     */\n    studentOfTheMind: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 10;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_shielding = 11;\n     */\n    arcaneShielding: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 12;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 arcane_meditation = 13;\n     */\n    arcaneMeditation: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 14;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 15;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 16;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_mind = 17;\n     */\n    arcaneMind: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 18;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 arcane_instability = 19;\n     */\n    arcaneInstability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 20;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: int32 arcane_empowerment = 21;\n     */\n    arcaneEmpowerment: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 22;\n     */\n    arcanePower: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 23;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 24;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: int32 mind_mastery = 25;\n     */\n    mindMastery: number;\n    /**\n     * @generated from protobuf field: bool slow = 26;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 27;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 28;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 spell_power = 29;\n     */\n    spellPower: number;\n    /**\n     * @generated from protobuf field: bool arcane_barrage = 30;\n     */\n    arcaneBarrage: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 improved_fire_blast = 31;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 incineration = 32;\n     */\n    incineration: number;\n    /**\n     * @generated from protobuf field: int32 improved_fireball = 33;\n     */\n    improvedFireball: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 34;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 burning_determination = 35;\n     */\n    burningDetermination: number;\n    /**\n     * @generated from protobuf field: int32 world_in_flames = 36;\n     */\n    worldInFlames: number;\n    /**\n     * @generated from protobuf field: int32 flame_throwing = 37;\n     */\n    flameThrowing: number;\n    /**\n     * @generated from protobuf field: int32 impact = 38;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: bool pyroblast = 39;\n     */\n    pyroblast: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 40;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 41;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: int32 molten_shields = 42;\n     */\n    moltenShields: number;\n    /**\n     * @generated from protobuf field: int32 master_of_elements = 43;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 playing_with_fire = 44;\n     */\n    playingWithFire: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 45;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 46;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 47;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 48;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 49;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: bool combustion = 50;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 51;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 fiery_payback = 52;\n     */\n    fieryPayback: number;\n    /**\n     * @generated from protobuf field: int32 empowered_fire = 53;\n     */\n    empoweredFire: number;\n    /**\n     * @generated from protobuf field: int32 firestarter = 54;\n     */\n    firestarter: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 55;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 hot_streak = 56;\n     */\n    hotStreak: number;\n    /**\n     * @generated from protobuf field: int32 burnout = 57;\n     */\n    burnout: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 58;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 frostbite = 59;\n     */\n    frostbite: number;\n    /**\n     * @generated from protobuf field: int32 improved_frostbolt = 60;\n     */\n    improvedFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 61;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 62;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: int32 frost_warding = 63;\n     */\n    frostWarding: number;\n    /**\n     * @generated from protobuf field: int32 precision = 64;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 65;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 66;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 67;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blizzard = 68;\n     */\n    improvedBlizzard: number;\n    /**\n     * @generated from protobuf field: int32 arctic_reach = 69;\n     */\n    arcticReach: number;\n    /**\n     * @generated from protobuf field: int32 frost_channeling = 70;\n     */\n    frostChanneling: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 71;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 72;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 73;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 frozen_core = 74;\n     */\n    frozenCore: number;\n    /**\n     * @generated from protobuf field: int32 cold_as_ice = 75;\n     */\n    coldAsIce: number;\n    /**\n     * @generated from protobuf field: int32 winters_chill = 76;\n     */\n    wintersChill: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 77;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 78;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 arctic_winds = 79;\n     */\n    arcticWinds: number;\n    /**\n     * @generated from protobuf field: int32 empowered_frostbolt = 80;\n     */\n    empoweredFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 81;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 82;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: bool summon_water_elemental = 83;\n     */\n    summonWaterElemental: boolean;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 84;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: int32 chilled_to_the_bone = 85;\n     */\n    chilledToTheBone: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 86;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.Mage\n */\nexport interface Mage {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation rotation = 1;\n     */\n    rotation?: Mage_Rotation;\n    /**\n     * @generated from protobuf field: proto.MageTalents talents = 2;\n     */\n    talents?: MageTalents;\n    /**\n     * @generated from protobuf field: proto.Mage.Options options = 3;\n     */\n    options?: Mage_Options;\n}\n/**\n * @generated from protobuf message proto.Mage.Rotation\n */\nexport interface Mage_Rotation {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.Type type = 1;\n     */\n    type: Mage_Rotation_Type;\n    /**\n     * Arcane Options.\n     *\n     * @generated from protobuf field: int32 min_blast_before_missiles = 2;\n     */\n    minBlastBeforeMissiles: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_missiles_gamble = 8;\n     */\n    num4StackBlastsToMissilesGamble: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_early_missiles = 9;\n     */\n    num4StackBlastsToEarlyMissiles: number;\n    /**\n     * @generated from protobuf field: int32 extra_blasts_during_first_ap = 10;\n     */\n    extraBlastsDuringFirstAp: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3;\n     */\n    primaryFireSpell: Mage_Rotation_PrimaryFireSpell;\n    /**\n     * @generated from protobuf field: bool maintain_improved_scorch = 4;\n     */\n    maintainImprovedScorch: boolean;\n    /**\n     * @generated from protobuf field: int32 num_extra_targets = 5;\n     */\n    numExtraTargets: number;\n    /**\n     * @generated from protobuf field: bool optimize_cds_for_execute = 11;\n     */\n    optimizeCdsForExecute: boolean;\n    /**\n     * @generated from protobuf field: int32 cqs_latency = 12;\n     */\n    cqsLatency: number;\n    /**\n     * @generated from protobuf field: bool lb_before_hotstreak = 13;\n     */\n    lbBeforeHotstreak: boolean;\n    /**\n     * Frost Options.\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: double water_elemental_disobey_chance = 6;\n     */\n    waterElementalDisobeyChance: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.AoeRotation aoe = 7;\n     */\n    aoe: Mage_Rotation_AoeRotation;\n}\n/**\n * Just used for controlling which options are displayed in the UI. Is not\n * used by the sim.\n *\n * @generated from protobuf enum proto.Mage.Rotation.Type\n */\nexport enum Mage_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Arcane = 0;\n     */\n    Arcane = 0,\n    /**\n     * @generated from protobuf enum value: Fire = 1;\n     */\n    Fire = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3\n}\n/**\n * Fire Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.PrimaryFireSpell\n */\nexport enum Mage_Rotation_PrimaryFireSpell {\n    /**\n     * @generated from protobuf enum value: Fireball = 0;\n     */\n    Fireball = 0,\n    /**\n     * @generated from protobuf enum value: FrostfireBolt = 1;\n     */\n    FrostfireBolt = 1\n}\n/**\n * Aoe Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.AoeRotation\n */\nexport enum Mage_Rotation_AoeRotation {\n    /**\n     * @generated from protobuf enum value: ArcaneExplosion = 0;\n     */\n    ArcaneExplosion = 0,\n    /**\n     * @generated from protobuf enum value: Flamestrike = 1;\n     */\n    Flamestrike = 1,\n    /**\n     * @generated from protobuf enum value: Blizzard = 2;\n     */\n    Blizzard = 2\n}\n/**\n * @generated from protobuf message proto.Mage.Options\n */\nexport interface Mage_Options {\n    /**\n     * @generated from protobuf field: proto.Mage.Options.ArmorType armor = 1;\n     */\n    armor: Mage_Options_ArmorType;\n    /**\n     * Number of Evocation ticks to use. If 0, use all of them.\n     *\n     * @generated from protobuf field: int32 evocation_ticks = 2;\n     */\n    evocationTicks: number;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 3;\n     */\n    focusMagicPercentUptime: number;\n}\n/**\n * @generated from protobuf enum proto.Mage.Options.ArmorType\n */\nexport enum Mage_Options_ArmorType {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: MageArmor = 1;\n     */\n    MageArmor = 1,\n    /**\n     * @generated from protobuf enum value: MoltenArmor = 2;\n     */\n    MoltenArmor = 2\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneExplosion = 42734;\n     */\n    GlyphOfArcaneExplosion = 42734,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfEternalWater = 50045;\n     */\n    GlyphOfEternalWater = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireBlast = 42740;\n     */\n    GlyphOfFireBlast = 42740,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceArmor = 42743;\n     */\n    GlyphOfIceArmor = 42743,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 45737;\n     */\n    GlyphOfLivingBomb = 45737,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaGem = 42750;\n     */\n    GlyphOfManaGem = 42750,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfRemoveCurse = 42753;\n     */\n    GlyphOfRemoveCurse = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfScorch = 42747;\n     */\n    GlyphOfScorch = 42747,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterElemental = 42754;\n     */\n    GlyphOfWaterElemental = 42754\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneIntellect = 43339;\n     */\n    GlyphOfArcaneIntellect = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireWard = 43357;\n     */\n    GlyphOfFireWard = 43357,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 43359;\n     */\n    GlyphOfFrostArmor = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostWard = 43360;\n     */\n    GlyphOfFrostWard = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"arcane_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"arcane_stability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"arcane_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"magic_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"magic_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spell_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"student_of_the_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"arcane_shielding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"arcane_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"arcane_instability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"arcane_empowerment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"mind_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"spell_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"incineration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_fireball\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"burning_determination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"world_in_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"flame_throwing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"pyroblast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"molten_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"playing_with_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"fiery_payback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"empowered_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"firestarter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"burnout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"frostbite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"frost_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"improved_blizzard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"arctic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"frost_channeling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"frozen_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"cold_as_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"winters_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"arctic_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"empowered_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"summon_water_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"chilled_to_the_bone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneSubtlety: 0, arcaneFocus: 0, arcaneStability: 0, arcaneFortitude: 0, magicAbsorption: 0, arcaneConcentration: 0, magicAttunement: 0, spellImpact: 0, studentOfTheMind: 0, focusMagic: false, arcaneShielding: 0, improvedCounterspell: 0, arcaneMeditation: 0, tormentTheWeak: 0, improvedBlink: 0, presenceOfMind: false, arcaneMind: 0, prismaticCloak: 0, arcaneInstability: 0, arcanePotency: 0, arcaneEmpowerment: 0, arcanePower: false, incantersAbsorption: 0, arcaneFlows: 0, mindMastery: 0, slow: false, missileBarrage: 0, netherwindPresence: 0, spellPower: 0, arcaneBarrage: false, improvedFireBlast: 0, incineration: 0, improvedFireball: 0, ignite: 0, burningDetermination: 0, worldInFlames: 0, flameThrowing: 0, impact: 0, pyroblast: false, burningSoul: 0, improvedScorch: 0, moltenShields: 0, masterOfElements: 0, playingWithFire: 0, criticalMass: 0, blastWave: false, blazingSpeed: 0, firePower: 0, pyromaniac: 0, combustion: false, moltenFury: 0, fieryPayback: 0, empoweredFire: 0, firestarter: 0, dragonsBreath: false, hotStreak: 0, burnout: 0, livingBomb: false, frostbite: 0, improvedFrostbolt: 0, iceFloes: 0, iceShards: 0, frostWarding: 0, precision: 0, permafrost: 0, piercingIce: 0, icyVeins: false, improvedBlizzard: 0, arcticReach: 0, frostChanneling: 0, shatter: 0, coldSnap: false, improvedConeOfCold: 0, frozenCore: 0, coldAsIce: 0, wintersChill: 0, shatteredBarrier: 0, iceBarrier: false, arcticWinds: 0, empoweredFrostbolt: 0, fingersOfFrost: 0, brainFreeze: 0, summonWaterElemental: false, enduringWinter: 0, chilledToTheBone: 0, deepFreeze: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_subtlety */ 1:\n                    message.arcaneSubtlety = reader.int32();\n                    break;\n                case /* int32 arcane_focus */ 2:\n                    message.arcaneFocus = reader.int32();\n                    break;\n                case /* int32 arcane_stability */ 3:\n                    message.arcaneStability = reader.int32();\n                    break;\n                case /* int32 arcane_fortitude */ 4:\n                    message.arcaneFortitude = reader.int32();\n                    break;\n                case /* int32 magic_absorption */ 5:\n                    message.magicAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_concentration */ 6:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 magic_attunement */ 7:\n                    message.magicAttunement = reader.int32();\n                    break;\n                case /* int32 spell_impact */ 8:\n                    message.spellImpact = reader.int32();\n                    break;\n                case /* int32 student_of_the_mind */ 9:\n                    message.studentOfTheMind = reader.int32();\n                    break;\n                case /* bool focus_magic */ 10:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 arcane_shielding */ 11:\n                    message.arcaneShielding = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 12:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 arcane_meditation */ 13:\n                    message.arcaneMeditation = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 14:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 15:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 16:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 arcane_mind */ 17:\n                    message.arcaneMind = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 18:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 arcane_instability */ 19:\n                    message.arcaneInstability = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 20:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* int32 arcane_empowerment */ 21:\n                    message.arcaneEmpowerment = reader.int32();\n                    break;\n                case /* bool arcane_power */ 22:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 23:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 24:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* int32 mind_mastery */ 25:\n                    message.mindMastery = reader.int32();\n                    break;\n                case /* bool slow */ 26:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 27:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 28:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 spell_power */ 29:\n                    message.spellPower = reader.int32();\n                    break;\n                case /* bool arcane_barrage */ 30:\n                    message.arcaneBarrage = reader.bool();\n                    break;\n                case /* int32 improved_fire_blast */ 31:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 incineration */ 32:\n                    message.incineration = reader.int32();\n                    break;\n                case /* int32 improved_fireball */ 33:\n                    message.improvedFireball = reader.int32();\n                    break;\n                case /* int32 ignite */ 34:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 burning_determination */ 35:\n                    message.burningDetermination = reader.int32();\n                    break;\n                case /* int32 world_in_flames */ 36:\n                    message.worldInFlames = reader.int32();\n                    break;\n                case /* int32 flame_throwing */ 37:\n                    message.flameThrowing = reader.int32();\n                    break;\n                case /* int32 impact */ 38:\n                    message.impact = reader.int32();\n                    break;\n                case /* bool pyroblast */ 39:\n                    message.pyroblast = reader.bool();\n                    break;\n                case /* int32 burning_soul */ 40:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_scorch */ 41:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* int32 molten_shields */ 42:\n                    message.moltenShields = reader.int32();\n                    break;\n                case /* int32 master_of_elements */ 43:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 playing_with_fire */ 44:\n                    message.playingWithFire = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 45:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool blast_wave */ 46:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* int32 blazing_speed */ 47:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 fire_power */ 48:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 49:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* bool combustion */ 50:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 51:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 fiery_payback */ 52:\n                    message.fieryPayback = reader.int32();\n                    break;\n                case /* int32 empowered_fire */ 53:\n                    message.empoweredFire = reader.int32();\n                    break;\n                case /* int32 firestarter */ 54:\n                    message.firestarter = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 55:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 hot_streak */ 56:\n                    message.hotStreak = reader.int32();\n                    break;\n                case /* int32 burnout */ 57:\n                    message.burnout = reader.int32();\n                    break;\n                case /* bool living_bomb */ 58:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 frostbite */ 59:\n                    message.frostbite = reader.int32();\n                    break;\n                case /* int32 improved_frostbolt */ 60:\n                    message.improvedFrostbolt = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 61:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 62:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* int32 frost_warding */ 63:\n                    message.frostWarding = reader.int32();\n                    break;\n                case /* int32 precision */ 64:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 permafrost */ 65:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 66:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* bool icy_veins */ 67:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 improved_blizzard */ 68:\n                    message.improvedBlizzard = reader.int32();\n                    break;\n                case /* int32 arctic_reach */ 69:\n                    message.arcticReach = reader.int32();\n                    break;\n                case /* int32 frost_channeling */ 70:\n                    message.frostChanneling = reader.int32();\n                    break;\n                case /* int32 shatter */ 71:\n                    message.shatter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 72:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 improved_cone_of_cold */ 73:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 frozen_core */ 74:\n                    message.frozenCore = reader.int32();\n                    break;\n                case /* int32 cold_as_ice */ 75:\n                    message.coldAsIce = reader.int32();\n                    break;\n                case /* int32 winters_chill */ 76:\n                    message.wintersChill = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 77:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 78:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 arctic_winds */ 79:\n                    message.arcticWinds = reader.int32();\n                    break;\n                case /* int32 empowered_frostbolt */ 80:\n                    message.empoweredFrostbolt = reader.int32();\n                    break;\n                case /* int32 fingers_of_frost */ 81:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 brain_freeze */ 82:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* bool summon_water_elemental */ 83:\n                    message.summonWaterElemental = reader.bool();\n                    break;\n                case /* int32 enduring_winter */ 84:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* int32 chilled_to_the_bone */ 85:\n                    message.chilledToTheBone = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 86:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_subtlety = 1; */\n        if (message.arcaneSubtlety !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneSubtlety);\n        /* int32 arcane_focus = 2; */\n        if (message.arcaneFocus !== 0)\n            writer.tag(2, WireType.Varint).int32(message.arcaneFocus);\n        /* int32 arcane_stability = 3; */\n        if (message.arcaneStability !== 0)\n            writer.tag(3, WireType.Varint).int32(message.arcaneStability);\n        /* int32 arcane_fortitude = 4; */\n        if (message.arcaneFortitude !== 0)\n            writer.tag(4, WireType.Varint).int32(message.arcaneFortitude);\n        /* int32 magic_absorption = 5; */\n        if (message.magicAbsorption !== 0)\n            writer.tag(5, WireType.Varint).int32(message.magicAbsorption);\n        /* int32 arcane_concentration = 6; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(6, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 magic_attunement = 7; */\n        if (message.magicAttunement !== 0)\n            writer.tag(7, WireType.Varint).int32(message.magicAttunement);\n        /* int32 spell_impact = 8; */\n        if (message.spellImpact !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spellImpact);\n        /* int32 student_of_the_mind = 9; */\n        if (message.studentOfTheMind !== 0)\n            writer.tag(9, WireType.Varint).int32(message.studentOfTheMind);\n        /* bool focus_magic = 10; */\n        if (message.focusMagic !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusMagic);\n        /* int32 arcane_shielding = 11; */\n        if (message.arcaneShielding !== 0)\n            writer.tag(11, WireType.Varint).int32(message.arcaneShielding);\n        /* int32 improved_counterspell = 12; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 arcane_meditation = 13; */\n        if (message.arcaneMeditation !== 0)\n            writer.tag(13, WireType.Varint).int32(message.arcaneMeditation);\n        /* int32 torment_the_weak = 14; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 improved_blink = 15; */\n        if (message.improvedBlink !== 0)\n            writer.tag(15, WireType.Varint).int32(message.improvedBlink);\n        /* bool presence_of_mind = 16; */\n        if (message.presenceOfMind !== false)\n            writer.tag(16, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 arcane_mind = 17; */\n        if (message.arcaneMind !== 0)\n            writer.tag(17, WireType.Varint).int32(message.arcaneMind);\n        /* int32 prismatic_cloak = 18; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(18, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 arcane_instability = 19; */\n        if (message.arcaneInstability !== 0)\n            writer.tag(19, WireType.Varint).int32(message.arcaneInstability);\n        /* int32 arcane_potency = 20; */\n        if (message.arcanePotency !== 0)\n            writer.tag(20, WireType.Varint).int32(message.arcanePotency);\n        /* int32 arcane_empowerment = 21; */\n        if (message.arcaneEmpowerment !== 0)\n            writer.tag(21, WireType.Varint).int32(message.arcaneEmpowerment);\n        /* bool arcane_power = 22; */\n        if (message.arcanePower !== false)\n            writer.tag(22, WireType.Varint).bool(message.arcanePower);\n        /* int32 incanters_absorption = 23; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(23, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 arcane_flows = 24; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(24, WireType.Varint).int32(message.arcaneFlows);\n        /* int32 mind_mastery = 25; */\n        if (message.mindMastery !== 0)\n            writer.tag(25, WireType.Varint).int32(message.mindMastery);\n        /* bool slow = 26; */\n        if (message.slow !== false)\n            writer.tag(26, WireType.Varint).bool(message.slow);\n        /* int32 missile_barrage = 27; */\n        if (message.missileBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.missileBarrage);\n        /* int32 netherwind_presence = 28; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(28, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 spell_power = 29; */\n        if (message.spellPower !== 0)\n            writer.tag(29, WireType.Varint).int32(message.spellPower);\n        /* bool arcane_barrage = 30; */\n        if (message.arcaneBarrage !== false)\n            writer.tag(30, WireType.Varint).bool(message.arcaneBarrage);\n        /* int32 improved_fire_blast = 31; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 incineration = 32; */\n        if (message.incineration !== 0)\n            writer.tag(32, WireType.Varint).int32(message.incineration);\n        /* int32 improved_fireball = 33; */\n        if (message.improvedFireball !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedFireball);\n        /* int32 ignite = 34; */\n        if (message.ignite !== 0)\n            writer.tag(34, WireType.Varint).int32(message.ignite);\n        /* int32 burning_determination = 35; */\n        if (message.burningDetermination !== 0)\n            writer.tag(35, WireType.Varint).int32(message.burningDetermination);\n        /* int32 world_in_flames = 36; */\n        if (message.worldInFlames !== 0)\n            writer.tag(36, WireType.Varint).int32(message.worldInFlames);\n        /* int32 flame_throwing = 37; */\n        if (message.flameThrowing !== 0)\n            writer.tag(37, WireType.Varint).int32(message.flameThrowing);\n        /* int32 impact = 38; */\n        if (message.impact !== 0)\n            writer.tag(38, WireType.Varint).int32(message.impact);\n        /* bool pyroblast = 39; */\n        if (message.pyroblast !== false)\n            writer.tag(39, WireType.Varint).bool(message.pyroblast);\n        /* int32 burning_soul = 40; */\n        if (message.burningSoul !== 0)\n            writer.tag(40, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_scorch = 41; */\n        if (message.improvedScorch !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedScorch);\n        /* int32 molten_shields = 42; */\n        if (message.moltenShields !== 0)\n            writer.tag(42, WireType.Varint).int32(message.moltenShields);\n        /* int32 master_of_elements = 43; */\n        if (message.masterOfElements !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterOfElements);\n        /* int32 playing_with_fire = 44; */\n        if (message.playingWithFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.playingWithFire);\n        /* int32 critical_mass = 45; */\n        if (message.criticalMass !== 0)\n            writer.tag(45, WireType.Varint).int32(message.criticalMass);\n        /* bool blast_wave = 46; */\n        if (message.blastWave !== false)\n            writer.tag(46, WireType.Varint).bool(message.blastWave);\n        /* int32 blazing_speed = 47; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 fire_power = 48; */\n        if (message.firePower !== 0)\n            writer.tag(48, WireType.Varint).int32(message.firePower);\n        /* int32 pyromaniac = 49; */\n        if (message.pyromaniac !== 0)\n            writer.tag(49, WireType.Varint).int32(message.pyromaniac);\n        /* bool combustion = 50; */\n        if (message.combustion !== false)\n            writer.tag(50, WireType.Varint).bool(message.combustion);\n        /* int32 molten_fury = 51; */\n        if (message.moltenFury !== 0)\n            writer.tag(51, WireType.Varint).int32(message.moltenFury);\n        /* int32 fiery_payback = 52; */\n        if (message.fieryPayback !== 0)\n            writer.tag(52, WireType.Varint).int32(message.fieryPayback);\n        /* int32 empowered_fire = 53; */\n        if (message.empoweredFire !== 0)\n            writer.tag(53, WireType.Varint).int32(message.empoweredFire);\n        /* int32 firestarter = 54; */\n        if (message.firestarter !== 0)\n            writer.tag(54, WireType.Varint).int32(message.firestarter);\n        /* bool dragons_breath = 55; */\n        if (message.dragonsBreath !== false)\n            writer.tag(55, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 hot_streak = 56; */\n        if (message.hotStreak !== 0)\n            writer.tag(56, WireType.Varint).int32(message.hotStreak);\n        /* int32 burnout = 57; */\n        if (message.burnout !== 0)\n            writer.tag(57, WireType.Varint).int32(message.burnout);\n        /* bool living_bomb = 58; */\n        if (message.livingBomb !== false)\n            writer.tag(58, WireType.Varint).bool(message.livingBomb);\n        /* int32 frostbite = 59; */\n        if (message.frostbite !== 0)\n            writer.tag(59, WireType.Varint).int32(message.frostbite);\n        /* int32 improved_frostbolt = 60; */\n        if (message.improvedFrostbolt !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedFrostbolt);\n        /* int32 ice_floes = 61; */\n        if (message.iceFloes !== 0)\n            writer.tag(61, WireType.Varint).int32(message.iceFloes);\n        /* int32 ice_shards = 62; */\n        if (message.iceShards !== 0)\n            writer.tag(62, WireType.Varint).int32(message.iceShards);\n        /* int32 frost_warding = 63; */\n        if (message.frostWarding !== 0)\n            writer.tag(63, WireType.Varint).int32(message.frostWarding);\n        /* int32 precision = 64; */\n        if (message.precision !== 0)\n            writer.tag(64, WireType.Varint).int32(message.precision);\n        /* int32 permafrost = 65; */\n        if (message.permafrost !== 0)\n            writer.tag(65, WireType.Varint).int32(message.permafrost);\n        /* int32 piercing_ice = 66; */\n        if (message.piercingIce !== 0)\n            writer.tag(66, WireType.Varint).int32(message.piercingIce);\n        /* bool icy_veins = 67; */\n        if (message.icyVeins !== false)\n            writer.tag(67, WireType.Varint).bool(message.icyVeins);\n        /* int32 improved_blizzard = 68; */\n        if (message.improvedBlizzard !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedBlizzard);\n        /* int32 arctic_reach = 69; */\n        if (message.arcticReach !== 0)\n            writer.tag(69, WireType.Varint).int32(message.arcticReach);\n        /* int32 frost_channeling = 70; */\n        if (message.frostChanneling !== 0)\n            writer.tag(70, WireType.Varint).int32(message.frostChanneling);\n        /* int32 shatter = 71; */\n        if (message.shatter !== 0)\n            writer.tag(71, WireType.Varint).int32(message.shatter);\n        /* bool cold_snap = 72; */\n        if (message.coldSnap !== false)\n            writer.tag(72, WireType.Varint).bool(message.coldSnap);\n        /* int32 improved_cone_of_cold = 73; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 frozen_core = 74; */\n        if (message.frozenCore !== 0)\n            writer.tag(74, WireType.Varint).int32(message.frozenCore);\n        /* int32 cold_as_ice = 75; */\n        if (message.coldAsIce !== 0)\n            writer.tag(75, WireType.Varint).int32(message.coldAsIce);\n        /* int32 winters_chill = 76; */\n        if (message.wintersChill !== 0)\n            writer.tag(76, WireType.Varint).int32(message.wintersChill);\n        /* int32 shattered_barrier = 77; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(77, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 78; */\n        if (message.iceBarrier !== false)\n            writer.tag(78, WireType.Varint).bool(message.iceBarrier);\n        /* int32 arctic_winds = 79; */\n        if (message.arcticWinds !== 0)\n            writer.tag(79, WireType.Varint).int32(message.arcticWinds);\n        /* int32 empowered_frostbolt = 80; */\n        if (message.empoweredFrostbolt !== 0)\n            writer.tag(80, WireType.Varint).int32(message.empoweredFrostbolt);\n        /* int32 fingers_of_frost = 81; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(81, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 brain_freeze = 82; */\n        if (message.brainFreeze !== 0)\n            writer.tag(82, WireType.Varint).int32(message.brainFreeze);\n        /* bool summon_water_elemental = 83; */\n        if (message.summonWaterElemental !== false)\n            writer.tag(83, WireType.Varint).bool(message.summonWaterElemental);\n        /* int32 enduring_winter = 84; */\n        if (message.enduringWinter !== 0)\n            writer.tag(84, WireType.Varint).int32(message.enduringWinter);\n        /* int32 chilled_to_the_bone = 85; */\n        if (message.chilledToTheBone !== 0)\n            writer.tag(85, WireType.Varint).int32(message.chilledToTheBone);\n        /* bool deep_freeze = 86; */\n        if (message.deepFreeze !== false)\n            writer.tag(86, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage$Type extends MessageType<Mage> {\n    constructor() {\n        super(\"proto.Mage\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Mage_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => MageTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Mage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Mage>): Mage {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage): Mage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation rotation */ 1:\n                    message.rotation = Mage_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.MageTalents talents */ 2:\n                    message.talents = MageTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Mage.Options options */ 3:\n                    message.options = Mage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation rotation = 1; */\n        if (message.rotation)\n            Mage_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.MageTalents talents = 2; */\n        if (message.talents)\n            MageTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage.Options options = 3; */\n        if (message.options)\n            Mage_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage\n */\nexport const Mage = new Mage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Rotation$Type extends MessageType<Mage_Rotation> {\n    constructor() {\n        super(\"proto.Mage.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.Type\", Mage_Rotation_Type] },\n            { no: 2, name: \"min_blast_before_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"num_4_stack_blasts_to_missiles_gamble\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"num_4_stack_blasts_to_early_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"extra_blasts_during_first_ap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"primary_fire_spell\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.PrimaryFireSpell\", Mage_Rotation_PrimaryFireSpell] },\n            { no: 4, name: \"maintain_improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"num_extra_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"optimize_cds_for_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"cqs_latency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"lb_before_hotstreak\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"aoe\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.AoeRotation\", Mage_Rotation_AoeRotation] }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Rotation>): Mage_Rotation {\n        const message = { type: 0, minBlastBeforeMissiles: 0, num4StackBlastsToMissilesGamble: 0, num4StackBlastsToEarlyMissiles: 0, extraBlastsDuringFirstAp: 0, primaryFireSpell: 0, maintainImprovedScorch: false, numExtraTargets: 0, optimizeCdsForExecute: false, cqsLatency: 0, lbBeforeHotstreak: false, waterElementalDisobeyChance: 0, aoe: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Rotation): Mage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 min_blast_before_missiles */ 2:\n                    message.minBlastBeforeMissiles = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_missiles_gamble */ 8:\n                    message.num4StackBlastsToMissilesGamble = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_early_missiles */ 9:\n                    message.num4StackBlastsToEarlyMissiles = reader.int32();\n                    break;\n                case /* int32 extra_blasts_during_first_ap */ 10:\n                    message.extraBlastsDuringFirstAp = reader.int32();\n                    break;\n                case /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell */ 3:\n                    message.primaryFireSpell = reader.int32();\n                    break;\n                case /* bool maintain_improved_scorch */ 4:\n                    message.maintainImprovedScorch = reader.bool();\n                    break;\n                case /* int32 num_extra_targets */ 5:\n                    message.numExtraTargets = reader.int32();\n                    break;\n                case /* bool optimize_cds_for_execute */ 11:\n                    message.optimizeCdsForExecute = reader.bool();\n                    break;\n                case /* int32 cqs_latency */ 12:\n                    message.cqsLatency = reader.int32();\n                    break;\n                case /* bool lb_before_hotstreak */ 13:\n                    message.lbBeforeHotstreak = reader.bool();\n                    break;\n                case /* double water_elemental_disobey_chance */ 6:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                case /* proto.Mage.Rotation.AoeRotation aoe */ 7:\n                    message.aoe = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* int32 min_blast_before_missiles = 2; */\n        if (message.minBlastBeforeMissiles !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minBlastBeforeMissiles);\n        /* int32 num_4_stack_blasts_to_missiles_gamble = 8; */\n        if (message.num4StackBlastsToMissilesGamble !== 0)\n            writer.tag(8, WireType.Varint).int32(message.num4StackBlastsToMissilesGamble);\n        /* int32 num_4_stack_blasts_to_early_missiles = 9; */\n        if (message.num4StackBlastsToEarlyMissiles !== 0)\n            writer.tag(9, WireType.Varint).int32(message.num4StackBlastsToEarlyMissiles);\n        /* int32 extra_blasts_during_first_ap = 10; */\n        if (message.extraBlastsDuringFirstAp !== 0)\n            writer.tag(10, WireType.Varint).int32(message.extraBlastsDuringFirstAp);\n        /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3; */\n        if (message.primaryFireSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primaryFireSpell);\n        /* bool maintain_improved_scorch = 4; */\n        if (message.maintainImprovedScorch !== false)\n            writer.tag(4, WireType.Varint).bool(message.maintainImprovedScorch);\n        /* int32 num_extra_targets = 5; */\n        if (message.numExtraTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.numExtraTargets);\n        /* bool optimize_cds_for_execute = 11; */\n        if (message.optimizeCdsForExecute !== false)\n            writer.tag(11, WireType.Varint).bool(message.optimizeCdsForExecute);\n        /* int32 cqs_latency = 12; */\n        if (message.cqsLatency !== 0)\n            writer.tag(12, WireType.Varint).int32(message.cqsLatency);\n        /* bool lb_before_hotstreak = 13; */\n        if (message.lbBeforeHotstreak !== false)\n            writer.tag(13, WireType.Varint).bool(message.lbBeforeHotstreak);\n        /* double water_elemental_disobey_chance = 6; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(6, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        /* proto.Mage.Rotation.AoeRotation aoe = 7; */\n        if (message.aoe !== 0)\n            writer.tag(7, WireType.Varint).int32(message.aoe);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Rotation\n */\nexport const Mage_Rotation = new Mage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Options$Type extends MessageType<Mage_Options> {\n    constructor() {\n        super(\"proto.Mage.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Mage.Options.ArmorType\", Mage_Options_ArmorType] },\n            { no: 2, name: \"evocation_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Options>): Mage_Options {\n        const message = { armor: 0, evocationTicks: 0, focusMagicPercentUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Options): Mage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Options.ArmorType armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* int32 evocation_ticks */ 2:\n                    message.evocationTicks = reader.int32();\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 3:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Options.ArmorType armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* int32 evocation_ticks = 2; */\n        if (message.evocationTicks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.evocationTicks);\n        /* int32 focus_magic_percent_uptime = 3; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusMagicPercentUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Options\n */\nexport const Mage_Options = new Mage_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_aspect_of_the_hawk = 1;\n     */\n    improvedAspectOfTheHawk: number;\n    /**\n     * @generated from protobuf field: int32 endurance_training = 2;\n     */\n    enduranceTraining: number;\n    /**\n     * @generated from protobuf field: int32 focused_fire = 3;\n     */\n    focusedFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_aspect_of_the_monkey = 4;\n     */\n    improvedAspectOfTheMonkey: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 5;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 improved_revive_pet = 6;\n     */\n    improvedRevivePet: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 7;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: bool aspect_mastery = 8;\n     */\n    aspectMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_fury = 9;\n     */\n    unleashedFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 10;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 ferocity = 11;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 12;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: bool intimidation = 13;\n     */\n    intimidation: boolean;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 14;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 animal_handler = 15;\n     */\n    animalHandler: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 16;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 ferocious_inspiration = 17;\n     */\n    ferociousInspiration: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 18;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 catlike_reflexes = 19;\n     */\n    catlikeReflexes: number;\n    /**\n     * @generated from protobuf field: int32 invigoration = 20;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: int32 serpents_swiftness = 21;\n     */\n    serpentsSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 longevity = 22;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 23;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 24;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 25;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 26;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 improved_concussive_shot = 27;\n     */\n    improvedConcussiveShot: number;\n    /**\n     * @generated from protobuf field: int32 focused_aim = 28;\n     */\n    focusedAim: number;\n    /**\n     * @generated from protobuf field: int32 lethal_shots = 29;\n     */\n    lethalShots: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 30;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: int32 improved_hunters_mark = 31;\n     */\n    improvedHuntersMark: number;\n    /**\n     * @generated from protobuf field: int32 mortal_shots = 32;\n     */\n    mortalShots: number;\n    /**\n     * @generated from protobuf field: int32 go_for_the_throat = 33;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_shot = 34;\n     */\n    improvedArcaneShot: number;\n    /**\n     * @generated from protobuf field: bool aimed_shot = 35;\n     */\n    aimedShot: boolean;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 36;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 improved_stings = 37;\n     */\n    improvedStings: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 38;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 39;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: bool readiness = 40;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 barrage = 41;\n     */\n    barrage: number;\n    /**\n     * @generated from protobuf field: int32 combat_experience = 42;\n     */\n    combatExperience: number;\n    /**\n     * @generated from protobuf field: int32 ranged_weapon_specialization = 43;\n     */\n    rangedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 44;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 45;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_barrage = 46;\n     */\n    improvedBarrage: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 47;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 48;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 wild_quiver = 49;\n     */\n    wildQuiver: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 50;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 51;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 52;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 53;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 improved_tracking = 54;\n     */\n    improvedTracking: number;\n    /**\n     * @generated from protobuf field: int32 hawk_eye = 55;\n     */\n    hawkEye: number;\n    /**\n     * @generated from protobuf field: int32 savage_strikes = 56;\n     */\n    savageStrikes: number;\n    /**\n     * @generated from protobuf field: int32 surefooted = 57;\n     */\n    surefooted: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 58;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 59;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 survival_instincts = 60;\n     */\n    survivalInstincts: number;\n    /**\n     * @generated from protobuf field: int32 survivalist = 61;\n     */\n    survivalist: number;\n    /**\n     * @generated from protobuf field: bool scatter_shot = 62;\n     */\n    scatterShot: boolean;\n    /**\n     * @generated from protobuf field: int32 deflection = 63;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 64;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 65;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 66;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 hunter_vs_wild = 67;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 killer_instinct = 68;\n     */\n    killerInstinct: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 69;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 70;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 71;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 expose_weakness = 72;\n     */\n    exposeWeakness: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 73;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 74;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: int32 master_tactician = 75;\n     */\n    masterTactician: number;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 76;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 77;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 78;\n     */\n    blackArrow: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 79;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 hunting_party = 80;\n     */\n    huntingParty: number;\n    /**\n     * @generated from protobuf field: bool explosive_shot = 81;\n     */\n    explosiveShot: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: int32 cobra_reflexes = 1;\n     */\n    cobraReflexes: number;\n    /**\n     * @generated from protobuf field: bool dive = 2;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 5;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 6;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 7;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 8;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 11;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 12;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: int32 cornered = 13;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 14;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 15;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 16;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 17;\n     */\n    bullheaded: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 18;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 20;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 improved_cower = 21;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 22;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: bool heart_of_the_pheonix = 23;\n     */\n    heartOfThePheonix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 24;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: bool rabid = 25;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 26;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 27;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 28;\n     */\n    sharkAttack: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: bool charge = 29;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_rhino = 30;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 31;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 32;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 33;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: bool last_stand = 34;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 35;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 36;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 37;\n     */\n    silverback: number;\n}\n/**\n * @generated from protobuf message proto.Hunter\n */\nexport interface Hunter {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation rotation = 1;\n     */\n    rotation?: Hunter_Rotation;\n    /**\n     * @generated from protobuf field: proto.HunterTalents talents = 2;\n     */\n    talents?: HunterTalents;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options options = 3;\n     */\n    options?: Hunter_Options;\n}\n/**\n * @generated from protobuf message proto.Hunter.Rotation\n */\nexport interface Hunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.RotationType type = 9;\n     */\n    type: Hunter_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.StingType sting = 5;\n     */\n    sting: Hunter_Rotation_StingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 2;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.RotationType\n */\nexport enum Hunter_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.StingType\n */\nexport enum Hunter_Rotation_StingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.SpellOption\n */\nexport enum Hunter_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: SteadyShot = 1;\n     */\n    SteadyShot = 1,\n    /**\n     * @generated from protobuf enum value: ArcaneShot = 2;\n     */\n    ArcaneShot = 2,\n    /**\n     * @generated from protobuf enum value: AimedShot = 3;\n     */\n    AimedShot = 3,\n    /**\n     * @generated from protobuf enum value: MultiShot = 4;\n     */\n    MultiShot = 4,\n    /**\n     * @generated from protobuf enum value: SerpentStingSpell = 5;\n     */\n    SerpentStingSpell = 5,\n    /**\n     * @generated from protobuf enum value: ScorpidStingSpell = 6;\n     */\n    ScorpidStingSpell = 6,\n    /**\n     * @generated from protobuf enum value: KillShot = 7;\n     */\n    KillShot = 7,\n    /**\n     * @generated from protobuf enum value: BlackArrow = 8;\n     */\n    BlackArrow = 8,\n    /**\n     * @generated from protobuf enum value: ChimeraShot = 9;\n     */\n    ChimeraShot = 9,\n    /**\n     * @generated from protobuf enum value: ExplosiveShot = 10;\n     */\n    ExplosiveShot = 10,\n    /**\n     * @generated from protobuf enum value: ExplosiveTrap = 11;\n     */\n    ExplosiveTrap = 11,\n    /**\n     * @generated from protobuf enum value: Volley = 12;\n     */\n    Volley = 12\n}\n/**\n * @generated from protobuf message proto.Hunter.Options\n */\nexport interface Hunter_Options {\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.Ammo ammo = 1;\n     */\n    ammo: Hunter_Options_Ammo;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.PetType pet_type = 2;\n     */\n    petType: Hunter_Options_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 7;\n     */\n    sniperTrainingUptime: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 5;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.Ammo\n */\nexport enum Hunter_Options_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.PetType\n */\nexport enum Hunter_Options_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfTheViper = 42901;\n     */\n    GlyphOfAspectOfTheViper = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveTrap = 45733;\n     */\n    GlyphOfExplosiveTrap = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostTrap = 42906;\n     */\n    GlyphOfFrostTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfHuntersMark = 42907;\n     */\n    GlyphOfHuntersMark = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMultiShot = 42910;\n     */\n    GlyphOfMultiShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheBeast = 42899;\n     */\n    GlyphOfTheBeast = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheHawk = 42909;\n     */\n    GlyphOfTheHawk = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrueshotAura = 42915;\n     */\n    GlyphOfTrueshotAura = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfVolley = 42916;\n     */\n    GlyphOfVolley = 42916,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfMendPet = 43350;\n     */\n    GlyphOfMendPet = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfPossessedStrength = 43354;\n     */\n    GlyphOfPossessedStrength = 43354,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePack = 43355;\n     */\n    GlyphOfThePack = 43355\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_aspect_of_the_hawk\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"endurance_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focused_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_aspect_of_the_monkey\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_revive_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"aspect_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"unleashed_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"intimidation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"animal_handler\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"ferocious_inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"catlike_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"serpents_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"improved_concussive_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"focused_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"lethal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"mortal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"improved_arcane_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"aimed_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"combat_experience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"ranged_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"wild_quiver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"improved_tracking\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hawk_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"savage_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"surefooted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"survival_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"survivalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"scatter_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"killer_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"expose_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 74, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"master_tactician\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"hunting_party\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"explosive_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedAspectOfTheHawk: 0, enduranceTraining: 0, focusedFire: 0, improvedAspectOfTheMonkey: 0, thickHide: 0, improvedRevivePet: 0, pathfinding: 0, aspectMastery: false, unleashedFury: 0, improvedMendPet: 0, ferocity: 0, spiritBond: 0, intimidation: false, bestialDiscipline: 0, animalHandler: 0, frenzy: 0, ferociousInspiration: 0, bestialWrath: false, catlikeReflexes: 0, invigoration: 0, serpentsSwiftness: 0, longevity: 0, theBeastWithin: false, cobraStrikes: 0, kindredSpirits: 0, beastMastery: false, improvedConcussiveShot: 0, focusedAim: 0, lethalShots: 0, carefulAim: 0, improvedHuntersMark: 0, mortalShots: 0, goForTheThroat: 0, improvedArcaneShot: 0, aimedShot: false, rapidKilling: 0, improvedStings: 0, efficiency: 0, concussiveBarrage: 0, readiness: false, barrage: 0, combatExperience: 0, rangedWeaponSpecialization: 0, piercingShots: 0, trueshotAura: false, improvedBarrage: 0, masterMarksman: 0, rapidRecuperation: 0, wildQuiver: 0, silencingShot: false, improvedSteadyShot: 0, markedForDeath: 0, chimeraShot: false, improvedTracking: 0, hawkEye: 0, savageStrikes: 0, surefooted: 0, entrapment: 0, trapMastery: 0, survivalInstincts: 0, survivalist: 0, scatterShot: false, deflection: 0, survivalTactics: 0, tNT: 0, lockAndLoad: 0, hunterVsWild: 0, killerInstinct: 0, counterattack: false, lightningReflexes: 0, resourcefulness: 0, exposeWeakness: 0, wyvernSting: false, thrillOfTheHunt: 0, masterTactician: 0, noxiousStings: 0, pointOfNoEscape: 0, blackArrow: false, sniperTraining: 0, huntingParty: 0, explosiveShot: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_aspect_of_the_hawk */ 1:\n                    message.improvedAspectOfTheHawk = reader.int32();\n                    break;\n                case /* int32 endurance_training */ 2:\n                    message.enduranceTraining = reader.int32();\n                    break;\n                case /* int32 focused_fire */ 3:\n                    message.focusedFire = reader.int32();\n                    break;\n                case /* int32 improved_aspect_of_the_monkey */ 4:\n                    message.improvedAspectOfTheMonkey = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 5:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 improved_revive_pet */ 6:\n                    message.improvedRevivePet = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 7:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* bool aspect_mastery */ 8:\n                    message.aspectMastery = reader.bool();\n                    break;\n                case /* int32 unleashed_fury */ 9:\n                    message.unleashedFury = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 10:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 ferocity */ 11:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 12:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* bool intimidation */ 13:\n                    message.intimidation = reader.bool();\n                    break;\n                case /* int32 bestial_discipline */ 14:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 animal_handler */ 15:\n                    message.animalHandler = reader.int32();\n                    break;\n                case /* int32 frenzy */ 16:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 ferocious_inspiration */ 17:\n                    message.ferociousInspiration = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 18:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* int32 catlike_reflexes */ 19:\n                    message.catlikeReflexes = reader.int32();\n                    break;\n                case /* int32 invigoration */ 20:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* int32 serpents_swiftness */ 21:\n                    message.serpentsSwiftness = reader.int32();\n                    break;\n                case /* int32 longevity */ 22:\n                    message.longevity = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 23:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 cobra_strikes */ 24:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* int32 kindred_spirits */ 25:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 26:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 improved_concussive_shot */ 27:\n                    message.improvedConcussiveShot = reader.int32();\n                    break;\n                case /* int32 focused_aim */ 28:\n                    message.focusedAim = reader.int32();\n                    break;\n                case /* int32 lethal_shots */ 29:\n                    message.lethalShots = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 30:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* int32 improved_hunters_mark */ 31:\n                    message.improvedHuntersMark = reader.int32();\n                    break;\n                case /* int32 mortal_shots */ 32:\n                    message.mortalShots = reader.int32();\n                    break;\n                case /* int32 go_for_the_throat */ 33:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 improved_arcane_shot */ 34:\n                    message.improvedArcaneShot = reader.int32();\n                    break;\n                case /* bool aimed_shot */ 35:\n                    message.aimedShot = reader.bool();\n                    break;\n                case /* int32 rapid_killing */ 36:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 improved_stings */ 37:\n                    message.improvedStings = reader.int32();\n                    break;\n                case /* int32 efficiency */ 38:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 concussive_barrage */ 39:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* bool readiness */ 40:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 barrage */ 41:\n                    message.barrage = reader.int32();\n                    break;\n                case /* int32 combat_experience */ 42:\n                    message.combatExperience = reader.int32();\n                    break;\n                case /* int32 ranged_weapon_specialization */ 43:\n                    message.rangedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 44:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 45:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 improved_barrage */ 46:\n                    message.improvedBarrage = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 47:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 48:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 wild_quiver */ 49:\n                    message.wildQuiver = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 50:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 improved_steady_shot */ 51:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 52:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 53:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 improved_tracking */ 54:\n                    message.improvedTracking = reader.int32();\n                    break;\n                case /* int32 hawk_eye */ 55:\n                    message.hawkEye = reader.int32();\n                    break;\n                case /* int32 savage_strikes */ 56:\n                    message.savageStrikes = reader.int32();\n                    break;\n                case /* int32 surefooted */ 57:\n                    message.surefooted = reader.int32();\n                    break;\n                case /* int32 entrapment */ 58:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 59:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 survival_instincts */ 60:\n                    message.survivalInstincts = reader.int32();\n                    break;\n                case /* int32 survivalist */ 61:\n                    message.survivalist = reader.int32();\n                    break;\n                case /* bool scatter_shot */ 62:\n                    message.scatterShot = reader.bool();\n                    break;\n                case /* int32 deflection */ 63:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 64:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 65:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 lock_and_load */ 66:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 hunter_vs_wild */ 67:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 killer_instinct */ 68:\n                    message.killerInstinct = reader.int32();\n                    break;\n                case /* bool counterattack */ 69:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lightning_reflexes */ 70:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 71:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 expose_weakness */ 72:\n                    message.exposeWeakness = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 73:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 74:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* int32 master_tactician */ 75:\n                    message.masterTactician = reader.int32();\n                    break;\n                case /* int32 noxious_stings */ 76:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 77:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* bool black_arrow */ 78:\n                    message.blackArrow = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 79:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 hunting_party */ 80:\n                    message.huntingParty = reader.int32();\n                    break;\n                case /* bool explosive_shot */ 81:\n                    message.explosiveShot = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_aspect_of_the_hawk = 1; */\n        if (message.improvedAspectOfTheHawk !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedAspectOfTheHawk);\n        /* int32 endurance_training = 2; */\n        if (message.enduranceTraining !== 0)\n            writer.tag(2, WireType.Varint).int32(message.enduranceTraining);\n        /* int32 focused_fire = 3; */\n        if (message.focusedFire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusedFire);\n        /* int32 improved_aspect_of_the_monkey = 4; */\n        if (message.improvedAspectOfTheMonkey !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedAspectOfTheMonkey);\n        /* int32 thick_hide = 5; */\n        if (message.thickHide !== 0)\n            writer.tag(5, WireType.Varint).int32(message.thickHide);\n        /* int32 improved_revive_pet = 6; */\n        if (message.improvedRevivePet !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedRevivePet);\n        /* int32 pathfinding = 7; */\n        if (message.pathfinding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.pathfinding);\n        /* bool aspect_mastery = 8; */\n        if (message.aspectMastery !== false)\n            writer.tag(8, WireType.Varint).bool(message.aspectMastery);\n        /* int32 unleashed_fury = 9; */\n        if (message.unleashedFury !== 0)\n            writer.tag(9, WireType.Varint).int32(message.unleashedFury);\n        /* int32 improved_mend_pet = 10; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 ferocity = 11; */\n        if (message.ferocity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.ferocity);\n        /* int32 spirit_bond = 12; */\n        if (message.spiritBond !== 0)\n            writer.tag(12, WireType.Varint).int32(message.spiritBond);\n        /* bool intimidation = 13; */\n        if (message.intimidation !== false)\n            writer.tag(13, WireType.Varint).bool(message.intimidation);\n        /* int32 bestial_discipline = 14; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 animal_handler = 15; */\n        if (message.animalHandler !== 0)\n            writer.tag(15, WireType.Varint).int32(message.animalHandler);\n        /* int32 frenzy = 16; */\n        if (message.frenzy !== 0)\n            writer.tag(16, WireType.Varint).int32(message.frenzy);\n        /* int32 ferocious_inspiration = 17; */\n        if (message.ferociousInspiration !== 0)\n            writer.tag(17, WireType.Varint).int32(message.ferociousInspiration);\n        /* bool bestial_wrath = 18; */\n        if (message.bestialWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.bestialWrath);\n        /* int32 catlike_reflexes = 19; */\n        if (message.catlikeReflexes !== 0)\n            writer.tag(19, WireType.Varint).int32(message.catlikeReflexes);\n        /* int32 invigoration = 20; */\n        if (message.invigoration !== 0)\n            writer.tag(20, WireType.Varint).int32(message.invigoration);\n        /* int32 serpents_swiftness = 21; */\n        if (message.serpentsSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.serpentsSwiftness);\n        /* int32 longevity = 22; */\n        if (message.longevity !== 0)\n            writer.tag(22, WireType.Varint).int32(message.longevity);\n        /* bool the_beast_within = 23; */\n        if (message.theBeastWithin !== false)\n            writer.tag(23, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 cobra_strikes = 24; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(24, WireType.Varint).int32(message.cobraStrikes);\n        /* int32 kindred_spirits = 25; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(25, WireType.Varint).int32(message.kindredSpirits);\n        /* bool beast_mastery = 26; */\n        if (message.beastMastery !== false)\n            writer.tag(26, WireType.Varint).bool(message.beastMastery);\n        /* int32 improved_concussive_shot = 27; */\n        if (message.improvedConcussiveShot !== 0)\n            writer.tag(27, WireType.Varint).int32(message.improvedConcussiveShot);\n        /* int32 focused_aim = 28; */\n        if (message.focusedAim !== 0)\n            writer.tag(28, WireType.Varint).int32(message.focusedAim);\n        /* int32 lethal_shots = 29; */\n        if (message.lethalShots !== 0)\n            writer.tag(29, WireType.Varint).int32(message.lethalShots);\n        /* int32 careful_aim = 30; */\n        if (message.carefulAim !== 0)\n            writer.tag(30, WireType.Varint).int32(message.carefulAim);\n        /* int32 improved_hunters_mark = 31; */\n        if (message.improvedHuntersMark !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedHuntersMark);\n        /* int32 mortal_shots = 32; */\n        if (message.mortalShots !== 0)\n            writer.tag(32, WireType.Varint).int32(message.mortalShots);\n        /* int32 go_for_the_throat = 33; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(33, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 improved_arcane_shot = 34; */\n        if (message.improvedArcaneShot !== 0)\n            writer.tag(34, WireType.Varint).int32(message.improvedArcaneShot);\n        /* bool aimed_shot = 35; */\n        if (message.aimedShot !== false)\n            writer.tag(35, WireType.Varint).bool(message.aimedShot);\n        /* int32 rapid_killing = 36; */\n        if (message.rapidKilling !== 0)\n            writer.tag(36, WireType.Varint).int32(message.rapidKilling);\n        /* int32 improved_stings = 37; */\n        if (message.improvedStings !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedStings);\n        /* int32 efficiency = 38; */\n        if (message.efficiency !== 0)\n            writer.tag(38, WireType.Varint).int32(message.efficiency);\n        /* int32 concussive_barrage = 39; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(39, WireType.Varint).int32(message.concussiveBarrage);\n        /* bool readiness = 40; */\n        if (message.readiness !== false)\n            writer.tag(40, WireType.Varint).bool(message.readiness);\n        /* int32 barrage = 41; */\n        if (message.barrage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.barrage);\n        /* int32 combat_experience = 42; */\n        if (message.combatExperience !== 0)\n            writer.tag(42, WireType.Varint).int32(message.combatExperience);\n        /* int32 ranged_weapon_specialization = 43; */\n        if (message.rangedWeaponSpecialization !== 0)\n            writer.tag(43, WireType.Varint).int32(message.rangedWeaponSpecialization);\n        /* int32 piercing_shots = 44; */\n        if (message.piercingShots !== 0)\n            writer.tag(44, WireType.Varint).int32(message.piercingShots);\n        /* bool trueshot_aura = 45; */\n        if (message.trueshotAura !== false)\n            writer.tag(45, WireType.Varint).bool(message.trueshotAura);\n        /* int32 improved_barrage = 46; */\n        if (message.improvedBarrage !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedBarrage);\n        /* int32 master_marksman = 47; */\n        if (message.masterMarksman !== 0)\n            writer.tag(47, WireType.Varint).int32(message.masterMarksman);\n        /* int32 rapid_recuperation = 48; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(48, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 wild_quiver = 49; */\n        if (message.wildQuiver !== 0)\n            writer.tag(49, WireType.Varint).int32(message.wildQuiver);\n        /* bool silencing_shot = 50; */\n        if (message.silencingShot !== false)\n            writer.tag(50, WireType.Varint).bool(message.silencingShot);\n        /* int32 improved_steady_shot = 51; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 marked_for_death = 52; */\n        if (message.markedForDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 53; */\n        if (message.chimeraShot !== false)\n            writer.tag(53, WireType.Varint).bool(message.chimeraShot);\n        /* int32 improved_tracking = 54; */\n        if (message.improvedTracking !== 0)\n            writer.tag(54, WireType.Varint).int32(message.improvedTracking);\n        /* int32 hawk_eye = 55; */\n        if (message.hawkEye !== 0)\n            writer.tag(55, WireType.Varint).int32(message.hawkEye);\n        /* int32 savage_strikes = 56; */\n        if (message.savageStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.savageStrikes);\n        /* int32 surefooted = 57; */\n        if (message.surefooted !== 0)\n            writer.tag(57, WireType.Varint).int32(message.surefooted);\n        /* int32 entrapment = 58; */\n        if (message.entrapment !== 0)\n            writer.tag(58, WireType.Varint).int32(message.entrapment);\n        /* int32 trap_mastery = 59; */\n        if (message.trapMastery !== 0)\n            writer.tag(59, WireType.Varint).int32(message.trapMastery);\n        /* int32 survival_instincts = 60; */\n        if (message.survivalInstincts !== 0)\n            writer.tag(60, WireType.Varint).int32(message.survivalInstincts);\n        /* int32 survivalist = 61; */\n        if (message.survivalist !== 0)\n            writer.tag(61, WireType.Varint).int32(message.survivalist);\n        /* bool scatter_shot = 62; */\n        if (message.scatterShot !== false)\n            writer.tag(62, WireType.Varint).bool(message.scatterShot);\n        /* int32 deflection = 63; */\n        if (message.deflection !== 0)\n            writer.tag(63, WireType.Varint).int32(message.deflection);\n        /* int32 survival_tactics = 64; */\n        if (message.survivalTactics !== 0)\n            writer.tag(64, WireType.Varint).int32(message.survivalTactics);\n        /* int32 t_n_t = 65; */\n        if (message.tNT !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tNT);\n        /* int32 lock_and_load = 66; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(66, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 hunter_vs_wild = 67; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(67, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 killer_instinct = 68; */\n        if (message.killerInstinct !== 0)\n            writer.tag(68, WireType.Varint).int32(message.killerInstinct);\n        /* bool counterattack = 69; */\n        if (message.counterattack !== false)\n            writer.tag(69, WireType.Varint).bool(message.counterattack);\n        /* int32 lightning_reflexes = 70; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(70, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 resourcefulness = 71; */\n        if (message.resourcefulness !== 0)\n            writer.tag(71, WireType.Varint).int32(message.resourcefulness);\n        /* int32 expose_weakness = 72; */\n        if (message.exposeWeakness !== 0)\n            writer.tag(72, WireType.Varint).int32(message.exposeWeakness);\n        /* bool wyvern_sting = 73; */\n        if (message.wyvernSting !== false)\n            writer.tag(73, WireType.Varint).bool(message.wyvernSting);\n        /* int32 thrill_of_the_hunt = 74; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(74, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* int32 master_tactician = 75; */\n        if (message.masterTactician !== 0)\n            writer.tag(75, WireType.Varint).int32(message.masterTactician);\n        /* int32 noxious_stings = 76; */\n        if (message.noxiousStings !== 0)\n            writer.tag(76, WireType.Varint).int32(message.noxiousStings);\n        /* int32 point_of_no_escape = 77; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(77, WireType.Varint).int32(message.pointOfNoEscape);\n        /* bool black_arrow = 78; */\n        if (message.blackArrow !== false)\n            writer.tag(78, WireType.Varint).bool(message.blackArrow);\n        /* int32 sniper_training = 79; */\n        if (message.sniperTraining !== 0)\n            writer.tag(79, WireType.Varint).int32(message.sniperTraining);\n        /* int32 hunting_party = 80; */\n        if (message.huntingParty !== 0)\n            writer.tag(80, WireType.Varint).int32(message.huntingParty);\n        /* bool explosive_shot = 81; */\n        if (message.explosiveShot !== false)\n            writer.tag(81, WireType.Varint).bool(message.explosiveShot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"cobra_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"heart_of_the_pheonix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { cobraReflexes: 0, dive: false, greatStamina: 0, naturalArmor: 0, boarsSpeed: false, mobility: 0, owlsFocus: 0, spikedCollar: 0, cullingTheHerd: 0, lionhearted: 0, carrionFeeder: false, greatResistance: 0, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false, graceOfTheMantis: 0, wildHunt: 0, roarOfSacrifice: false, improvedCower: 0, bloodthirsty: 0, heartOfThePheonix: false, spidersBite: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, charge: false, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, lastStand: false, taunt: false, intervene: false, silverback: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 cobra_reflexes */ 1:\n                    message.cobraReflexes = reader.int32();\n                    break;\n                case /* bool dive */ 2:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* bool boars_speed */ 5:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 mobility */ 6:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 7:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 8:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 11:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 great_resistance */ 12:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* int32 cornered */ 13:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 14:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 15:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 16:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 17:\n                    message.bullheaded = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 18:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* bool roar_of_sacrifice */ 20:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_cower */ 21:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 22:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* bool heart_of_the_pheonix */ 23:\n                    message.heartOfThePheonix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 24:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* bool rabid */ 25:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 26:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 27:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 28:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* bool charge */ 29:\n                    message.charge = reader.bool();\n                    break;\n                case /* int32 blood_of_the_rhino */ 30:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 31:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 32:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 33:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* bool last_stand */ 34:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 35:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool intervene */ 36:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 37:\n                    message.silverback = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 cobra_reflexes = 1; */\n        if (message.cobraReflexes !== 0)\n            writer.tag(1, WireType.Varint).int32(message.cobraReflexes);\n        /* bool dive = 2; */\n        if (message.dive !== false)\n            writer.tag(2, WireType.Varint).bool(message.dive);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* bool boars_speed = 5; */\n        if (message.boarsSpeed !== false)\n            writer.tag(5, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 mobility = 6; */\n        if (message.mobility !== 0)\n            writer.tag(6, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 7; */\n        if (message.owlsFocus !== 0)\n            writer.tag(7, WireType.Varint).int32(message.owlsFocus);\n        /* int32 spiked_collar = 8; */\n        if (message.spikedCollar !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spikedCollar);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool carrion_feeder = 11; */\n        if (message.carrionFeeder !== false)\n            writer.tag(11, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 great_resistance = 12; */\n        if (message.greatResistance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.greatResistance);\n        /* int32 cornered = 13; */\n        if (message.cornered !== 0)\n            writer.tag(13, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 14; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 15; */\n        if (message.wolverineBite !== false)\n            writer.tag(15, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 16; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(16, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 17; */\n        if (message.bullheaded !== false)\n            writer.tag(17, WireType.Varint).bool(message.bullheaded);\n        /* int32 grace_of_the_mantis = 18; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(18, WireType.Varint).int32(message.graceOfTheMantis);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* bool roar_of_sacrifice = 20; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(20, WireType.Varint).bool(message.roarOfSacrifice);\n        /* int32 improved_cower = 21; */\n        if (message.improvedCower !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 22; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(22, WireType.Varint).int32(message.bloodthirsty);\n        /* bool heart_of_the_pheonix = 23; */\n        if (message.heartOfThePheonix !== false)\n            writer.tag(23, WireType.Varint).bool(message.heartOfThePheonix);\n        /* int32 spiders_bite = 24; */\n        if (message.spidersBite !== 0)\n            writer.tag(24, WireType.Varint).int32(message.spidersBite);\n        /* bool rabid = 25; */\n        if (message.rabid !== false)\n            writer.tag(25, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 26; */\n        if (message.lickYourWounds !== false)\n            writer.tag(26, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 27; */\n        if (message.callOfTheWild !== false)\n            writer.tag(27, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 28; */\n        if (message.sharkAttack !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sharkAttack);\n        /* bool charge = 29; */\n        if (message.charge !== false)\n            writer.tag(29, WireType.Varint).bool(message.charge);\n        /* int32 blood_of_the_rhino = 30; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(30, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 31; */\n        if (message.petBarding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 32; */\n        if (message.guardDog !== 0)\n            writer.tag(32, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 33; */\n        if (message.thunderstomp !== false)\n            writer.tag(33, WireType.Varint).bool(message.thunderstomp);\n        /* bool last_stand = 34; */\n        if (message.lastStand !== false)\n            writer.tag(34, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 35; */\n        if (message.taunt !== false)\n            writer.tag(35, WireType.Varint).bool(message.taunt);\n        /* bool intervene = 36; */\n        if (message.intervene !== false)\n            writer.tag(36, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 37; */\n        if (message.silverback !== 0)\n            writer.tag(37, WireType.Varint).int32(message.silverback);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter$Type extends MessageType<Hunter> {\n    constructor() {\n        super(\"proto.Hunter\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Hunter_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => HunterTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Hunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter>): Hunter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter): Hunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation rotation */ 1:\n                    message.rotation = Hunter_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.HunterTalents talents */ 2:\n                    message.talents = HunterTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Hunter.Options options */ 3:\n                    message.options = Hunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation rotation = 1; */\n        if (message.rotation)\n            Hunter_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HunterTalents talents = 2; */\n        if (message.talents)\n            HunterTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter.Options options = 3; */\n        if (message.options)\n            Hunter_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter\n */\nexport const Hunter = new Hunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Rotation$Type extends MessageType<Hunter_Rotation> {\n    constructor() {\n        super(\"proto.Hunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.RotationType\", Hunter_Rotation_RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.StingType\", Hunter_Rotation_StingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Rotation>): Hunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, timeToTrapWeaveMs: 0, viperStartManaPercent: 0, viperStopManaPercent: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Rotation): Hunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.Hunter.Rotation.StingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double time_to_trap_weave_ms */ 2:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.Hunter.Rotation.StingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double time_to_trap_weave_ms = 2; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(2, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Rotation\n */\nexport const Hunter_Rotation = new Hunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Options$Type extends MessageType<Hunter_Options> {\n    constructor() {\n        super(\"proto.Hunter.Options\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.Hunter.Options.Ammo\", Hunter_Options_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.Hunter.Options.PetType\", Hunter_Options_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Options>): Hunter_Options {\n        const message = { ammo: 0, petType: 0, petUptime: 0, sniperTrainingUptime: 0, useHuntersMark: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Options): Hunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Options.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.Hunter.Options.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double sniper_training_uptime */ 7:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 5:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Options.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.Hunter.Options.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double sniper_training_uptime = 7; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(7, WireType.Bit64).double(message.sniperTrainingUptime);\n        /* bool use_hunters_mark = 5; */\n        if (message.useHuntersMark !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Options\n */\nexport const Hunter_Options = new Hunter_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 starlight_wrath = 1;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 2;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 3;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 4;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 improved_moonfire = 5;\n     */\n    improvedMoonfire: number;\n    /**\n     * @generated from protobuf field: int32 brambles = 6;\n     */\n    brambles: number;\n    /**\n     * @generated from protobuf field: int32 natures_grace = 7;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: bool natures_splendor = 8;\n     */\n    naturesSplendor: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_reach = 9;\n     */\n    naturesReach: number;\n    /**\n     * @generated from protobuf field: int32 vengeance = 10;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 celestial_focus = 11;\n     */\n    celestialFocus: number;\n    /**\n     * @generated from protobuf field: int32 lunar_guidance = 12;\n     */\n    lunarGuidance: number;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 13;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_insect_swarm = 14;\n     */\n    improvedInsectSwarm: number;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 15;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: int32 moonfury = 16;\n     */\n    moonfury: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 17;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 18;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_moonkin_form = 19;\n     */\n    improvedMoonkinForm: number;\n    /**\n     * @generated from protobuf field: int32 improved_faerie_fire = 20;\n     */\n    improvedFaerieFire: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 21;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrath_of_cenarius = 22;\n     */\n    wrathOfCenarius: number;\n    /**\n     * @generated from protobuf field: int32 eclipse = 23;\n     */\n    eclipse: number;\n    /**\n     * @generated from protobuf field: bool typhoon = 24;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 25;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 26;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: int32 earth_and_moon = 27;\n     */\n    earthAndMoon: number;\n    /**\n     * @generated from protobuf field: bool starfall = 28;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 ferocity = 29;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 30;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 feral_instinct = 31;\n     */\n    feralInstinct: number;\n    /**\n     * @generated from protobuf field: int32 savage_fury = 32;\n     */\n    savageFury: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 33;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 feral_swiftness = 34;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 35;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 sharpened_claws = 36;\n     */\n    sharpenedClaws: number;\n    /**\n     * @generated from protobuf field: int32 shredding_attacks = 37;\n     */\n    shreddingAttacks: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 38;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 39;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 primal_precision = 40;\n     */\n    primalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 41;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 42;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 43;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 44;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 45;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 survival_of_the_fittest = 46;\n     */\n    survivalOfTheFittest: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 47;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_leader_of_the_pack = 48;\n     */\n    improvedLeaderOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 primal_tenacity = 49;\n     */\n    primalTenacity: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_pack = 50;\n     */\n    protectorOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 predatory_instincts = 51;\n     */\n    predatoryInstincts: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 52;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 53;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool mangle = 54;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mangle = 55;\n     */\n    improvedMangle: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 56;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool primal_gore = 57;\n     */\n    primalGore: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 58;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_mark_of_the_wild = 59;\n     */\n    improvedMarkOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 natures_focus = 60;\n     */\n    naturesFocus: number;\n    /**\n     * @generated from protobuf field: int32 furor = 61;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 62;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 subtlety = 63;\n     */\n    subtlety: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 64;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 65;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: bool omen_of_clarity = 66;\n     */\n    omenOfClarity: boolean;\n    /**\n     * @generated from protobuf field: int32 master_shapeshifter = 67;\n     */\n    masterShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 tranquil_spirit = 68;\n     */\n    tranquilSpirit: number;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 69;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 70;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 gift_of_nature = 71;\n     */\n    giftOfNature: number;\n    /**\n     * @generated from protobuf field: int32 improved_tranquility = 72;\n     */\n    improvedTranquility: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 73;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 74;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 living_spirit = 75;\n     */\n    livingSpirit: number;\n    /**\n     * @generated from protobuf field: bool swiftmend = 76;\n     */\n    swiftmend: boolean;\n    /**\n     * @generated from protobuf field: int32 natural_perfection = 77;\n     */\n    naturalPerfection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_rejuvenation = 78;\n     */\n    empoweredRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 79;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 80;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 81;\n     */\n    treeOfLife: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_tree_of_life = 82;\n     */\n    improvedTreeOfLife: number;\n    /**\n     * @generated from protobuf field: int32 improved_barkskin = 83;\n     */\n    improvedBarkskin: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 84;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 85;\n     */\n    wildGrowth: boolean;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation rotation = 1;\n     */\n    rotation?: BalanceDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.RotationType type = 1;\n     */\n    type: BalanceDruid_Rotation_RotationType;\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.RotationType\n */\nexport enum BalanceDruid_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: bool battle_res = 2;\n     */\n    battleRes: boolean;\n    /**\n     * @generated from protobuf field: bool use_is = 3;\n     */\n    useIs: boolean;\n    /**\n     * @generated from protobuf field: bool use_mf = 4;\n     */\n    useMf: boolean;\n    /**\n     * @generated from protobuf field: float mf_inside_eclipse_threshold = 5;\n     */\n    mfInsideEclipseThreshold: number;\n    /**\n     * @generated from protobuf field: float is_inside_eclipse_threshold = 6;\n     */\n    isInsideEclipseThreshold: number;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.FinishingMove finishing_move = 1;\n     */\n    finishingMove: FeralDruid_Rotation_FinishingMove;\n    /**\n     * @generated from protobuf field: bool mangle_trick = 2;\n     */\n    mangleTrick: boolean;\n    /**\n     * @generated from protobuf field: bool biteweave = 3;\n     */\n    biteweave: boolean;\n    /**\n     * @generated from protobuf field: bool ripweave = 8;\n     */\n    ripweave: boolean;\n    /**\n     * @generated from protobuf field: int32 rip_min_combo_points = 5;\n     */\n    ripMinComboPoints: number;\n    /**\n     * @generated from protobuf field: int32 bite_min_combo_points = 6;\n     */\n    biteMinComboPoints: number;\n    /**\n     * @generated from protobuf field: bool rake_trick = 7;\n     */\n    rakeTrick: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 9;\n     */\n    maintainFaerieFire: boolean;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.FinishingMove\n */\nexport enum FeralDruid_Rotation_FinishingMove {\n    /**\n     * @generated from protobuf enum value: Rip = 0;\n     */\n    Rip = 0,\n    /**\n     * @generated from protobuf enum value: Bite = 1;\n     */\n    Bite = 1,\n    /**\n     * @generated from protobuf enum value: None = 2;\n     */\n    None = 2\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: int32 latency_ms = 2;\n     */\n    latencyMs: number;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralTankDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 3;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation.Swipe swipe = 4;\n     */\n    swipe: FeralTankDruid_Rotation_Swipe;\n    /**\n     * @generated from protobuf field: double swipe_ap_threshold = 5;\n     */\n    swipeApThreshold: number;\n}\n/**\n * @generated from protobuf enum proto.FeralTankDruid.Rotation.Swipe\n */\nexport enum FeralTankDruid_Rotation_Swipe {\n    /**\n     * @generated from protobuf enum value: SwipeNone = 0;\n     */\n    SwipeNone = 0,\n    /**\n     * @generated from protobuf enum value: SwipeWithEnoughAP = 1;\n     */\n    SwipeWithEnoughAP = 1,\n    /**\n     * @generated from protobuf enum value: SwipeSpam = 2;\n     */\n    SwipeSpam = 2\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfClaw = 48720;\n     */\n    GlyphOfClaw = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfGrowling = 40899;\n     */\n    GlyphOfGrowling = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfNourish = 45603;\n     */\n    GlyphOfNourish = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfRake = 40903;\n     */\n    GlyphOfRake = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidRejuvenation = 50125;\n     */\n    GlyphOfRapidRejuvenation = 50125,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfShred = 40901;\n     */\n    GlyphOfShred = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfSurvivalInstincts = 46372;\n     */\n    GlyphOfSurvivalInstincts = 46372,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWild = 43335;\n     */\n    GlyphOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_moonfire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"brambles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"natures_splendor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"natures_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"celestial_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lunar_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_insect_swarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"moonfury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"improved_moonkin_form\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"improved_faerie_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"wrath_of_cenarius\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eclipse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earth_and_moon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"feral_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"savage_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"sharpened_claws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"shredding_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"primal_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"survival_of_the_fittest\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"improved_leader_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"primal_tenacity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"protector_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"predatory_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_mangle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"primal_gore\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_mark_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"natures_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"omen_of_clarity\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"master_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"tranquil_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"gift_of_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"improved_tranquility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"living_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"swiftmend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"natural_perfection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"empowered_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"improved_tree_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"improved_barkskin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { starlightWrath: 0, genesis: 0, moonglow: 0, naturesMajesty: 0, improvedMoonfire: 0, brambles: 0, naturesGrace: 0, naturesSplendor: false, naturesReach: 0, vengeance: 0, celestialFocus: 0, lunarGuidance: 0, insectSwarm: false, improvedInsectSwarm: 0, dreamstate: 0, moonfury: 0, balanceOfPower: 0, moonkinForm: false, improvedMoonkinForm: 0, improvedFaerieFire: 0, owlkinFrenzy: 0, wrathOfCenarius: 0, eclipse: 0, typhoon: false, forceOfNature: false, galeWinds: 0, earthAndMoon: 0, starfall: false, ferocity: 0, feralAggression: 0, feralInstinct: 0, savageFury: 0, thickHide: 0, feralSwiftness: 0, survivalInstincts: false, sharpenedClaws: 0, shreddingAttacks: 0, predatoryStrikes: 0, primalFury: 0, primalPrecision: 0, brutalImpact: 0, feralCharge: false, nurturingInstinct: 0, naturalReaction: 0, heartOfTheWild: 0, survivalOfTheFittest: 0, leaderOfThePack: false, improvedLeaderOfThePack: 0, primalTenacity: 0, protectorOfThePack: 0, predatoryInstincts: 0, infectedWounds: 0, kingOfTheJungle: 0, mangle: false, improvedMangle: 0, rendAndTear: 0, primalGore: false, berserk: false, improvedMarkOfTheWild: 0, naturesFocus: 0, furor: 0, naturalist: 0, subtlety: 0, naturalShapeshifter: 0, intensity: 0, omenOfClarity: false, masterShapeshifter: 0, tranquilSpirit: 0, improvedRejuvenation: 0, naturesSwiftness: false, giftOfNature: 0, improvedTranquility: 0, empoweredTouch: 0, naturesBounty: 0, livingSpirit: 0, swiftmend: false, naturalPerfection: 0, empoweredRejuvenation: 0, livingSeed: 0, revitalize: 0, treeOfLife: false, improvedTreeOfLife: 0, improvedBarkskin: 0, giftOfTheEarthmother: 0, wildGrowth: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 starlight_wrath */ 1:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 genesis */ 2:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 3:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 4:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 improved_moonfire */ 5:\n                    message.improvedMoonfire = reader.int32();\n                    break;\n                case /* int32 brambles */ 6:\n                    message.brambles = reader.int32();\n                    break;\n                case /* int32 natures_grace */ 7:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* bool natures_splendor */ 8:\n                    message.naturesSplendor = reader.bool();\n                    break;\n                case /* int32 natures_reach */ 9:\n                    message.naturesReach = reader.int32();\n                    break;\n                case /* int32 vengeance */ 10:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 celestial_focus */ 11:\n                    message.celestialFocus = reader.int32();\n                    break;\n                case /* int32 lunar_guidance */ 12:\n                    message.lunarGuidance = reader.int32();\n                    break;\n                case /* bool insect_swarm */ 13:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* int32 improved_insect_swarm */ 14:\n                    message.improvedInsectSwarm = reader.int32();\n                    break;\n                case /* int32 dreamstate */ 15:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* int32 moonfury */ 16:\n                    message.moonfury = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 17:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 18:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* int32 improved_moonkin_form */ 19:\n                    message.improvedMoonkinForm = reader.int32();\n                    break;\n                case /* int32 improved_faerie_fire */ 20:\n                    message.improvedFaerieFire = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 21:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 wrath_of_cenarius */ 22:\n                    message.wrathOfCenarius = reader.int32();\n                    break;\n                case /* int32 eclipse */ 23:\n                    message.eclipse = reader.int32();\n                    break;\n                case /* bool typhoon */ 24:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* bool force_of_nature */ 25:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* int32 gale_winds */ 26:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* int32 earth_and_moon */ 27:\n                    message.earthAndMoon = reader.int32();\n                    break;\n                case /* bool starfall */ 28:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 ferocity */ 29:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 30:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 feral_instinct */ 31:\n                    message.feralInstinct = reader.int32();\n                    break;\n                case /* int32 savage_fury */ 32:\n                    message.savageFury = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 33:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 feral_swiftness */ 34:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 35:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 sharpened_claws */ 36:\n                    message.sharpenedClaws = reader.int32();\n                    break;\n                case /* int32 shredding_attacks */ 37:\n                    message.shreddingAttacks = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 38:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 39:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 primal_precision */ 40:\n                    message.primalPrecision = reader.int32();\n                    break;\n                case /* int32 brutal_impact */ 41:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* bool feral_charge */ 42:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 nurturing_instinct */ 43:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 44:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 45:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 survival_of_the_fittest */ 46:\n                    message.survivalOfTheFittest = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 47:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 improved_leader_of_the_pack */ 48:\n                    message.improvedLeaderOfThePack = reader.int32();\n                    break;\n                case /* int32 primal_tenacity */ 49:\n                    message.primalTenacity = reader.int32();\n                    break;\n                case /* int32 protector_of_the_pack */ 50:\n                    message.protectorOfThePack = reader.int32();\n                    break;\n                case /* int32 predatory_instincts */ 51:\n                    message.predatoryInstincts = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 52:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 53:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool mangle */ 54:\n                    message.mangle = reader.bool();\n                    break;\n                case /* int32 improved_mangle */ 55:\n                    message.improvedMangle = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 56:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool primal_gore */ 57:\n                    message.primalGore = reader.bool();\n                    break;\n                case /* bool berserk */ 58:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 improved_mark_of_the_wild */ 59:\n                    message.improvedMarkOfTheWild = reader.int32();\n                    break;\n                case /* int32 natures_focus */ 60:\n                    message.naturesFocus = reader.int32();\n                    break;\n                case /* int32 furor */ 61:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 naturalist */ 62:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 subtlety */ 63:\n                    message.subtlety = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 64:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 intensity */ 65:\n                    message.intensity = reader.int32();\n                    break;\n                case /* bool omen_of_clarity */ 66:\n                    message.omenOfClarity = reader.bool();\n                    break;\n                case /* int32 master_shapeshifter */ 67:\n                    message.masterShapeshifter = reader.int32();\n                    break;\n                case /* int32 tranquil_spirit */ 68:\n                    message.tranquilSpirit = reader.int32();\n                    break;\n                case /* int32 improved_rejuvenation */ 69:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 70:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 gift_of_nature */ 71:\n                    message.giftOfNature = reader.int32();\n                    break;\n                case /* int32 improved_tranquility */ 72:\n                    message.improvedTranquility = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 73:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 74:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 living_spirit */ 75:\n                    message.livingSpirit = reader.int32();\n                    break;\n                case /* bool swiftmend */ 76:\n                    message.swiftmend = reader.bool();\n                    break;\n                case /* int32 natural_perfection */ 77:\n                    message.naturalPerfection = reader.int32();\n                    break;\n                case /* int32 empowered_rejuvenation */ 78:\n                    message.empoweredRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 79:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 80:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool tree_of_life */ 81:\n                    message.treeOfLife = reader.bool();\n                    break;\n                case /* int32 improved_tree_of_life */ 82:\n                    message.improvedTreeOfLife = reader.int32();\n                    break;\n                case /* int32 improved_barkskin */ 83:\n                    message.improvedBarkskin = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 84:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool wild_growth */ 85:\n                    message.wildGrowth = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 starlight_wrath = 1; */\n        if (message.starlightWrath !== 0)\n            writer.tag(1, WireType.Varint).int32(message.starlightWrath);\n        /* int32 genesis = 2; */\n        if (message.genesis !== 0)\n            writer.tag(2, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 3; */\n        if (message.moonglow !== 0)\n            writer.tag(3, WireType.Varint).int32(message.moonglow);\n        /* int32 natures_majesty = 4; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 improved_moonfire = 5; */\n        if (message.improvedMoonfire !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedMoonfire);\n        /* int32 brambles = 6; */\n        if (message.brambles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.brambles);\n        /* int32 natures_grace = 7; */\n        if (message.naturesGrace !== 0)\n            writer.tag(7, WireType.Varint).int32(message.naturesGrace);\n        /* bool natures_splendor = 8; */\n        if (message.naturesSplendor !== false)\n            writer.tag(8, WireType.Varint).bool(message.naturesSplendor);\n        /* int32 natures_reach = 9; */\n        if (message.naturesReach !== 0)\n            writer.tag(9, WireType.Varint).int32(message.naturesReach);\n        /* int32 vengeance = 10; */\n        if (message.vengeance !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vengeance);\n        /* int32 celestial_focus = 11; */\n        if (message.celestialFocus !== 0)\n            writer.tag(11, WireType.Varint).int32(message.celestialFocus);\n        /* int32 lunar_guidance = 12; */\n        if (message.lunarGuidance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lunarGuidance);\n        /* bool insect_swarm = 13; */\n        if (message.insectSwarm !== false)\n            writer.tag(13, WireType.Varint).bool(message.insectSwarm);\n        /* int32 improved_insect_swarm = 14; */\n        if (message.improvedInsectSwarm !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedInsectSwarm);\n        /* int32 dreamstate = 15; */\n        if (message.dreamstate !== 0)\n            writer.tag(15, WireType.Varint).int32(message.dreamstate);\n        /* int32 moonfury = 16; */\n        if (message.moonfury !== 0)\n            writer.tag(16, WireType.Varint).int32(message.moonfury);\n        /* int32 balance_of_power = 17; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(17, WireType.Varint).int32(message.balanceOfPower);\n        /* bool moonkin_form = 18; */\n        if (message.moonkinForm !== false)\n            writer.tag(18, WireType.Varint).bool(message.moonkinForm);\n        /* int32 improved_moonkin_form = 19; */\n        if (message.improvedMoonkinForm !== 0)\n            writer.tag(19, WireType.Varint).int32(message.improvedMoonkinForm);\n        /* int32 improved_faerie_fire = 20; */\n        if (message.improvedFaerieFire !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFaerieFire);\n        /* int32 owlkin_frenzy = 21; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 wrath_of_cenarius = 22; */\n        if (message.wrathOfCenarius !== 0)\n            writer.tag(22, WireType.Varint).int32(message.wrathOfCenarius);\n        /* int32 eclipse = 23; */\n        if (message.eclipse !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eclipse);\n        /* bool typhoon = 24; */\n        if (message.typhoon !== false)\n            writer.tag(24, WireType.Varint).bool(message.typhoon);\n        /* bool force_of_nature = 25; */\n        if (message.forceOfNature !== false)\n            writer.tag(25, WireType.Varint).bool(message.forceOfNature);\n        /* int32 gale_winds = 26; */\n        if (message.galeWinds !== 0)\n            writer.tag(26, WireType.Varint).int32(message.galeWinds);\n        /* int32 earth_and_moon = 27; */\n        if (message.earthAndMoon !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthAndMoon);\n        /* bool starfall = 28; */\n        if (message.starfall !== false)\n            writer.tag(28, WireType.Varint).bool(message.starfall);\n        /* int32 ferocity = 29; */\n        if (message.ferocity !== 0)\n            writer.tag(29, WireType.Varint).int32(message.ferocity);\n        /* int32 feral_aggression = 30; */\n        if (message.feralAggression !== 0)\n            writer.tag(30, WireType.Varint).int32(message.feralAggression);\n        /* int32 feral_instinct = 31; */\n        if (message.feralInstinct !== 0)\n            writer.tag(31, WireType.Varint).int32(message.feralInstinct);\n        /* int32 savage_fury = 32; */\n        if (message.savageFury !== 0)\n            writer.tag(32, WireType.Varint).int32(message.savageFury);\n        /* int32 thick_hide = 33; */\n        if (message.thickHide !== 0)\n            writer.tag(33, WireType.Varint).int32(message.thickHide);\n        /* int32 feral_swiftness = 34; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.feralSwiftness);\n        /* bool survival_instincts = 35; */\n        if (message.survivalInstincts !== false)\n            writer.tag(35, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 sharpened_claws = 36; */\n        if (message.sharpenedClaws !== 0)\n            writer.tag(36, WireType.Varint).int32(message.sharpenedClaws);\n        /* int32 shredding_attacks = 37; */\n        if (message.shreddingAttacks !== 0)\n            writer.tag(37, WireType.Varint).int32(message.shreddingAttacks);\n        /* int32 predatory_strikes = 38; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(38, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 primal_fury = 39; */\n        if (message.primalFury !== 0)\n            writer.tag(39, WireType.Varint).int32(message.primalFury);\n        /* int32 primal_precision = 40; */\n        if (message.primalPrecision !== 0)\n            writer.tag(40, WireType.Varint).int32(message.primalPrecision);\n        /* int32 brutal_impact = 41; */\n        if (message.brutalImpact !== 0)\n            writer.tag(41, WireType.Varint).int32(message.brutalImpact);\n        /* bool feral_charge = 42; */\n        if (message.feralCharge !== false)\n            writer.tag(42, WireType.Varint).bool(message.feralCharge);\n        /* int32 nurturing_instinct = 43; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(43, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 natural_reaction = 44; */\n        if (message.naturalReaction !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalReaction);\n        /* int32 heart_of_the_wild = 45; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(45, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 survival_of_the_fittest = 46; */\n        if (message.survivalOfTheFittest !== 0)\n            writer.tag(46, WireType.Varint).int32(message.survivalOfTheFittest);\n        /* bool leader_of_the_pack = 47; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(47, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 improved_leader_of_the_pack = 48; */\n        if (message.improvedLeaderOfThePack !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedLeaderOfThePack);\n        /* int32 primal_tenacity = 49; */\n        if (message.primalTenacity !== 0)\n            writer.tag(49, WireType.Varint).int32(message.primalTenacity);\n        /* int32 protector_of_the_pack = 50; */\n        if (message.protectorOfThePack !== 0)\n            writer.tag(50, WireType.Varint).int32(message.protectorOfThePack);\n        /* int32 predatory_instincts = 51; */\n        if (message.predatoryInstincts !== 0)\n            writer.tag(51, WireType.Varint).int32(message.predatoryInstincts);\n        /* int32 infected_wounds = 52; */\n        if (message.infectedWounds !== 0)\n            writer.tag(52, WireType.Varint).int32(message.infectedWounds);\n        /* int32 king_of_the_jungle = 53; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(53, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool mangle = 54; */\n        if (message.mangle !== false)\n            writer.tag(54, WireType.Varint).bool(message.mangle);\n        /* int32 improved_mangle = 55; */\n        if (message.improvedMangle !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedMangle);\n        /* int32 rend_and_tear = 56; */\n        if (message.rendAndTear !== 0)\n            writer.tag(56, WireType.Varint).int32(message.rendAndTear);\n        /* bool primal_gore = 57; */\n        if (message.primalGore !== false)\n            writer.tag(57, WireType.Varint).bool(message.primalGore);\n        /* bool berserk = 58; */\n        if (message.berserk !== false)\n            writer.tag(58, WireType.Varint).bool(message.berserk);\n        /* int32 improved_mark_of_the_wild = 59; */\n        if (message.improvedMarkOfTheWild !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedMarkOfTheWild);\n        /* int32 natures_focus = 60; */\n        if (message.naturesFocus !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesFocus);\n        /* int32 furor = 61; */\n        if (message.furor !== 0)\n            writer.tag(61, WireType.Varint).int32(message.furor);\n        /* int32 naturalist = 62; */\n        if (message.naturalist !== 0)\n            writer.tag(62, WireType.Varint).int32(message.naturalist);\n        /* int32 subtlety = 63; */\n        if (message.subtlety !== 0)\n            writer.tag(63, WireType.Varint).int32(message.subtlety);\n        /* int32 natural_shapeshifter = 64; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(64, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 intensity = 65; */\n        if (message.intensity !== 0)\n            writer.tag(65, WireType.Varint).int32(message.intensity);\n        /* bool omen_of_clarity = 66; */\n        if (message.omenOfClarity !== false)\n            writer.tag(66, WireType.Varint).bool(message.omenOfClarity);\n        /* int32 master_shapeshifter = 67; */\n        if (message.masterShapeshifter !== 0)\n            writer.tag(67, WireType.Varint).int32(message.masterShapeshifter);\n        /* int32 tranquil_spirit = 68; */\n        if (message.tranquilSpirit !== 0)\n            writer.tag(68, WireType.Varint).int32(message.tranquilSpirit);\n        /* int32 improved_rejuvenation = 69; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedRejuvenation);\n        /* bool natures_swiftness = 70; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(70, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 gift_of_nature = 71; */\n        if (message.giftOfNature !== 0)\n            writer.tag(71, WireType.Varint).int32(message.giftOfNature);\n        /* int32 improved_tranquility = 72; */\n        if (message.improvedTranquility !== 0)\n            writer.tag(72, WireType.Varint).int32(message.improvedTranquility);\n        /* int32 empowered_touch = 73; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(73, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 natures_bounty = 74; */\n        if (message.naturesBounty !== 0)\n            writer.tag(74, WireType.Varint).int32(message.naturesBounty);\n        /* int32 living_spirit = 75; */\n        if (message.livingSpirit !== 0)\n            writer.tag(75, WireType.Varint).int32(message.livingSpirit);\n        /* bool swiftmend = 76; */\n        if (message.swiftmend !== false)\n            writer.tag(76, WireType.Varint).bool(message.swiftmend);\n        /* int32 natural_perfection = 77; */\n        if (message.naturalPerfection !== 0)\n            writer.tag(77, WireType.Varint).int32(message.naturalPerfection);\n        /* int32 empowered_rejuvenation = 78; */\n        if (message.empoweredRejuvenation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.empoweredRejuvenation);\n        /* int32 living_seed = 79; */\n        if (message.livingSeed !== 0)\n            writer.tag(79, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 80; */\n        if (message.revitalize !== 0)\n            writer.tag(80, WireType.Varint).int32(message.revitalize);\n        /* bool tree_of_life = 81; */\n        if (message.treeOfLife !== false)\n            writer.tag(81, WireType.Varint).bool(message.treeOfLife);\n        /* int32 improved_tree_of_life = 82; */\n        if (message.improvedTreeOfLife !== 0)\n            writer.tag(82, WireType.Varint).int32(message.improvedTreeOfLife);\n        /* int32 improved_barkskin = 83; */\n        if (message.improvedBarkskin !== 0)\n            writer.tag(83, WireType.Varint).int32(message.improvedBarkskin);\n        /* int32 gift_of_the_earthmother = 84; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(84, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool wild_growth = 85; */\n        if (message.wildGrowth !== false)\n            writer.tag(85, WireType.Varint).bool(message.wildGrowth);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BalanceDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation rotation */ 1:\n                    message.rotation = BalanceDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            BalanceDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.RotationType\", BalanceDruid_Rotation_RotationType] }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = { type: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"battle_res\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_is\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_mf\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"mf_inside_eclipse_threshold\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 6, name: \"is_inside_eclipse_threshold\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = { battleRes: false, useIs: false, useMf: false, mfInsideEclipseThreshold: 0, isInsideEclipseThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* bool battle_res */ 2:\n                    message.battleRes = reader.bool();\n                    break;\n                case /* bool use_is */ 3:\n                    message.useIs = reader.bool();\n                    break;\n                case /* bool use_mf */ 4:\n                    message.useMf = reader.bool();\n                    break;\n                case /* float mf_inside_eclipse_threshold */ 5:\n                    message.mfInsideEclipseThreshold = reader.float();\n                    break;\n                case /* float is_inside_eclipse_threshold */ 6:\n                    message.isInsideEclipseThreshold = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool battle_res = 2; */\n        if (message.battleRes !== false)\n            writer.tag(2, WireType.Varint).bool(message.battleRes);\n        /* bool use_is = 3; */\n        if (message.useIs !== false)\n            writer.tag(3, WireType.Varint).bool(message.useIs);\n        /* bool use_mf = 4; */\n        if (message.useMf !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMf);\n        /* float mf_inside_eclipse_threshold = 5; */\n        if (message.mfInsideEclipseThreshold !== 0)\n            writer.tag(5, WireType.Bit32).float(message.mfInsideEclipseThreshold);\n        /* float is_inside_eclipse_threshold = 6; */\n        if (message.isInsideEclipseThreshold !== 0)\n            writer.tag(6, WireType.Bit32).float(message.isInsideEclipseThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"finishing_move\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.FinishingMove\", FeralDruid_Rotation_FinishingMove] },\n            { no: 2, name: \"mangle_trick\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"biteweave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"ripweave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"rip_min_combo_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"bite_min_combo_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"rake_trick\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { finishingMove: 0, mangleTrick: false, biteweave: false, ripweave: false, ripMinComboPoints: 0, biteMinComboPoints: 0, rakeTrick: false, maintainFaerieFire: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.FinishingMove finishing_move */ 1:\n                    message.finishingMove = reader.int32();\n                    break;\n                case /* bool mangle_trick */ 2:\n                    message.mangleTrick = reader.bool();\n                    break;\n                case /* bool biteweave */ 3:\n                    message.biteweave = reader.bool();\n                    break;\n                case /* bool ripweave */ 8:\n                    message.ripweave = reader.bool();\n                    break;\n                case /* int32 rip_min_combo_points */ 5:\n                    message.ripMinComboPoints = reader.int32();\n                    break;\n                case /* int32 bite_min_combo_points */ 6:\n                    message.biteMinComboPoints = reader.int32();\n                    break;\n                case /* bool rake_trick */ 7:\n                    message.rakeTrick = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 9:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.FinishingMove finishing_move = 1; */\n        if (message.finishingMove !== 0)\n            writer.tag(1, WireType.Varint).int32(message.finishingMove);\n        /* bool mangle_trick = 2; */\n        if (message.mangleTrick !== false)\n            writer.tag(2, WireType.Varint).bool(message.mangleTrick);\n        /* bool biteweave = 3; */\n        if (message.biteweave !== false)\n            writer.tag(3, WireType.Varint).bool(message.biteweave);\n        /* bool ripweave = 8; */\n        if (message.ripweave !== false)\n            writer.tag(8, WireType.Varint).bool(message.ripweave);\n        /* int32 rip_min_combo_points = 5; */\n        if (message.ripMinComboPoints !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ripMinComboPoints);\n        /* int32 bite_min_combo_points = 6; */\n        if (message.biteMinComboPoints !== 0)\n            writer.tag(6, WireType.Varint).int32(message.biteMinComboPoints);\n        /* bool rake_trick = 7; */\n        if (message.rakeTrick !== false)\n            writer.tag(7, WireType.Varint).bool(message.rakeTrick);\n        /* bool maintain_faerie_fire = 9; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(9, WireType.Varint).bool(message.maintainFaerieFire);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"latency_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { latencyMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* int32 latency_ms */ 2:\n                    message.latencyMs = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 latency_ms = 2; */\n        if (message.latencyMs !== 0)\n            writer.tag(2, WireType.Varint).int32(message.latencyMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralTankDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Rotation rotation */ 1:\n                    message.rotation = FeralTankDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralTankDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"swipe\", kind: \"enum\", T: () => [\"proto.FeralTankDruid.Rotation.Swipe\", FeralTankDruid_Rotation_Swipe] },\n            { no: 5, name: \"swipe_ap_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, maintainFaerieFire: false, swipe: 0, swipeApThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 3:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* proto.FeralTankDruid.Rotation.Swipe swipe */ 4:\n                    message.swipe = reader.int32();\n                    break;\n                case /* double swipe_ap_threshold */ 5:\n                    message.swipeApThreshold = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* bool maintain_faerie_fire = 3; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.maintainFaerieFire);\n        /* proto.FeralTankDruid.Rotation.Swipe swipe = 4; */\n        if (message.swipe !== 0)\n            writer.tag(4, WireType.Varint).int32(message.swipe);\n        /* double swipe_ap_threshold = 5; */\n        if (message.swipeApThreshold !== 0)\n            writer.tag(5, WireType.Bit64).double(message.swipeApThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Stat } from \"./common\";\nimport { Target } from \"./common\";\nimport { Gem } from \"./common\";\nimport { Enchant } from \"./common\";\nimport { Item } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { TankDeathknight } from \"./deathknight\";\nimport { Deathknight } from \"./deathknight\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { Warrior } from \"./warrior\";\nimport { Warlock } from \"./warlock\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { Rogue } from \"./rogue\";\nimport { SmitePriest } from \"./priest\";\nimport { ShadowPriest } from \"./priest\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { Mage } from \"./mage\";\nimport { Hunter } from \"./hunter\";\nimport { FeralTankDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { IndividualBuffs } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { ShattrathFaction } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 16;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.ShattrathFaction shatt_faction = 24;\n     */\n    shattFaction: ShattrathFaction;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: repeated double bonus_stats = 5;\n     */\n    bonusStats: number[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 15;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 6;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 22;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"feralTankDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralTankDruid feral_tank_druid = 26;\n         */\n        feralTankDruid: FeralTankDruid;\n    } | {\n        oneofKind: \"hunter\";\n        /**\n         * @generated from protobuf field: proto.Hunter hunter = 7;\n         */\n        hunter: Hunter;\n    } | {\n        oneofKind: \"mage\";\n        /**\n         * @generated from protobuf field: proto.Mage mage = 8;\n         */\n        mage: Mage;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 9;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 25;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 10;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"smitePriest\";\n        /**\n         * @generated from protobuf field: proto.SmitePriest smite_priest = 20;\n         */\n        smitePriest: SmitePriest;\n    } | {\n        oneofKind: \"rogue\";\n        /**\n         * @generated from protobuf field: proto.Rogue rogue = 11;\n         */\n        rogue: Rogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 12;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 18;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"warlock\";\n        /**\n         * @generated from protobuf field: proto.Warlock warlock = 13;\n         */\n        warlock: Warlock;\n    } | {\n        oneofKind: \"warrior\";\n        /**\n         * @generated from protobuf field: proto.Warrior warrior = 14;\n         */\n        warrior: Warrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 21;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: \"deathknight\";\n        /**\n         * @generated from protobuf field: proto.Deathknight deathknight = 31;\n         */\n        deathknight: Deathknight;\n    } | {\n        oneofKind: \"tankDeathknight\";\n        /**\n         * @generated from protobuf field: proto.TankDeathknight tank_deathknight = 32;\n         */\n        tankDeathknight: TankDeathknight;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Only used by the UI. Sim uses talents within the spec protos.\n     *\n     * @generated from protobuf field: string talentsString = 17;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 28;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 29;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 30;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 19;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 23;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 33;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 27;\n     */\n    healingModel?: HealingModel;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 2;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 4;\n     */\n    tanks: RaidTarget[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to all targets by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to all targets by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 maxSeed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 minSeed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC GearList\n *\n * @generated from protobuf message proto.GearListRequest\n */\nexport interface GearListRequest {\n}\n/**\n * @generated from protobuf message proto.GearListResult\n */\nexport interface GearListResult {\n    /**\n     * @generated from protobuf field: repeated proto.Item items = 1;\n     */\n    items: Item[];\n    /**\n     * @generated from protobuf field: repeated proto.Enchant enchants = 2;\n     */\n    enchants: Enchant[];\n    /**\n     * @generated from protobuf field: repeated proto.Gem gems = 3;\n     */\n    gems: Gem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 4;\n     */\n    encounters: PresetEncounter[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: repeated double base_stats = 6;\n     */\n    baseStats: number[];\n    /**\n     * @generated from protobuf field: repeated double gear_stats = 1;\n     */\n    gearStats: number[];\n    /**\n     * @generated from protobuf field: repeated double talents_stats = 7;\n     */\n    talentsStats: number[];\n    /**\n     * @generated from protobuf field: repeated double buffs_stats = 8;\n     */\n    buffsStats: number[];\n    /**\n     * @generated from protobuf field: repeated double consumes_stats = 9;\n     */\n    consumesStats: number[];\n    /**\n     * @generated from protobuf field: repeated double final_stats = 2;\n     */\n    finalStats: number[];\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: repeated proto.ActionID cooldowns = 5;\n     */\n    cooldowns: ActionID[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 8;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: repeated double weights = 1;\n     */\n    weights: number[];\n    /**\n     * @generated from protobuf field: repeated double weights_stdev = 2;\n     */\n    weightsStdev: number[];\n    /**\n     * @generated from protobuf field: repeated double ep_values = 3;\n     */\n    epValues: number[];\n    /**\n     * @generated from protobuf field: repeated double ep_values_stdev = 4;\n     */\n    epValuesStdev: number[];\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 16, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 24, name: \"shatt_faction\", kind: \"enum\", T: () => [\"proto.ShattrathFaction\", ShattrathFaction] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 6, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 22, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 26, name: \"feral_tank_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralTankDruid },\n            { no: 7, name: \"hunter\", kind: \"message\", oneof: \"spec\", T: () => Hunter },\n            { no: 8, name: \"mage\", kind: \"message\", oneof: \"spec\", T: () => Mage },\n            { no: 9, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 25, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 10, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 20, name: \"smite_priest\", kind: \"message\", oneof: \"spec\", T: () => SmitePriest },\n            { no: 11, name: \"rogue\", kind: \"message\", oneof: \"spec\", T: () => Rogue },\n            { no: 12, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 18, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 13, name: \"warlock\", kind: \"message\", oneof: \"spec\", T: () => Warlock },\n            { no: 14, name: \"warrior\", kind: \"message\", oneof: \"spec\", T: () => Warrior },\n            { no: 21, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 31, name: \"deathknight\", kind: \"message\", oneof: \"spec\", T: () => Deathknight },\n            { no: 32, name: \"tank_deathknight\", kind: \"message\", oneof: \"spec\", T: () => TankDeathknight },\n            { no: 17, name: \"talentsString\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 28, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 29, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 30, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 19, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 23, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 27, name: \"healing_model\", kind: \"message\", T: () => HealingModel }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, shattFaction: 0, class: 0, bonusStats: [], spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 16:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.ShattrathFaction shatt_faction */ 24:\n                    message.shattFaction = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* repeated double bonus_stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 15:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 6:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 22:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.FeralTankDruid feral_tank_druid */ 26:\n                    message.spec = {\n                        oneofKind: \"feralTankDruid\",\n                        feralTankDruid: FeralTankDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralTankDruid)\n                    };\n                    break;\n                case /* proto.Hunter hunter */ 7:\n                    message.spec = {\n                        oneofKind: \"hunter\",\n                        hunter: Hunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).hunter)\n                    };\n                    break;\n                case /* proto.Mage mage */ 8:\n                    message.spec = {\n                        oneofKind: \"mage\",\n                        mage: Mage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).mage)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 9:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 25:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 10:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.SmitePriest smite_priest */ 20:\n                    message.spec = {\n                        oneofKind: \"smitePriest\",\n                        smitePriest: SmitePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).smitePriest)\n                    };\n                    break;\n                case /* proto.Rogue rogue */ 11:\n                    message.spec = {\n                        oneofKind: \"rogue\",\n                        rogue: Rogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).rogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 12:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 18:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.Warlock warlock */ 13:\n                    message.spec = {\n                        oneofKind: \"warlock\",\n                        warlock: Warlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warlock)\n                    };\n                    break;\n                case /* proto.Warrior warrior */ 14:\n                    message.spec = {\n                        oneofKind: \"warrior\",\n                        warrior: Warrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 21:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* proto.Deathknight deathknight */ 31:\n                    message.spec = {\n                        oneofKind: \"deathknight\",\n                        deathknight: Deathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).deathknight)\n                    };\n                    break;\n                case /* proto.TankDeathknight tank_deathknight */ 32:\n                    message.spec = {\n                        oneofKind: \"tankDeathknight\",\n                        tankDeathknight: TankDeathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).tankDeathknight)\n                    };\n                    break;\n                case /* string talentsString */ 17:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 28:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 29:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 30:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 19:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* bool in_front_of_target */ 23:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 33:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 27:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 16; */\n        if (message.name !== \"\")\n            writer.tag(16, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.ShattrathFaction shatt_faction = 24; */\n        if (message.shattFaction !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shattFaction);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 5; */\n        if (message.bonusStats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        /* proto.IndividualBuffs buffs = 15; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 6; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 22; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid feral_tank_druid = 26; */\n        if (message.spec.oneofKind === \"feralTankDruid\")\n            FeralTankDruid.internalBinaryWrite(message.spec.feralTankDruid, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter hunter = 7; */\n        if (message.spec.oneofKind === \"hunter\")\n            Hunter.internalBinaryWrite(message.spec.hunter, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage mage = 8; */\n        if (message.spec.oneofKind === \"mage\")\n            Mage.internalBinaryWrite(message.spec.mage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 9; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 25; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 10; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest smite_priest = 20; */\n        if (message.spec.oneofKind === \"smitePriest\")\n            SmitePriest.internalBinaryWrite(message.spec.smitePriest, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue rogue = 11; */\n        if (message.spec.oneofKind === \"rogue\")\n            Rogue.internalBinaryWrite(message.spec.rogue, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 12; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 18; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock warlock = 13; */\n        if (message.spec.oneofKind === \"warlock\")\n            Warlock.internalBinaryWrite(message.spec.warlock, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior warrior = 14; */\n        if (message.spec.oneofKind === \"warrior\")\n            Warrior.internalBinaryWrite(message.spec.warrior, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 21; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight deathknight = 31; */\n        if (message.spec.oneofKind === \"deathknight\")\n            Deathknight.internalBinaryWrite(message.spec.deathknight, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight tank_deathknight = 32; */\n        if (message.spec.oneofKind === \"tankDeathknight\")\n            TankDeathknight.internalBinaryWrite(message.spec.tankDeathknight, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* string talentsString = 17; */\n        if (message.talentsString !== \"\")\n            writer.tag(17, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 28; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 29; */\n        if (message.profession1 !== 0)\n            writer.tag(29, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 30; */\n        if (message.profession2 !== 0)\n            writer.tag(30, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 19; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* bool in_front_of_target = 23; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(23, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 33; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(33, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 27; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], tanks: [], staggerStormstrikes: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.RaidBuffs buffs */ 2:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 4:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs buffs = 2; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"maxSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"minSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {} };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 maxSeed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 minSeed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 maxSeed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 minSeed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GearListRequest$Type extends MessageType<GearListRequest> {\n    constructor() {\n        super(\"proto.GearListRequest\", []);\n    }\n    create(value?: PartialMessage<GearListRequest>): GearListRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GearListRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearListRequest): GearListRequest {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: GearListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GearListRequest\n */\nexport const GearListRequest = new GearListRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GearListResult$Type extends MessageType<GearListResult> {\n    constructor() {\n        super(\"proto.GearListResult\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Enchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Gem },\n            { no: 4, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter }\n        ]);\n    }\n    create(value?: PartialMessage<GearListResult>): GearListResult {\n        const message = { items: [], enchants: [], gems: [], encounters: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GearListResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearListResult): GearListResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Item items */ 1:\n                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Enchant enchants */ 2:\n                    message.enchants.push(Enchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Gem gems */ 3:\n                    message.gems.push(Gem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 4:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: GearListResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Item items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Enchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            Enchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Gem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            Gem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 4; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GearListResult\n */\nexport const GearListResult = new GearListResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 1, name: \"gear_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"talents_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"buffs_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"consumes_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"final_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 5, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { baseStats: [], gearStats: [], talentsStats: [], buffsStats: [], consumesStats: [], finalStats: [], sets: [], cooldowns: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double base_stats */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.baseStats.push(reader.double());\n                    else\n                        message.baseStats.push(reader.double());\n                    break;\n                case /* repeated double gear_stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gearStats.push(reader.double());\n                    else\n                        message.gearStats.push(reader.double());\n                    break;\n                case /* repeated double talents_stats */ 7:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.talentsStats.push(reader.double());\n                    else\n                        message.talentsStats.push(reader.double());\n                    break;\n                case /* repeated double buffs_stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.buffsStats.push(reader.double());\n                    else\n                        message.buffsStats.push(reader.double());\n                    break;\n                case /* repeated double consumes_stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.consumesStats.push(reader.double());\n                    else\n                        message.consumesStats.push(reader.double());\n                    break;\n                case /* repeated double final_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.finalStats.push(reader.double());\n                    else\n                        message.finalStats.push(reader.double());\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* repeated proto.ActionID cooldowns */ 5:\n                    message.cooldowns.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double base_stats = 6; */\n        if (message.baseStats.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.baseStats.length; i++)\n                writer.double(message.baseStats[i]);\n            writer.join();\n        }\n        /* repeated double gear_stats = 1; */\n        if (message.gearStats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gearStats.length; i++)\n                writer.double(message.gearStats[i]);\n            writer.join();\n        }\n        /* repeated double talents_stats = 7; */\n        if (message.talentsStats.length) {\n            writer.tag(7, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.talentsStats.length; i++)\n                writer.double(message.talentsStats[i]);\n            writer.join();\n        }\n        /* repeated double buffs_stats = 8; */\n        if (message.buffsStats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.buffsStats.length; i++)\n                writer.double(message.buffsStats[i]);\n            writer.join();\n        }\n        /* repeated double consumes_stats = 9; */\n        if (message.consumesStats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.consumesStats.length; i++)\n                writer.double(message.consumesStats[i]);\n            writer.join();\n        }\n        /* repeated double final_stats = 2; */\n        if (message.finalStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.finalStats.length; i++)\n                writer.double(message.finalStats[i]);\n            writer.join();\n        }\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID cooldowns = 5; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            ActionID.internalBinaryWrite(message.cooldowns[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], epReferenceStat: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 8:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"weights_stdev\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"ep_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"ep_values_stdev\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = { weights: [], weightsStdev: [], epValues: [], epValuesStdev: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double weights */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weights.push(reader.double());\n                    else\n                        message.weights.push(reader.double());\n                    break;\n                case /* repeated double weights_stdev */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weightsStdev.push(reader.double());\n                    else\n                        message.weightsStdev.push(reader.double());\n                    break;\n                case /* repeated double ep_values */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epValues.push(reader.double());\n                    else\n                        message.epValues.push(reader.double());\n                    break;\n                case /* repeated double ep_values_stdev */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epValuesStdev.push(reader.double());\n                    else\n                        message.epValuesStdev.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double weights = 1; */\n        if (message.weights.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weights.length; i++)\n                writer.double(message.weights[i]);\n            writer.join();\n        }\n        /* repeated double weights_stdev = 2; */\n        if (message.weightsStdev.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weightsStdev.length; i++)\n                writer.double(message.weightsStdev[i]);\n            writer.join();\n        }\n        /* repeated double ep_values = 3; */\n        if (message.epValues.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epValues.length; i++)\n                writer.double(message.epValues[i]);\n            writer.join();\n        }\n        /* repeated double ep_values_stdev = 4; */\n        if (message.epValuesStdev.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epValuesStdev.length; i++)\n                writer.double(message.epValuesStdev[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n","// @generated by protobuf-ts 2.0.4\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { Glyphs } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { Faction } from \"./common\";\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 7;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: repeated double ep_weights = 6;\n     */\n    epWeights: number[];\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: repeated double bonus_stats = 2;\n     */\n    bonusStats: number[];\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 6;\n     */\n    cooldowns?: Cooldowns;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * A buff bot placed in a raid.\n *\n * @generated from protobuf message proto.BuffBot\n */\nexport interface BuffBot {\n    /**\n     * Uniquely identifies which buffbot this is.\n     *\n     * @generated from protobuf field: string id = 1;\n     */\n    id: string;\n    /**\n     * @generated from protobuf field: int32 raid_index = 2;\n     */\n    raidIndex: number;\n    /**\n     * The assigned player to innervate. Only used for druid buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget innervate_assignment = 3;\n     */\n    innervateAssignment?: RaidTarget;\n    /**\n     * The assigned player to PI. Only used for disc priest buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget power_infusion_assignment = 4;\n     */\n    powerInfusionAssignment?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_assignment = 5;\n     */\n    tricksOfTheTradeAssignment?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showThreatMetrics: false, showExperimental: false, faction: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 6, name: \"ep_weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], epWeights: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 7:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* repeated double ep_weights */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epWeights.push(reader.double());\n                    else\n                        message.epWeights.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double ep_weights = 6; */\n        if (message.epWeights.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epWeights.length; i++)\n                writer.double(message.epWeights[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 2, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = { bonusStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* repeated double bonus_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 2; */\n        if (message.bonusStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 6, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 6:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* proto.Cooldowns cooldowns = 6; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BuffBot$Type extends MessageType<BuffBot> {\n    constructor() {\n        super(\"proto.BuffBot\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"raid_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"innervate_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 4, name: \"power_infusion_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 5, name: \"tricks_of_the_trade_assignment\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BuffBot>): BuffBot {\n        const message = { id: \"\", raidIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BuffBot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuffBot): BuffBot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string id */ 1:\n                    message.id = reader.string();\n                    break;\n                case /* int32 raid_index */ 2:\n                    message.raidIndex = reader.int32();\n                    break;\n                case /* proto.RaidTarget innervate_assignment */ 3:\n                    message.innervateAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateAssignment);\n                    break;\n                case /* proto.RaidTarget power_infusion_assignment */ 4:\n                    message.powerInfusionAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionAssignment);\n                    break;\n                case /* proto.RaidTarget tricks_of_the_trade_assignment */ 5:\n                    message.tricksOfTheTradeAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeAssignment);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BuffBot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string id = 1; */\n        if (message.id !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.id);\n        /* int32 raid_index = 2; */\n        if (message.raidIndex !== 0)\n            writer.tag(2, WireType.Varint).int32(message.raidIndex);\n        /* proto.RaidTarget innervate_assignment = 3; */\n        if (message.innervateAssignment)\n            RaidTarget.internalBinaryWrite(message.innervateAssignment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget power_infusion_assignment = 4; */\n        if (message.powerInfusionAssignment)\n            RaidTarget.internalBinaryWrite(message.powerInfusionAssignment, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget tricks_of_the_trade_assignment = 5; */\n        if (message.tricksOfTheTradeAssignment)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeAssignment, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BuffBot\n */\nexport const BuffBot = new BuffBot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { buffBots: [], faction: 0, phase: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = { buffBots: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","export const CURRENT_PHASE = 1;\n\n// Github pages serves our site under the /wotlk directory (because the repo name is wotlk)\nexport const REPO_NAME = 'wotlk';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n","// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null)\n\t\treturn true;\n\n\tif (a == null || b == null)\n\t\treturn false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => v > arr[cur] ? i : cur, 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn 1.645 * stDev / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\", dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number) {\n\tconst delta = after - before;\n\tconst deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\telem.textContent = '+' + deltaStr;\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.textContent = '' + deltaStr;\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr.map((v, i) => {\n\t\t\tconst withoutThisElem = arr.slice();\n\t\t\twithoutThisElem.splice(i, 1);\n\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k-1);\n\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: ((_a: T, _b: T) => boolean) = comparator ? ((a, b) => comparator(a, b) == 0) : ((a, b) => a == b);\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr.map(v => {\n\t\t\treturn smaller.map(permutation => {\n\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\tnewPerm.push(v);\n\t\t\t\treturn newPerm;\n\t\t\t});\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n","import { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n    GemColor.GemColorRed,\n    GemColor.GemColorOrange,\n    GemColor.GemColorYellow,\n    GemColor.GemColorGreen,\n    GemColor.GemColorBlue,\n    GemColor.GemColorPurple,\n    GemColor.GemColorPrismatic,\n]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n    return gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n    return (gem.color == GemColor.GemColorMeta) == (socketColor == GemColor.GemColorMeta);\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n    readonly id: number;\n    readonly description: string;\n\n    readonly minRed: number;\n    readonly minYellow: number;\n    readonly minBlue: number;\n\n    readonly compareColorGreater: GemColor;\n    readonly compareColorLesser: GemColor;\n\n    constructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n        this.id = id;\n        this.description = description;\n        this.minRed = minRed;\n        this.minYellow = minYellow;\n        this.minBlue = minBlue;\n        this.compareColorGreater = compareColorGreater;\n        this.compareColorLesser = compareColorLesser;\n\n        metaGemConditions.set(this.id, this);\n    }\n\n    // Whether the condition is met, i.e. the meta gem is activated.\n    isMet(numRed: number, numYellow: number, numBlue: number): boolean {\n        if (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n            return false;\n        }\n\n        if (this.compareColorGreater == GemColor.GemColorUnknown) {\n            return true;\n        }\n\n        const numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n        const numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n        return numGreater > numLesser;\n    }\n\n\t\tisCompareColorCondition(): boolean {\n\t\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t\t}\n\n\t\tisOneOfEach(): boolean {\n\t\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t\t}\n\n\t\tisTwoAndOne(): boolean {\n\t\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t\t}\n\n\t\tisThreeOfAColor(): boolean {\n\t\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t\t}\n\n    private static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n        if (gemColor == GemColor.GemColorRed) {\n            return numRed;\n        } else if (gemColor == GemColor.GemColorYellow) {\n            return numYellow;\n        } else if (gemColor == GemColor.GemColorBlue) {\n            return numBlue;\n        } else {\n            throw new Error('Invalid gem color for category check: ' + gemColor);\n        }\n    }\n\n    static fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n        return new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n    }\n\n    static fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n        return new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n    }\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n    if (!metaGemConditions.has(id)) {\n        throw new Error('Missing meta gem condition for gem: ' + id);\n    }\n\n    return metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n    return getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n    return getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41337, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst gemSocketCssClasses: Partial<Record<GemColor, string>> = {\n    [GemColor.GemColorBlue]: 'socket-color-blue',\n    [GemColor.GemColorMeta]: 'socket-color-meta',\n    [GemColor.GemColorRed]: 'socket-color-red',\n    [GemColor.GemColorYellow]: 'socket-color-yellow',\n    [GemColor.GemColorPrismatic]: 'socket-color-prismatic',\n};\nexport function setGemSocketCssClass(elem: HTMLElement, color: GemColor) {\n    Object.values(gemSocketCssClasses).forEach(cssClass => elem.classList.remove(cssClass));\n\n    if (gemSocketCssClasses[color]) {\n        elem.classList.add(gemSocketCssClasses[color] as string);\n        return;\n    }\n\n    throw new Error('No css class for gem socket color: ' + color);\n}\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n    [GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n    [GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n    [GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n    [GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n    [GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n    if (emptyGemSocketIcons[color])\n        return emptyGemSocketIcons[color] as string;\n\n    throw new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { REPO_NAME } from '../constants/other.js'\nimport { camelToSnakeCase } from '../utils.js';\nimport { getEnumValues } from '../utils.js';\nimport { intersection } from '../utils.js';\nimport { maxIndex } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport { Player } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ArmorType } from '../proto/common.js';\nimport { Class } from '../proto/common.js';\nimport { Enchant } from '../proto/common.js';\nimport { EnchantType } from '../proto/common.js';\nimport { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { HandType } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Item } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { Faction } from '../proto/common.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { RangedWeaponType } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { Blessings } from '../proto/paladin.js';\nimport { BlessingsAssignment } from '../proto/ui.js';\nimport { BlessingsAssignments } from '../proto/ui.js';\n\nimport { Stats } from './stats.js';\n\nimport * as Gems from '../proto_utils/gems.js';\n\nimport {\n    BalanceDruid,\n    FeralDruid,\n    FeralTankDruid,\n    BalanceDruid_Rotation as BalanceDruidRotation,\n    FeralDruid_Rotation as FeralDruidRotation,\n    FeralTankDruid_Rotation as FeralTankDruidRotation,\n    DruidTalents,\n    BalanceDruid_Options as BalanceDruidOptions,\n    FeralDruid_Options as FeralDruidOptions,\n    FeralTankDruid_Options as FeralTankDruidOptions\n} from '../proto/druid.js';\nimport { ElementalShaman, EnhancementShaman_Rotation as EnhancementShamanRotation, ElementalShaman_Rotation as ElementalShamanRotation, ShamanTalents, ElementalShaman_Options as ElementalShamanOptions, EnhancementShaman_Options as EnhancementShamanOptions, EnhancementShaman } from '../proto/shaman.js';\nimport { Hunter, Hunter_Rotation as HunterRotation, HunterTalents, Hunter_Options as HunterOptions } from '../proto/hunter.js';\nimport { Mage, Mage_Rotation as MageRotation, MageTalents, Mage_Options as MageOptions } from '../proto/mage.js';\nimport { Rogue, Rogue_Rotation as RogueRotation, RogueTalents, Rogue_Options as RogueOptions } from '../proto/rogue.js';\nimport { RetributionPaladin, RetributionPaladin_Rotation as RetributionPaladinRotation, PaladinTalents, RetributionPaladin_Options as RetributionPaladinOptions } from '../proto/paladin.js';\nimport { ProtectionPaladin, ProtectionPaladin_Rotation as ProtectionPaladinRotation, ProtectionPaladin_Options as ProtectionPaladinOptions } from '../proto/paladin.js';\nimport { ShadowPriest, SmitePriest_Rotation as SmitePriestRotation, ShadowPriest_Rotation as ShadowPriestRotation, PriestTalents, ShadowPriest_Options as ShadowPriestOptions, SmitePriest_Options as SmitePriestOptions, SmitePriest } from '../proto/priest.js';\nimport { Warlock, Warlock_Rotation as WarlockRotation, WarlockTalents, Warlock_Options as WarlockOptions } from '../proto/warlock.js';\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents, Warrior_Options as WarriorOptions } from '../proto/warrior.js';\nimport { Deathknight, Deathknight_Rotation as DeathknightRotation, DeathknightTalents, Deathknight_Options as DeathknightOptions } from '../proto/deathknight.js';\nimport { TankDeathknight, TankDeathknight_Rotation as TankDeathknightRotation, TankDeathknight_Options as TankDeathknightOptions } from '../proto/deathknight.js';\nimport { ProtectionWarrior, ProtectionWarrior_Rotation as ProtectionWarriorRotation, ProtectionWarrior_Options as ProtectionWarriorOptions } from '../proto/warrior.js';\n\nexport type DeathknightSpecs = [Spec.SpecDeathknight, Spec.SpecTankDeathknight];\nexport type DruidSpecs = [Spec.SpecBalanceDruid, Spec.SpecFeralDruid, Spec.SpecFeralTankDruid];\nexport type HunterSpecs = Spec.SpecHunter;\nexport type MageSpecs = Spec.SpecMage;\nexport type RogueSpecs = Spec.SpecRogue;\nexport type PaladinSpecs = [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin];\nexport type PriestSpecs = [Spec.SpecShadowPriest, Spec.SpecSmitePriest];\nexport type ShamanSpecs = [Spec.SpecElementalShaman, Spec.SpecEnhancementShaman];\nexport type WarlockSpecs = Spec.SpecWarlock;\nexport type WarriorSpecs = [Spec.SpecWarrior, Spec.SpecProtectionWarrior];\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\n// The order in which specs should be presented, when it matters.\n// Currently this is only used for the order of the paladin blessings UI.\nexport const naturalSpecOrder: Array<Spec> = [\n    Spec.SpecBalanceDruid,\n    Spec.SpecFeralDruid,\n    Spec.SpecFeralTankDruid,\n    Spec.SpecHunter,\n    Spec.SpecMage,\n    Spec.SpecRetributionPaladin,\n    Spec.SpecProtectionPaladin,\n    Spec.SpecShadowPriest,\n    Spec.SpecSmitePriest,\n    Spec.SpecRogue,\n    Spec.SpecElementalShaman,\n    Spec.SpecEnhancementShaman,\n    Spec.SpecWarlock,\n    Spec.SpecWarrior,\n    Spec.SpecProtectionWarrior,\n    Spec.SpecDeathknight,\n    Spec.SpecTankDeathknight,\n];\n\nexport const specNames: Record<Spec, string> = {\n    [Spec.SpecBalanceDruid]: 'Balance Druid',\n    [Spec.SpecElementalShaman]: 'Elemental Shaman',\n    [Spec.SpecEnhancementShaman]: 'Enhancement Shaman',\n    [Spec.SpecFeralDruid]: 'Feral Druid',\n    [Spec.SpecFeralTankDruid]: 'Feral Tank Druid',\n    [Spec.SpecHunter]: 'Hunter',\n    [Spec.SpecMage]: 'Mage',\n    [Spec.SpecRogue]: 'Rogue',\n    [Spec.SpecRetributionPaladin]: 'Retribution Paladin',\n    [Spec.SpecProtectionPaladin]: 'Protection Paladin',\n    [Spec.SpecShadowPriest]: 'Shadow Priest',\n    [Spec.SpecWarlock]: 'Warlock',\n    [Spec.SpecWarrior]: 'Warrior',\n    [Spec.SpecProtectionWarrior]: 'Protection Warrior',\n    [Spec.SpecSmitePriest]: 'Smite Priest',\n    [Spec.SpecDeathknight]: 'Death Knight',\n    [Spec.SpecTankDeathknight]: 'Death Knight Tank',\n};\n\nexport const classColors: Record<Class, string> = {\n    [Class.ClassUnknown]: '#fff',\n    [Class.ClassDruid]: '#ff7d0a',\n    [Class.ClassHunter]: '#abd473',\n    [Class.ClassMage]: '#69ccf0',\n    [Class.ClassPaladin]: '#f58cba',\n    [Class.ClassPriest]: '#fff',\n    [Class.ClassRogue]: '#fff569',\n    [Class.ClassShaman]: '#2459ff',\n    [Class.ClassWarlock]: '#9482c9',\n    [Class.ClassWarrior]: '#c79c6e',\n    [Class.ClassDeathknight]: '#c41e3a'\n}\n\nexport const specIconsLarge: Record<Spec, string> = {\n    [Spec.SpecBalanceDruid]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_starfall.jpg',\n    [Spec.SpecElementalShaman]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n    [Spec.SpecEnhancementShaman]: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_stormstrike.jpg',\n    [Spec.SpecFeralDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_catform.jpg',\n    [Spec.SpecFeralTankDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg',\n    [Spec.SpecHunter]: 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg',\n    [Spec.SpecMage]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_magicalsentry.jpg',\n    [Spec.SpecRogue]: 'https://wow.zamimg.com/images/wow/icons/large/classicon_rogue.jpg',\n    [Spec.SpecRetributionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_auraoflight.jpg',\n    [Spec.SpecProtectionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_devotionaura.jpg',\n    [Spec.SpecShadowPriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowwordpain.jpg',\n    [Spec.SpecWarlock]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg',\n    [Spec.SpecWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_innerrage.jpg',\n    [Spec.SpecProtectionWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_defensivestance.jpg',\n    [Spec.SpecSmitePriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holysmite.jpg',\n    [Spec.SpecDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n    [Spec.SpecTankDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n};\n\nexport const talentTreeIcons: Record<Class, Array<string>> = {\n    [Class.ClassUnknown]: [],\n    [Class.ClassDruid]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_starfall.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_racial_bearform.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_healingtouch.jpg',\n    ],\n    [Class.ClassHunter]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_beasttaming.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_marksmanship.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_swiftstrike.jpg',\n    ],\n    [Class.ClassMage]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_magicalsentry.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_fire_firebolt02.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_frost_frostbolt02.jpg',\n    ],\n    [Class.ClassPaladin]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_devotionaura.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_auraoflight.jpg',\n    ],\n    [Class.ClassPriest]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowwordpain.jpg',\n    ],\n    [Class.ClassRogue]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_rogue_eviscerate.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_backstab.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_stealth.jpg',\n    ],\n    [Class.ClassShaman]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_lightning.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_shaman_stormstrike.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_magicimmunity.jpg',\n    ],\n    [Class.ClassWarlock]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_deathcoil.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_metamorphosis.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_rainoffire.jpg',\n    ],\n    [Class.ClassWarrior]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg',\n    ],\n    [Class.ClassDeathknight]: [\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_bloodpresence.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_frostpresence.jpg',\n        'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_unholypresence.jpg',\n    ],\n};\n\nexport const titleIcons: Record<Spec, string> = {\n    [Spec.SpecBalanceDruid]: '/wotlk/assets/img/balance_druid_icon.png',\n    [Spec.SpecElementalShaman]: '/wotlk/assets/img/elemental_shaman_icon.png',\n    [Spec.SpecEnhancementShaman]: '/wotlk/assets/img/enhancement_shaman_icon.png',\n    [Spec.SpecFeralDruid]: '/wotlk/assets/img/feral_druid_icon.png',\n    [Spec.SpecFeralTankDruid]: '/wotlk/assets/img/feral_druid_tank_icon.png',\n    [Spec.SpecHunter]: '/wotlk/assets/img/hunter_icon.png',\n    [Spec.SpecMage]: '/wotlk/assets/img/mage_icon.png',\n    [Spec.SpecRogue]: '/wotlk/assets/img/rogue_icon.png',\n    [Spec.SpecRetributionPaladin]: '/wotlk/assets/img/retribution_icon.png',\n    [Spec.SpecProtectionPaladin]: '/wotlk/assets/img/protection_paladin_icon.png',\n    [Spec.SpecShadowPriest]: '/wotlk/assets/img/shadow_priest_icon.png',\n    [Spec.SpecWarlock]: '/wotlk/assets/img/warlock_icon.png',\n    [Spec.SpecWarrior]: '/wotlk/assets/img/warrior_icon.png',\n    [Spec.SpecProtectionWarrior]: '/wotlk/assets/img/protection_warrior_icon.png',\n    [Spec.SpecSmitePriest]: '/wotlk/assets/img/smite_priest_icon.png',\n    [Spec.SpecDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n    [Spec.SpecTankDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n};\n\nexport const raidSimIcon: string = '/wotlk/assets/img/raid_icon.png';\n\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char))));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTreeIcon(spec: Spec, talentsString: string): string {\n    const talentTreeIdx = getTalentTree(talentsString);\n    return talentTreeIcons[specToClass[spec]][talentTreeIdx];\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/SPEC/`);\nexport function getSpecSiteUrl(spec: Spec): string {\n    let specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n    specString = specString.substring('Spec'.length); // 'BalanceDruid'\n    specString = camelToSnakeCase(specString); // 'balance_druid'\n    return specSiteUrlTemplate.toString().replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport type RotationUnion =\n    BalanceDruidRotation |\n    FeralDruidRotation |\n    FeralTankDruidRotation |\n    HunterRotation |\n    MageRotation |\n    ElementalShamanRotation |\n    EnhancementShamanRotation |\n    RogueRotation |\n    RetributionPaladinRotation |\n    ProtectionPaladinRotation |\n    ShadowPriestRotation |\n    WarlockRotation |\n    WarriorRotation |\n    ProtectionWarriorRotation |\n    SmitePriestRotation |\n    DeathknightRotation |\n    TankDeathknightRotation;\nexport type SpecRotation<T extends Spec> =\n    T extends Spec.SpecBalanceDruid ? BalanceDruidRotation :\n    T extends Spec.SpecElementalShaman ? ElementalShamanRotation :\n    T extends Spec.SpecEnhancementShaman ? EnhancementShamanRotation :\n    T extends Spec.SpecFeralDruid ? FeralDruidRotation :\n    T extends Spec.SpecFeralTankDruid ? FeralTankDruidRotation :\n    T extends Spec.SpecHunter ? HunterRotation :\n    T extends Spec.SpecMage ? MageRotation :\n    T extends Spec.SpecRogue ? RogueRotation :\n    T extends Spec.SpecRetributionPaladin ? RetributionPaladinRotation :\n    T extends Spec.SpecProtectionPaladin ? ProtectionPaladinRotation :\n    T extends Spec.SpecShadowPriest ? ShadowPriestRotation :\n    T extends Spec.SpecWarlock ? WarlockRotation :\n    T extends Spec.SpecWarrior ? WarriorRotation :\n    T extends Spec.SpecProtectionWarrior ? ProtectionWarriorRotation :\n    T extends Spec.SpecSmitePriest ? SmitePriestRotation :\n    T extends Spec.SpecDeathknight ? DeathknightRotation :\n    T extends Spec.SpecTankDeathknight ? TankDeathknightRotation :\n    ElementalShamanRotation; // Should never reach this case\n\nexport type TalentsUnion =\n    DruidTalents |\n    HunterTalents |\n    MageTalents |\n    RogueTalents |\n    PaladinTalents |\n    PriestTalents |\n    ShamanTalents |\n    WarlockTalents |\n    WarriorTalents |\n    DeathknightTalents;\nexport type SpecTalents<T extends Spec> =\n    T extends Spec.SpecBalanceDruid ? DruidTalents :\n    T extends Spec.SpecElementalShaman ? ShamanTalents :\n    T extends Spec.SpecEnhancementShaman ? ShamanTalents :\n    T extends Spec.SpecFeralDruid ? DruidTalents :\n    T extends Spec.SpecFeralTankDruid ? DruidTalents :\n    T extends Spec.SpecHunter ? HunterTalents :\n    T extends Spec.SpecMage ? MageTalents :\n    T extends Spec.SpecRogue ? RogueTalents :\n    T extends Spec.SpecRetributionPaladin ? PaladinTalents :\n    T extends Spec.SpecProtectionPaladin ? PaladinTalents :\n    T extends Spec.SpecShadowPriest ? PriestTalents :\n    T extends Spec.SpecWarlock ? WarlockTalents :\n    T extends Spec.SpecWarrior ? WarriorTalents :\n    T extends Spec.SpecProtectionWarrior ? WarriorTalents :\n    T extends Spec.SpecSmitePriest ? PriestTalents :\n    T extends Spec.SpecDeathknight ? DeathknightTalents :\n    T extends Spec.SpecTankDeathknight ? DeathknightTalents :\n    ShamanTalents; // Should never reach this case\n\nexport type SpecOptionsUnion =\n    BalanceDruidOptions |\n    ElementalShamanOptions |\n    EnhancementShamanOptions |\n    FeralDruidOptions |\n    FeralTankDruidOptions |\n    HunterOptions |\n    MageOptions |\n    RogueOptions |\n    RetributionPaladinOptions |\n    ProtectionPaladinOptions |\n    ShadowPriestOptions |\n    WarlockOptions |\n    WarriorOptions |\n    ProtectionWarriorOptions |\n    SmitePriestOptions |\n    DeathknightOptions |\n    TankDeathknightOptions;\nexport type SpecOptions<T extends Spec> =\n    T extends Spec.SpecBalanceDruid ? BalanceDruidOptions :\n    T extends Spec.SpecElementalShaman ? ElementalShamanOptions :\n    T extends Spec.SpecEnhancementShaman ? EnhancementShamanOptions :\n    T extends Spec.SpecFeralDruid ? FeralDruidOptions :\n    T extends Spec.SpecFeralTankDruid ? FeralTankDruidOptions :\n    T extends Spec.SpecHunter ? HunterOptions :\n    T extends Spec.SpecMage ? MageOptions :\n    T extends Spec.SpecRogue ? RogueOptions :\n    T extends Spec.SpecRetributionPaladin ? RetributionPaladinOptions :\n    T extends Spec.SpecProtectionPaladin ? ProtectionPaladinOptions :\n    T extends Spec.SpecShadowPriest ? ShadowPriestOptions :\n    T extends Spec.SpecWarlock ? WarlockOptions :\n    T extends Spec.SpecWarrior ? WarriorOptions :\n    T extends Spec.SpecProtectionWarrior ? ProtectionWarriorOptions :\n    T extends Spec.SpecSmitePriest ? SmitePriestOptions :\n    T extends Spec.SpecDeathknight ? DeathknightOptions :\n    T extends Spec.SpecTankDeathknight ? TankDeathknightOptions :\n    ElementalShamanOptions; // Should never reach this case\n\nexport type SpecProtoUnion =\n    BalanceDruid |\n    ElementalShaman |\n    EnhancementShaman |\n    FeralDruid |\n    FeralTankDruid |\n    Hunter |\n    Mage |\n    Rogue |\n    RetributionPaladin |\n    ProtectionPaladin |\n    ShadowPriest |\n    Warlock |\n    Warrior |\n    ProtectionWarrior |\n    SmitePriest |\n    Deathknight |\n    TankDeathknight;\nexport type SpecProto<T extends Spec> =\n    T extends Spec.SpecBalanceDruid ? BalanceDruid :\n    T extends Spec.SpecElementalShaman ? ElementalShaman :\n    T extends Spec.SpecEnhancementShaman ? EnhancementShaman :\n    T extends Spec.SpecFeralDruid ? FeralDruid :\n    T extends Spec.SpecFeralTankDruid ? FeralTankDruid :\n    T extends Spec.SpecHunter ? Hunter :\n    T extends Spec.SpecMage ? Mage :\n    T extends Spec.SpecRogue ? Rogue :\n    T extends Spec.SpecRetributionPaladin ? RetributionPaladin :\n    T extends Spec.SpecProtectionPaladin ? ProtectionPaladin :\n    T extends Spec.SpecShadowPriest ? ShadowPriest :\n    T extends Spec.SpecWarlock ? Warlock :\n    T extends Spec.SpecWarrior ? Warrior :\n    T extends Spec.SpecProtectionWarrior ? ProtectionWarrior :\n    T extends Spec.SpecSmitePriest ? SmitePriest :\n    T extends Spec.SpecDeathknight ? Deathknight :\n    T extends Spec.SpecTankDeathknight ? TankDeathknight :\n    ElementalShaman; // Should never reach this case\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n    rotationCreate: () => SpecRotation<SpecType>;\n    rotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n    rotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n    rotationToJson: (a: SpecRotation<SpecType>) => any;\n    rotationFromJson: (obj: any) => SpecRotation<SpecType>;\n    rotationFromPlayer: (player: Player) => SpecRotation<SpecType>;\n\n    talentsCreate: () => SpecTalents<SpecType>;\n    talentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n    talentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n    talentsToJson: (a: SpecTalents<SpecType>) => any;\n    talentsFromJson: (obj: any) => SpecTalents<SpecType>;\n    talentsFromPlayer: (player: Player) => SpecTalents<SpecType>;\n\n    optionsCreate: () => SpecOptions<SpecType>;\n    optionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n    optionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n    optionsToJson: (a: SpecOptions<SpecType>) => any;\n    optionsFromJson: (obj: any) => SpecOptions<SpecType>;\n    optionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n    [Spec.SpecBalanceDruid]: {\n        rotationCreate: () => BalanceDruidRotation.create(),\n        rotationEquals: (a, b) => BalanceDruidRotation.equals(a as BalanceDruidRotation, b as BalanceDruidRotation),\n        rotationCopy: (a) => BalanceDruidRotation.clone(a as BalanceDruidRotation),\n        rotationToJson: (a) => BalanceDruidRotation.toJson(a as BalanceDruidRotation),\n        rotationFromJson: (obj) => BalanceDruidRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n            ? player.spec.balanceDruid.rotation || BalanceDruidRotation.create()\n            : BalanceDruidRotation.create(),\n\n        talentsCreate: () => DruidTalents.create(),\n        talentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n        talentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n        talentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n        talentsFromJson: (obj) => DruidTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n            ? player.spec.balanceDruid.talents || DruidTalents.create()\n            : DruidTalents.create(),\n\n        optionsCreate: () => BalanceDruidOptions.create(),\n        optionsEquals: (a, b) => BalanceDruidOptions.equals(a as BalanceDruidOptions, b as BalanceDruidOptions),\n        optionsCopy: (a) => BalanceDruidOptions.clone(a as BalanceDruidOptions),\n        optionsToJson: (a) => BalanceDruidOptions.toJson(a as BalanceDruidOptions),\n        optionsFromJson: (obj) => BalanceDruidOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n            ? player.spec.balanceDruid.options || BalanceDruidOptions.create()\n            : BalanceDruidOptions.create(),\n    },\n    [Spec.SpecElementalShaman]: {\n        rotationCreate: () => ElementalShamanRotation.create(),\n        rotationEquals: (a, b) => ElementalShamanRotation.equals(a as ElementalShamanRotation, b as ElementalShamanRotation),\n        rotationCopy: (a) => ElementalShamanRotation.clone(a as ElementalShamanRotation),\n        rotationToJson: (a) => ElementalShamanRotation.toJson(a as ElementalShamanRotation),\n        rotationFromJson: (obj) => ElementalShamanRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n            ? player.spec.elementalShaman.rotation || ElementalShamanRotation.create()\n            : ElementalShamanRotation.create(),\n\n        talentsCreate: () => ShamanTalents.create(),\n        talentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n        talentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n        talentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n        talentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n            ? player.spec.elementalShaman.talents || ShamanTalents.create()\n            : ShamanTalents.create(),\n\n        optionsCreate: () => ElementalShamanOptions.create(),\n        optionsEquals: (a, b) => ElementalShamanOptions.equals(a as ElementalShamanOptions, b as ElementalShamanOptions),\n        optionsCopy: (a) => ElementalShamanOptions.clone(a as ElementalShamanOptions),\n        optionsToJson: (a) => ElementalShamanOptions.toJson(a as ElementalShamanOptions),\n        optionsFromJson: (obj) => ElementalShamanOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n            ? player.spec.elementalShaman.options || ElementalShamanOptions.create()\n            : ElementalShamanOptions.create(),\n    },\n    [Spec.SpecEnhancementShaman]: {\n        rotationCreate: () => EnhancementShamanRotation.create(),\n        rotationEquals: (a, b) => EnhancementShamanRotation.equals(a as EnhancementShamanRotation, b as EnhancementShamanRotation),\n        rotationCopy: (a) => EnhancementShamanRotation.clone(a as EnhancementShamanRotation),\n        rotationToJson: (a) => EnhancementShamanRotation.toJson(a as EnhancementShamanRotation),\n        rotationFromJson: (obj) => EnhancementShamanRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n            ? player.spec.enhancementShaman.rotation || EnhancementShamanRotation.create()\n            : EnhancementShamanRotation.create(),\n\n        talentsCreate: () => ShamanTalents.create(),\n        talentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n        talentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n        talentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n        talentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n            ? player.spec.enhancementShaman.talents || ShamanTalents.create()\n            : ShamanTalents.create(),\n\n        optionsCreate: () => EnhancementShamanOptions.create(),\n        optionsEquals: (a, b) => EnhancementShamanOptions.equals(a as EnhancementShamanOptions, b as EnhancementShamanOptions),\n        optionsCopy: (a) => EnhancementShamanOptions.clone(a as EnhancementShamanOptions),\n        optionsToJson: (a) => EnhancementShamanOptions.toJson(a as EnhancementShamanOptions),\n        optionsFromJson: (obj) => EnhancementShamanOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n            ? player.spec.enhancementShaman.options || EnhancementShamanOptions.create()\n            : EnhancementShamanOptions.create(),\n    },\n    [Spec.SpecFeralDruid]: {\n        rotationCreate: () => FeralDruidRotation.create(),\n        rotationEquals: (a, b) => FeralDruidRotation.equals(a as FeralDruidRotation, b as FeralDruidRotation),\n        rotationCopy: (a) => FeralDruidRotation.clone(a as FeralDruidRotation),\n        rotationToJson: (a) => FeralDruidRotation.toJson(a as FeralDruidRotation),\n        rotationFromJson: (obj) => FeralDruidRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n            ? player.spec.feralDruid.rotation || FeralDruidRotation.create()\n            : FeralDruidRotation.create(),\n\n        talentsCreate: () => DruidTalents.create(),\n        talentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n        talentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n        talentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n        talentsFromJson: (obj) => DruidTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n            ? player.spec.feralDruid.talents || DruidTalents.create()\n            : DruidTalents.create(),\n\n        optionsCreate: () => FeralDruidOptions.create(),\n        optionsEquals: (a, b) => FeralDruidOptions.equals(a as FeralDruidOptions, b as FeralDruidOptions),\n        optionsCopy: (a) => FeralDruidOptions.clone(a as FeralDruidOptions),\n        optionsToJson: (a) => FeralDruidOptions.toJson(a as FeralDruidOptions),\n        optionsFromJson: (obj) => FeralDruidOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n            ? player.spec.feralDruid.options || FeralDruidOptions.create()\n            : FeralDruidOptions.create(),\n    },\n    [Spec.SpecFeralTankDruid]: {\n        rotationCreate: () => FeralTankDruidRotation.create(),\n        rotationEquals: (a, b) => FeralTankDruidRotation.equals(a as FeralTankDruidRotation, b as FeralTankDruidRotation),\n        rotationCopy: (a) => FeralTankDruidRotation.clone(a as FeralTankDruidRotation),\n        rotationToJson: (a) => FeralTankDruidRotation.toJson(a as FeralTankDruidRotation),\n        rotationFromJson: (obj) => FeralTankDruidRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n            ? player.spec.feralTankDruid.rotation || FeralTankDruidRotation.create()\n            : FeralTankDruidRotation.create(),\n\n        talentsCreate: () => DruidTalents.create(),\n        talentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n        talentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n        talentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n        talentsFromJson: (obj) => DruidTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n            ? player.spec.feralTankDruid.talents || DruidTalents.create()\n            : DruidTalents.create(),\n\n        optionsCreate: () => FeralTankDruidOptions.create(),\n        optionsEquals: (a, b) => FeralTankDruidOptions.equals(a as FeralTankDruidOptions, b as FeralTankDruidOptions),\n        optionsCopy: (a) => FeralTankDruidOptions.clone(a as FeralTankDruidOptions),\n        optionsToJson: (a) => FeralTankDruidOptions.toJson(a as FeralTankDruidOptions),\n        optionsFromJson: (obj) => FeralTankDruidOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n            ? player.spec.feralTankDruid.options || FeralTankDruidOptions.create()\n            : FeralTankDruidOptions.create(),\n    },\n    [Spec.SpecHunter]: {\n        rotationCreate: () => HunterRotation.create(),\n        rotationEquals: (a, b) => HunterRotation.equals(a as HunterRotation, b as HunterRotation),\n        rotationCopy: (a) => HunterRotation.clone(a as HunterRotation),\n        rotationToJson: (a) => HunterRotation.toJson(a as HunterRotation),\n        rotationFromJson: (obj) => HunterRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n            ? player.spec.hunter.rotation || HunterRotation.create()\n            : HunterRotation.create(),\n\n        talentsCreate: () => HunterTalents.create(),\n        talentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n        talentsCopy: (a) => HunterTalents.clone(a as HunterTalents),\n        talentsToJson: (a) => HunterTalents.toJson(a as HunterTalents),\n        talentsFromJson: (obj) => HunterTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n            ? player.spec.hunter.talents || HunterTalents.create()\n            : HunterTalents.create(),\n\n        optionsCreate: () => HunterOptions.create(),\n        optionsEquals: (a, b) => HunterOptions.equals(a as HunterOptions, b as HunterOptions),\n        optionsCopy: (a) => HunterOptions.clone(a as HunterOptions),\n        optionsToJson: (a) => HunterOptions.toJson(a as HunterOptions),\n        optionsFromJson: (obj) => HunterOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n            ? player.spec.hunter.options || HunterOptions.create()\n            : HunterOptions.create(),\n    },\n    [Spec.SpecMage]: {\n        rotationCreate: () => MageRotation.create(),\n        rotationEquals: (a, b) => MageRotation.equals(a as MageRotation, b as MageRotation),\n        rotationCopy: (a) => MageRotation.clone(a as MageRotation),\n        rotationToJson: (a) => MageRotation.toJson(a as MageRotation),\n        rotationFromJson: (obj) => MageRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'mage'\n            ? player.spec.mage.rotation || MageRotation.create()\n            : MageRotation.create(),\n\n        talentsCreate: () => MageTalents.create(),\n        talentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n        talentsCopy: (a) => MageTalents.clone(a as MageTalents),\n        talentsToJson: (a) => MageTalents.toJson(a as MageTalents),\n        talentsFromJson: (obj) => MageTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n            ? player.spec.mage.talents || MageTalents.create()\n            : MageTalents.create(),\n\n        optionsCreate: () => MageOptions.create(),\n        optionsEquals: (a, b) => MageOptions.equals(a as MageOptions, b as MageOptions),\n        optionsCopy: (a) => MageOptions.clone(a as MageOptions),\n        optionsToJson: (a) => MageOptions.toJson(a as MageOptions),\n        optionsFromJson: (obj) => MageOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n            ? player.spec.mage.options || MageOptions.create()\n            : MageOptions.create(),\n    },\n    [Spec.SpecRetributionPaladin]: {\n        rotationCreate: () => RetributionPaladinRotation.create(),\n        rotationEquals: (a, b) => RetributionPaladinRotation.equals(a as RetributionPaladinRotation, b as RetributionPaladinRotation),\n        rotationCopy: (a) => RetributionPaladinRotation.clone(a as RetributionPaladinRotation),\n        rotationToJson: (a) => RetributionPaladinRotation.toJson(a as RetributionPaladinRotation),\n        rotationFromJson: (obj) => RetributionPaladinRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n            ? player.spec.retributionPaladin.rotation || RetributionPaladinRotation.create()\n            : RetributionPaladinRotation.create(),\n\n        talentsCreate: () => PaladinTalents.create(),\n        talentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n        talentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n        talentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n        talentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n            ? player.spec.retributionPaladin.talents || PaladinTalents.create()\n            : PaladinTalents.create(),\n\n        optionsCreate: () => RetributionPaladinOptions.create(),\n        optionsEquals: (a, b) => RetributionPaladinOptions.equals(a as RetributionPaladinOptions, b as RetributionPaladinOptions),\n        optionsCopy: (a) => RetributionPaladinOptions.clone(a as RetributionPaladinOptions),\n        optionsToJson: (a) => RetributionPaladinOptions.toJson(a as RetributionPaladinOptions),\n        optionsFromJson: (obj) => RetributionPaladinOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n            ? player.spec.retributionPaladin.options || RetributionPaladinOptions.create()\n            : RetributionPaladinOptions.create(),\n    },\n    [Spec.SpecProtectionPaladin]: {\n        rotationCreate: () => ProtectionPaladinRotation.create(),\n        rotationEquals: (a, b) => ProtectionPaladinRotation.equals(a as ProtectionPaladinRotation, b as ProtectionPaladinRotation),\n        rotationCopy: (a) => ProtectionPaladinRotation.clone(a as ProtectionPaladinRotation),\n        rotationToJson: (a) => ProtectionPaladinRotation.toJson(a as ProtectionPaladinRotation),\n        rotationFromJson: (obj) => ProtectionPaladinRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n            ? player.spec.protectionPaladin.rotation || ProtectionPaladinRotation.create()\n            : ProtectionPaladinRotation.create(),\n\n        talentsCreate: () => PaladinTalents.create(),\n        talentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n        talentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n        talentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n        talentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n            ? player.spec.protectionPaladin.talents || PaladinTalents.create()\n            : PaladinTalents.create(),\n\n        optionsCreate: () => ProtectionPaladinOptions.create(),\n        optionsEquals: (a, b) => ProtectionPaladinOptions.equals(a as ProtectionPaladinOptions, b as ProtectionPaladinOptions),\n        optionsCopy: (a) => ProtectionPaladinOptions.clone(a as ProtectionPaladinOptions),\n        optionsToJson: (a) => ProtectionPaladinOptions.toJson(a as ProtectionPaladinOptions),\n        optionsFromJson: (obj) => ProtectionPaladinOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n            ? player.spec.protectionPaladin.options || ProtectionPaladinOptions.create()\n            : ProtectionPaladinOptions.create(),\n    },\n    [Spec.SpecRogue]: {\n        rotationCreate: () => RogueRotation.create(),\n        rotationEquals: (a, b) => RogueRotation.equals(a as RogueRotation, b as RogueRotation),\n        rotationCopy: (a) => RogueRotation.clone(a as RogueRotation),\n        rotationToJson: (a) => RogueRotation.toJson(a as RogueRotation),\n        rotationFromJson: (obj) => RogueRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n            ? player.spec.rogue.rotation || RogueRotation.create()\n            : RogueRotation.create(),\n\n        talentsCreate: () => RogueTalents.create(),\n        talentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n        talentsCopy: (a) => RogueTalents.clone(a as RogueTalents),\n        talentsToJson: (a) => RogueTalents.toJson(a as RogueTalents),\n        talentsFromJson: (obj) => RogueTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n            ? player.spec.rogue.talents || RogueTalents.create()\n            : RogueTalents.create(),\n\n        optionsCreate: () => RogueOptions.create(),\n        optionsEquals: (a, b) => RogueOptions.equals(a as RogueOptions, b as RogueOptions),\n        optionsCopy: (a) => RogueOptions.clone(a as RogueOptions),\n        optionsToJson: (a) => RogueOptions.toJson(a as RogueOptions),\n        optionsFromJson: (obj) => RogueOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n            ? player.spec.rogue.options || RogueOptions.create()\n            : RogueOptions.create(),\n    },\n    [Spec.SpecShadowPriest]: {\n        rotationCreate: () => ShadowPriestRotation.create(),\n        rotationEquals: (a, b) => ShadowPriestRotation.equals(a as ShadowPriestRotation, b as ShadowPriestRotation),\n        rotationCopy: (a) => ShadowPriestRotation.clone(a as ShadowPriestRotation),\n        rotationToJson: (a) => ShadowPriestRotation.toJson(a as ShadowPriestRotation),\n        rotationFromJson: (obj) => ShadowPriestRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n            ? player.spec.shadowPriest.rotation || ShadowPriestRotation.create()\n            : ShadowPriestRotation.create(),\n\n        talentsCreate: () => PriestTalents.create(),\n        talentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n        talentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n        talentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n        talentsFromJson: (obj) => PriestTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n            ? player.spec.shadowPriest.talents || PriestTalents.create()\n            : PriestTalents.create(),\n\n        optionsCreate: () => ShadowPriestOptions.create(),\n        optionsEquals: (a, b) => ShadowPriestOptions.equals(a as ShadowPriestOptions, b as ShadowPriestOptions),\n        optionsCopy: (a) => ShadowPriestOptions.clone(a as ShadowPriestOptions),\n        optionsToJson: (a) => ShadowPriestOptions.toJson(a as ShadowPriestOptions),\n        optionsFromJson: (obj) => ShadowPriestOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n            ? player.spec.shadowPriest.options || ShadowPriestOptions.create()\n            : ShadowPriestOptions.create(),\n    },\n    [Spec.SpecWarlock]: {\n        rotationCreate: () => WarlockRotation.create(),\n        rotationEquals: (a, b) => WarlockRotation.equals(a as WarlockRotation, b as WarlockRotation),\n        rotationCopy: (a) => WarlockRotation.clone(a as WarlockRotation),\n        rotationToJson: (a) => WarlockRotation.toJson(a as WarlockRotation),\n        rotationFromJson: (obj) => WarlockRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n            ? player.spec.warlock.rotation || WarlockRotation.create()\n            : WarlockRotation.create(),\n\n        talentsCreate: () => WarlockTalents.create(),\n        talentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n        talentsCopy: (a) => WarlockTalents.clone(a as WarlockTalents),\n        talentsToJson: (a) => WarlockTalents.toJson(a as WarlockTalents),\n        talentsFromJson: (obj) => WarlockTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n            ? player.spec.warlock.talents || WarlockTalents.create()\n            : WarlockTalents.create(),\n\n        optionsCreate: () => WarlockOptions.create(),\n        optionsEquals: (a, b) => WarlockOptions.equals(a as WarlockOptions, b as WarlockOptions),\n        optionsCopy: (a) => WarlockOptions.clone(a as WarlockOptions),\n        optionsToJson: (a) => WarlockOptions.toJson(a as WarlockOptions),\n        optionsFromJson: (obj) => WarlockOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n            ? player.spec.warlock.options || WarlockOptions.create()\n            : WarlockOptions.create(),\n    },\n    [Spec.SpecWarrior]: {\n        rotationCreate: () => WarriorRotation.create(),\n        rotationEquals: (a, b) => WarriorRotation.equals(a as WarriorRotation, b as WarriorRotation),\n        rotationCopy: (a) => WarriorRotation.clone(a as WarriorRotation),\n        rotationToJson: (a) => WarriorRotation.toJson(a as WarriorRotation),\n        rotationFromJson: (obj) => WarriorRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n            ? player.spec.warrior.rotation || WarriorRotation.create()\n            : WarriorRotation.create(),\n\n        talentsCreate: () => WarriorTalents.create(),\n        talentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n        talentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n        talentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n        talentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n            ? player.spec.warrior.talents || WarriorTalents.create()\n            : WarriorTalents.create(),\n\n        optionsCreate: () => WarriorOptions.create(),\n        optionsEquals: (a, b) => WarriorOptions.equals(a as WarriorOptions, b as WarriorOptions),\n        optionsCopy: (a) => WarriorOptions.clone(a as WarriorOptions),\n        optionsToJson: (a) => WarriorOptions.toJson(a as WarriorOptions),\n        optionsFromJson: (obj) => WarriorOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n            ? player.spec.warrior.options || WarriorOptions.create()\n            : WarriorOptions.create(),\n    },\n    [Spec.SpecProtectionWarrior]: {\n        rotationCreate: () => ProtectionWarriorRotation.create(),\n        rotationEquals: (a, b) => ProtectionWarriorRotation.equals(a as ProtectionWarriorRotation, b as ProtectionWarriorRotation),\n        rotationCopy: (a) => ProtectionWarriorRotation.clone(a as ProtectionWarriorRotation),\n        rotationToJson: (a) => ProtectionWarriorRotation.toJson(a as ProtectionWarriorRotation),\n        rotationFromJson: (obj) => ProtectionWarriorRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n            ? player.spec.protectionWarrior.rotation || ProtectionWarriorRotation.create()\n            : ProtectionWarriorRotation.create(),\n\n        talentsCreate: () => WarriorTalents.create(),\n        talentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n        talentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n        talentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n        talentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n            ? player.spec.protectionWarrior.talents || WarriorTalents.create()\n            : WarriorTalents.create(),\n\n        optionsCreate: () => ProtectionWarriorOptions.create(),\n        optionsEquals: (a, b) => ProtectionWarriorOptions.equals(a as ProtectionWarriorOptions, b as ProtectionWarriorOptions),\n        optionsCopy: (a) => ProtectionWarriorOptions.clone(a as ProtectionWarriorOptions),\n        optionsToJson: (a) => ProtectionWarriorOptions.toJson(a as ProtectionWarriorOptions),\n        optionsFromJson: (obj) => ProtectionWarriorOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n            ? player.spec.protectionWarrior.options || ProtectionWarriorOptions.create()\n            : ProtectionWarriorOptions.create(),\n    },\n    [Spec.SpecSmitePriest]: {\n        rotationCreate: () => SmitePriestRotation.create(),\n        rotationEquals: (a, b) => SmitePriestRotation.equals(a as SmitePriestRotation, b as SmitePriestRotation),\n        rotationCopy: (a) => SmitePriestRotation.clone(a as SmitePriestRotation),\n        rotationToJson: (a) => SmitePriestRotation.toJson(a as SmitePriestRotation),\n        rotationFromJson: (obj) => SmitePriestRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n            ? player.spec.smitePriest.rotation || SmitePriestRotation.create()\n            : SmitePriestRotation.create(),\n\n        talentsCreate: () => PriestTalents.create(),\n        talentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n        talentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n        talentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n        talentsFromJson: (obj) => PriestTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n            ? player.spec.smitePriest.talents || PriestTalents.create()\n            : PriestTalents.create(),\n\n        optionsCreate: () => SmitePriestOptions.create(),\n        optionsEquals: (a, b) => SmitePriestOptions.equals(a as SmitePriestOptions, b as SmitePriestOptions),\n        optionsCopy: (a) => SmitePriestOptions.clone(a as SmitePriestOptions),\n        optionsToJson: (a) => SmitePriestOptions.toJson(a as SmitePriestOptions),\n        optionsFromJson: (obj) => SmitePriestOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n            ? player.spec.smitePriest.options || SmitePriestOptions.create()\n            : SmitePriestOptions.create(),\n    },\n    [Spec.SpecDeathknight]: {\n        rotationCreate: () => DeathknightRotation.create(),\n        rotationEquals: (a, b) => DeathknightRotation.equals(a as DeathknightRotation, b as DeathknightRotation),\n        rotationCopy: (a) => DeathknightRotation.clone(a as DeathknightRotation),\n        rotationToJson: (a) => DeathknightRotation.toJson(a as DeathknightRotation),\n        rotationFromJson: (obj) => DeathknightRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n            ? player.spec.deathknight.rotation || DeathknightRotation.create()\n            : DeathknightRotation.create(),\n\n        talentsCreate: () => DeathknightTalents.create(),\n        talentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n        talentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n        talentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n        talentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n            ? player.spec.deathknight.talents || DeathknightTalents.create()\n            : DeathknightTalents.create(),\n\n        optionsCreate: () => DeathknightOptions.create(),\n        optionsEquals: (a, b) => DeathknightOptions.equals(a as DeathknightOptions, b as DeathknightOptions),\n        optionsCopy: (a) => DeathknightOptions.clone(a as DeathknightOptions),\n        optionsToJson: (a) => DeathknightOptions.toJson(a as DeathknightOptions),\n        optionsFromJson: (obj) => DeathknightOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n            ? player.spec.deathknight.options || DeathknightOptions.create()\n            : DeathknightOptions.create(),\n    },\n    [Spec.SpecTankDeathknight]: {\n        rotationCreate: () => TankDeathknightRotation.create(),\n        rotationEquals: (a, b) => TankDeathknightRotation.equals(a as TankDeathknightRotation, b as TankDeathknightRotation),\n        rotationCopy: (a) => TankDeathknightRotation.clone(a as TankDeathknightRotation),\n        rotationToJson: (a) => TankDeathknightRotation.toJson(a as TankDeathknightRotation),\n        rotationFromJson: (obj) => TankDeathknightRotation.fromJson(obj),\n        rotationFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n            ? player.spec.tankDeathknight.rotation || TankDeathknightRotation.create()\n            : TankDeathknightRotation.create(),\n\n        talentsCreate: () => DeathknightTalents.create(),\n        talentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n        talentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n        talentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n        talentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n        talentsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n            ? player.spec.tankDeathknight.talents || DeathknightTalents.create()\n            : DeathknightTalents.create(),\n\n        optionsCreate: () => TankDeathknightOptions.create(),\n        optionsEquals: (a, b) => TankDeathknightOptions.equals(a as TankDeathknightOptions, b as TankDeathknightOptions),\n        optionsCopy: (a) => TankDeathknightOptions.clone(a as TankDeathknightOptions),\n        optionsToJson: (a) => TankDeathknightOptions.toJson(a as TankDeathknightOptions),\n        optionsFromJson: (obj) => TankDeathknightOptions.fromJson(obj),\n        optionsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n            ? player.spec.tankDeathknight.options || TankDeathknightOptions.create()\n            : TankDeathknightOptions.create(),\n    },\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n    [Race.RaceUnknown]: Faction.Unknown,\n    [Race.RaceBloodElf]: Faction.Horde,\n    [Race.RaceDraenei]: Faction.Alliance,\n    [Race.RaceDwarf]: Faction.Alliance,\n    [Race.RaceGnome]: Faction.Alliance,\n    [Race.RaceHuman]: Faction.Alliance,\n    [Race.RaceNightElf]: Faction.Alliance,\n    [Race.RaceOrc]: Faction.Horde,\n    [Race.RaceTauren]: Faction.Horde,\n    [Race.RaceTroll]: Faction.Horde,\n    [Race.RaceUndead]: Faction.Horde,\n};\n\nexport const specToClass: Record<Spec, Class> = {\n    [Spec.SpecBalanceDruid]: Class.ClassDruid,\n    [Spec.SpecFeralDruid]: Class.ClassDruid,\n    [Spec.SpecFeralTankDruid]: Class.ClassDruid,\n    [Spec.SpecHunter]: Class.ClassHunter,\n    [Spec.SpecMage]: Class.ClassMage,\n    [Spec.SpecRogue]: Class.ClassRogue,\n    [Spec.SpecRetributionPaladin]: Class.ClassPaladin,\n    [Spec.SpecProtectionPaladin]: Class.ClassPaladin,\n    [Spec.SpecShadowPriest]: Class.ClassPriest,\n    [Spec.SpecSmitePriest]: Class.ClassPriest,\n    [Spec.SpecElementalShaman]: Class.ClassShaman,\n    [Spec.SpecEnhancementShaman]: Class.ClassShaman,\n    [Spec.SpecWarlock]: Class.ClassWarlock,\n    [Spec.SpecWarrior]: Class.ClassWarrior,\n    [Spec.SpecProtectionWarrior]: Class.ClassWarrior,\n    [Spec.SpecDeathknight]: Class.ClassDeathknight,\n    [Spec.SpecTankDeathknight]: Class.ClassDeathknight,\n};\n\nconst druidRaces = [\n    Race.RaceNightElf,\n    Race.RaceTauren,\n];\nconst hunterRaces = [\n    Race.RaceBloodElf,\n    Race.RaceDraenei,\n    Race.RaceDwarf,\n    Race.RaceNightElf,\n    Race.RaceOrc,\n    Race.RaceTauren,\n    Race.RaceTroll,\n];\nconst mageRaces = [\n    Race.RaceBloodElf,\n    Race.RaceDraenei,\n    Race.RaceGnome,\n    Race.RaceHuman,\n    Race.RaceTroll,\n    Race.RaceUndead,\n];\nconst paladinRaces = [\n    Race.RaceBloodElf,\n    Race.RaceDraenei,\n    Race.RaceDwarf,\n    Race.RaceHuman,\n];\nconst priestRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst rogueRaces = [\n    Race.RaceBloodElf,\n    Race.RaceDwarf,\n    Race.RaceGnome,\n    Race.RaceHuman,\n    Race.RaceNightElf,\n    Race.RaceOrc,\n    Race.RaceTroll,\n    Race.RaceUndead,\n];\nconst shamanRaces = [\n    Race.RaceDraenei,\n    Race.RaceOrc,\n    Race.RaceTauren,\n    Race.RaceTroll,\n];\nconst warlockRaces = [\n    Race.RaceBloodElf,\n    Race.RaceGnome,\n    Race.RaceHuman,\n    Race.RaceOrc,\n    Race.RaceUndead,\n];\nconst warriorRaces = [\n    Race.RaceDraenei,\n    Race.RaceDwarf,\n    Race.RaceGnome,\n    Race.RaceHuman,\n    Race.RaceNightElf,\n    Race.RaceOrc,\n    Race.RaceTauren,\n    Race.RaceTroll,\n    Race.RaceUndead,\n];\nconst deathKnightRaces = [\n    Race.RaceBloodElf,\n    Race.RaceDraenei,\n    Race.RaceDwarf,\n    Race.RaceGnome,\n    Race.RaceHuman,\n    Race.RaceNightElf,\n    Race.RaceOrc,\n    Race.RaceTauren,\n    Race.RaceTroll,\n    Race.RaceUndead,\n];\n\nexport const specToEligibleRaces: Record<Spec, Array<Race>> = {\n    [Spec.SpecBalanceDruid]: druidRaces,\n    [Spec.SpecElementalShaman]: shamanRaces,\n    [Spec.SpecEnhancementShaman]: shamanRaces,\n    [Spec.SpecFeralDruid]: druidRaces,\n    [Spec.SpecFeralTankDruid]: druidRaces,\n    [Spec.SpecHunter]: hunterRaces,\n    [Spec.SpecMage]: mageRaces,\n    [Spec.SpecRetributionPaladin]: paladinRaces,\n    [Spec.SpecProtectionPaladin]: paladinRaces,\n    [Spec.SpecRogue]: rogueRaces,\n    [Spec.SpecShadowPriest]: priestRaces,\n    [Spec.SpecWarlock]: warlockRaces,\n    [Spec.SpecWarrior]: warriorRaces,\n    [Spec.SpecProtectionWarrior]: warriorRaces,\n    [Spec.SpecSmitePriest]: priestRaces,\n    [Spec.SpecDeathknight]: deathKnightRaces,\n    [Spec.SpecTankDeathknight]: deathKnightRaces,\n};\n\n// Specs that can dual wield. This could be based on class, except that\n// Enhancement Shaman learn dual wield from a talent.\nconst dualWieldSpecs: Array<Spec> = [\n    Spec.SpecEnhancementShaman,\n    Spec.SpecHunter,\n    Spec.SpecRogue,\n    Spec.SpecWarrior,\n    Spec.SpecProtectionWarrior,\n    Spec.SpecDeathknight,\n    Spec.SpecTankDeathknight,\n];\nexport function isDualWieldSpec(spec: Spec): boolean {\n    return dualWieldSpecs.includes(spec);\n}\n\nconst tankSpecs: Array<Spec> = [\n    Spec.SpecFeralTankDruid,\n    Spec.SpecProtectionPaladin,\n    Spec.SpecProtectionWarrior,\n    Spec.SpecTankDeathknight,\n];\nexport function isTankSpec(spec: Spec): boolean {\n    return tankSpecs.includes(spec);\n}\n\n// Prefixes used for storing browser data for each site. Even if a Spec is\n// renamed, DO NOT change these values or people will lose their saved data.\nexport const specToLocalStorageKey: Record<Spec, string> = {\n    [Spec.SpecBalanceDruid]: '__wotlk_balance_druid',\n    [Spec.SpecElementalShaman]: '__wotlk_elemental_shaman',\n    [Spec.SpecEnhancementShaman]: '__wotlk_enhacement_shaman',\n    [Spec.SpecFeralDruid]: '__wotlk_feral_druid',\n    [Spec.SpecFeralTankDruid]: '__wotlk_feral_tank_druid',\n    [Spec.SpecHunter]: '__wotlk_hunter',\n    [Spec.SpecMage]: '__wotlk_mage',\n    [Spec.SpecRetributionPaladin]: '__wotlk_retribution_paladin',\n    [Spec.SpecProtectionPaladin]: '__wotlk_protection_paladin',\n    [Spec.SpecRogue]: '__wotlk_rogue',\n    [Spec.SpecShadowPriest]: '__wotlk_shadow_priest',\n    [Spec.SpecWarlock]: '__wotlk_warlock',\n    [Spec.SpecWarrior]: '__wotlk_warrior',\n    [Spec.SpecProtectionWarrior]: '__wotlk_protection_warrior',\n    [Spec.SpecSmitePriest]: '__wotlk_smite_priest',\n    [Spec.SpecDeathknight]: '__wotlk_deathknight',\n    [Spec.SpecTankDeathknight]: '__wotlk_tank_deathknight',\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpecProto<SpecType extends Spec>(\n    spec: Spec,\n    player: Player,\n    rotation: SpecRotation<SpecType>,\n    talents: SpecTalents<SpecType>,\n    specOptions: SpecOptions<SpecType>): Player {\n    const copy = Player.clone(player);\n\n    switch (spec) {\n        case Spec.SpecBalanceDruid:\n            copy.spec = {\n                oneofKind: 'balanceDruid',\n                balanceDruid: BalanceDruid.create({\n                    rotation: rotation as BalanceDruidRotation,\n                    talents: talents as DruidTalents,\n                    options: specOptions as BalanceDruidOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecElementalShaman:\n            copy.spec = {\n                oneofKind: 'elementalShaman',\n                elementalShaman: ElementalShaman.create({\n                    rotation: rotation as ElementalShamanRotation,\n                    talents: talents as ShamanTalents,\n                    options: specOptions as ElementalShamanOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecEnhancementShaman:\n            copy.spec = {\n                oneofKind: 'enhancementShaman',\n                enhancementShaman: EnhancementShaman.create({\n                    rotation: rotation as EnhancementShamanRotation,\n                    talents: talents as ShamanTalents,\n                    options: specOptions as ElementalShamanOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecFeralDruid:\n            copy.spec = {\n                oneofKind: 'feralDruid',\n                feralDruid: FeralDruid.create({\n                    rotation: rotation as FeralDruidRotation,\n                    talents: talents as DruidTalents,\n                    options: specOptions as FeralDruidOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecFeralTankDruid:\n            copy.spec = {\n                oneofKind: 'feralTankDruid',\n                feralTankDruid: FeralTankDruid.create({\n                    rotation: rotation as FeralTankDruidRotation,\n                    talents: talents as DruidTalents,\n                    options: specOptions as FeralTankDruidOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecHunter:\n            copy.spec = {\n                oneofKind: 'hunter',\n                hunter: Hunter.create({\n                    rotation: rotation as HunterRotation,\n                    talents: talents as HunterTalents,\n                    options: specOptions as HunterOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecMage:\n            copy.spec = {\n                oneofKind: 'mage',\n                mage: Mage.create({\n                    rotation: rotation as MageRotation,\n                    talents: talents as MageTalents,\n                    options: specOptions as MageOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecRetributionPaladin:\n            copy.spec = {\n                oneofKind: 'retributionPaladin',\n                retributionPaladin: RetributionPaladin.create({\n                    rotation: rotation as RetributionPaladinRotation,\n                    talents: talents as PaladinTalents,\n                    options: specOptions as RetributionPaladinOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecProtectionPaladin:\n            copy.spec = {\n                oneofKind: 'protectionPaladin',\n                protectionPaladin: ProtectionPaladin.create({\n                    rotation: rotation as ProtectionPaladinRotation,\n                    talents: talents as PaladinTalents,\n                    options: specOptions as ProtectionPaladinOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecRogue:\n            copy.spec = {\n                oneofKind: 'rogue',\n                rogue: Rogue.create({\n                    rotation: rotation as RogueRotation,\n                    talents: talents as RogueTalents,\n                    options: specOptions as RogueOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecShadowPriest:\n            copy.spec = {\n                oneofKind: 'shadowPriest',\n                shadowPriest: ShadowPriest.create({\n                    rotation: rotation as ShadowPriestRotation,\n                    talents: talents as PriestTalents,\n                    options: specOptions as ShadowPriestOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecWarlock:\n            copy.spec = {\n                oneofKind: 'warlock',\n                warlock: Warlock.create({\n                    rotation: rotation as WarlockRotation,\n                    talents: talents as WarlockTalents,\n                    options: specOptions as WarlockOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecWarrior:\n            copy.spec = {\n                oneofKind: 'warrior',\n                warrior: Warrior.create({\n                    rotation: rotation as WarriorRotation,\n                    talents: talents as WarriorTalents,\n                    options: specOptions as WarriorOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecProtectionWarrior:\n            copy.spec = {\n                oneofKind: 'protectionWarrior',\n                protectionWarrior: ProtectionWarrior.create({\n                    rotation: rotation as ProtectionWarriorRotation,\n                    talents: talents as WarriorTalents,\n                    options: specOptions as ProtectionWarriorOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecSmitePriest:\n            copy.spec = {\n                oneofKind: 'smitePriest',\n                smitePriest: SmitePriest.create({\n                    rotation: rotation as SmitePriestRotation,\n                    talents: talents as PriestTalents,\n                    options: specOptions as SmitePriestOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecDeathknight:\n            copy.spec = {\n                oneofKind: 'deathknight',\n                deathknight: Deathknight.create({\n                    rotation: rotation as DeathknightRotation,\n                    talents: talents as DeathknightTalents,\n                    options: specOptions as DeathknightOptions,\n                }),\n            };\n            return copy;\n        case Spec.SpecTankDeathknight:\n            copy.spec = {\n                oneofKind: 'tankDeathknight',\n                tankDeathknight: TankDeathknight.create({\n                    rotation: rotation as TankDeathknightRotation,\n                    talents: talents as DeathknightTalents,\n                    options: specOptions as TankDeathknightOptions,\n                }),\n            };\n            return copy;\n    }\n}\n\nexport function playerToSpec(player: Player): Spec {\n    const specValues = getEnumValues(Spec);\n    for (let i = 0; i < specValues.length; i++) {\n        const spec = specValues[i] as Spec;\n        let specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n        specString = specString.substring('Spec'.length); // 'BalanceDruid'\n        specString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n        if (player.spec.oneofKind == specString) {\n            return spec;\n        }\n    }\n\n    throw new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nconst classToMaxArmorType: Record<Class, ArmorType> = {\n    [Class.ClassUnknown]: ArmorType.ArmorTypeUnknown,\n    [Class.ClassDruid]: ArmorType.ArmorTypeLeather,\n    [Class.ClassHunter]: ArmorType.ArmorTypeMail,\n    [Class.ClassMage]: ArmorType.ArmorTypeCloth,\n    [Class.ClassPaladin]: ArmorType.ArmorTypePlate,\n    [Class.ClassPriest]: ArmorType.ArmorTypeCloth,\n    [Class.ClassRogue]: ArmorType.ArmorTypeLeather,\n    [Class.ClassShaman]: ArmorType.ArmorTypeMail,\n    [Class.ClassWarlock]: ArmorType.ArmorTypeCloth,\n    [Class.ClassWarrior]: ArmorType.ArmorTypePlate,\n    [Class.ClassDeathknight]: ArmorType.ArmorTypePlate,\n};\n\nconst classToEligibleRangedWeaponTypes: Record<Class, Array<RangedWeaponType>> = {\n    [Class.ClassUnknown]: [],\n    [Class.ClassDruid]: [RangedWeaponType.RangedWeaponTypeIdol],\n    [Class.ClassHunter]: [\n        RangedWeaponType.RangedWeaponTypeBow,\n        RangedWeaponType.RangedWeaponTypeCrossbow,\n        RangedWeaponType.RangedWeaponTypeGun,\n        RangedWeaponType.RangedWeaponTypeThrown,\n    ],\n    [Class.ClassMage]: [RangedWeaponType.RangedWeaponTypeWand],\n    [Class.ClassPaladin]: [RangedWeaponType.RangedWeaponTypeLibram],\n    [Class.ClassPriest]: [RangedWeaponType.RangedWeaponTypeWand],\n    [Class.ClassRogue]: [\n        RangedWeaponType.RangedWeaponTypeBow,\n        RangedWeaponType.RangedWeaponTypeCrossbow,\n        RangedWeaponType.RangedWeaponTypeGun,\n        RangedWeaponType.RangedWeaponTypeThrown,\n    ],\n    [Class.ClassShaman]: [RangedWeaponType.RangedWeaponTypeTotem],\n    [Class.ClassWarlock]: [RangedWeaponType.RangedWeaponTypeWand],\n    [Class.ClassWarrior]: [\n        RangedWeaponType.RangedWeaponTypeBow,\n        RangedWeaponType.RangedWeaponTypeCrossbow,\n        RangedWeaponType.RangedWeaponTypeGun,\n        RangedWeaponType.RangedWeaponTypeThrown,\n    ],\n    [Class.ClassDeathknight]: [\n        RangedWeaponType.RangedWeaponTypeSigil,\n    ],\n};\n\ninterface EligibleWeaponType {\n    weaponType: WeaponType,\n    canUseTwoHand?: boolean,\n}\n\nconst classToEligibleWeaponTypes: Record<Class, Array<EligibleWeaponType>> = {\n    [Class.ClassUnknown]: [],\n    [Class.ClassDruid]: [\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeFist },\n        { weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n    ],\n    [Class.ClassHunter]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeFist },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n    ],\n    [Class.ClassMage]: [\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeSword },\n    ],\n    [Class.ClassPaladin]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeShield },\n        { weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n    ],\n    [Class.ClassPriest]: [\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeMace },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n    ],\n    [Class.ClassRogue]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeFist },\n        { weaponType: WeaponType.WeaponTypeMace },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeSword },\n    ],\n    [Class.ClassShaman]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeFist },\n        { weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeShield },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n    ],\n    [Class.ClassWarlock]: [\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeSword },\n    ],\n    [Class.ClassWarrior]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeDagger },\n        { weaponType: WeaponType.WeaponTypeFist },\n        { weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeOffHand },\n        { weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeShield },\n        { weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n    ],\n    [Class.ClassDeathknight]: [\n        { weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n        { weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n        // TODO: validate proficiencies\n    ],\n};\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n    return [\n        WeaponType.WeaponTypeAxe,\n        WeaponType.WeaponTypeDagger,\n        WeaponType.WeaponTypePolearm,\n        WeaponType.WeaponTypeSword,\n    ].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n    return [\n        WeaponType.WeaponTypeFist,\n        WeaponType.WeaponTypeMace,\n        WeaponType.WeaponTypeStaff,\n    ].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {\n    [Spec.SpecBalanceDruid]: (gem, playerStats) => {\n        if (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n            // TODO: Fix this\n            return (((playerStats.getStat(Stat.StatSpellPower) * 0.795) + 603) * 2 * (playerStats.getStat(Stat.StatSpellCrit) / 2208) * 0.045) / 0.795;\n        }\n\n        return 0;\n    },\n    [Spec.SpecElementalShaman]: (gem, playerStats) => {\n        if (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n            return (((playerStats.getStat(Stat.StatSpellPower) * 0.795) + 603) * 2 * (playerStats.getStat(Stat.StatSpellCrit) / 2208) * 0.045) / 0.795;\n        }\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecWarlock]: (gem, playerStats) => {\n\t\t// TODO: make it gear dependant\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn 84;\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn 80;\n\t\t}\n\n\t\treturn 0;\n\t},\n};\n\nexport function getMetaGemEffectEP(spec: Spec, gem: Gem, playerStats: Stats) {\n    if (metaGemEffectEPs[spec]) {\n        return metaGemEffectEPs[spec]!(gem, playerStats);\n    } else {\n        return 0;\n    }\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem(item: Item, spec: Spec, slot: ItemSlot | undefined): boolean {\n    const playerClass = specToClass[spec];\n    if (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass)) {\n        return false;\n    }\n\n    if ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n        return true;\n    }\n\n    if (item.type == ItemType.ItemTypeWeapon) {\n        const eligibleWeaponType = classToEligibleWeaponTypes[playerClass].find(wt => wt.weaponType == item.weaponType);\n        if (!eligibleWeaponType) {\n            return false;\n        }\n\n        if ((item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand))\n          && ![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType)\n          && !dualWieldSpecs.includes(spec)) {\n          return false;\n        }\n\n        if (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n            return false;\n        }\n        if (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && spec != Spec.SpecWarrior) {\n            return false;\n        }\n\n        return true;\n    }\n\n    if (item.type == ItemType.ItemTypeRanged) {\n        return classToEligibleRangedWeaponTypes[playerClass].includes(item.rangedWeaponType);\n    }\n\n    // At this point, we know the item is an armor piece (feet, chest, legs, etc).\n    return classToMaxArmorType[playerClass] >= item.armorType;\n}\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n    [ItemType.ItemTypeUnknown]: [],\n    [ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n    [ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n    [ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n    [ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n    [ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n    [ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n    [ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n    [ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n    [ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n    [ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n    [ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n    [ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n    [ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n    if (itemTypeToSlotsMap[item.type]) {\n        return itemTypeToSlotsMap[item.type]!;\n    }\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n    // Should never reach here\n    throw new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n};\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n    if (mainHand == null || offHand == null) {\n        return true;\n    }\n\n    if (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n        return false;\n    }\n\n    return true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n// \n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n    if (itemTypeToSlotsMap[enchant.type]) {\n        return itemTypeToSlotsMap[enchant.type]!;\n    }\n\n    if (enchant.type == ItemType.ItemTypeWeapon) {\n        return [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n    }\n\n    // Should never reach here\n    throw new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n};\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n    const sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n    if (sharedSlots.length == 0)\n        return false;\n\n    if (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand)\n        return false;\n\n    if ((enchant.enchantType == EnchantType.EnchantTypeShield) != (item.weaponType == WeaponType.WeaponTypeShield))\n        return false;\n\n    if (item.weaponType == WeaponType.WeaponTypeOffHand)\n        return false;\n\n    if (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n        if (![\n            RangedWeaponType.RangedWeaponTypeBow,\n            RangedWeaponType.RangedWeaponTypeCrossbow,\n            RangedWeaponType.RangedWeaponTypeGun,\n        ].includes(item.rangedWeaponType))\n            return false;\n    }\n\n    return true;\n};\n\nexport function canEquipEnchant(enchant: Enchant, spec: Spec): boolean {\n    const playerClass = specToClass[spec];\n    if (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerClass)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport const NO_TARGET = -1;\n\nexport function newRaidTarget(raidIndex: number): RaidTarget {\n    return RaidTarget.create({\n        targetIndex: raidIndex,\n    });\n}\n\nexport function emptyRaidTarget(): RaidTarget {\n    return newRaidTarget(NO_TARGET);\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n    const assignments = BlessingsAssignments.create();\n    for (let i = 0; i < numPaladins; i++) {\n        assignments.paladins.push(BlessingsAssignment.create({\n            blessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n        }));\n    }\n    return assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number, data: Array<{ spec: Spec, blessings: Array<Blessings> }>): BlessingsAssignments {\n    const assignments = makeBlankBlessingsAssignments(numPaladins);\n    for (let i = 0; i < data.length; i++) {\n        const spec = data[i].spec;\n        const blessings = data[i].blessings;\n        for (let j = 0; j < blessings.length; j++) {\n            if (j >= assignments.paladins.length) {\n                // Can't assign more blessings since we ran out of paladins\n                break\n            }\n            assignments.paladins[j].blessings[spec] = blessings[j];\n        }\n    }\n    return assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n    return makeBlessingsAssignments(numPaladins, [\n        { spec: Spec.SpecBalanceDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecFeralDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecFeralTankDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n        { spec: Spec.SpecHunter, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecMage, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecRetributionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecProtectionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfSanctuary, Blessings.BlessingOfWisdom, Blessings.BlessingOfMight] },\n        { spec: Spec.SpecShadowPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecSmitePriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecRogue, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n        { spec: Spec.SpecElementalShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecEnhancementShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecWarlock, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n        { spec: Spec.SpecWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n        { spec: Spec.SpecProtectionWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n        { spec: Spec.SpecDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSalvation] },\n        { spec: Spec.SpecTankDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n    ]);\n};\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n    ResourceType.ResourceTypeHealth,\n    ResourceType.ResourceTypeMana,\n    ResourceType.ResourceTypeEnergy,\n    ResourceType.ResourceTypeRage,\n    ResourceType.ResourceTypeComboPoints,\n    ResourceType.ResourceTypeFocus,\n    ResourceType.ResourceTypeRunicPower,\n    ResourceType.ResourceTypeBloodRune,\n    ResourceType.ResourceTypeFrostRune,\n    ResourceType.ResourceTypeUnholyRune,\n    ResourceType.ResourceTypeDeathRune,\n];\n","import { ActionID as ActionIdProto } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\nimport { Item } from '../proto/common.js';\nimport { OtherAction } from '../proto/common.js';\nimport { getWowheadItemId } from '../proto_utils/equipped_item.js';\nimport { NO_TARGET } from '../proto_utils/utils.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n\ntype ItemData = {\n    ID: number,\n    Name: string,\n    Icon: string,\n};\ntype ItemDB = Record<number, ItemData>;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n    readonly itemId: number;\n    readonly spellId: number;\n    readonly otherId: OtherAction;\n    readonly tag: number;\n\n    readonly baseName: string; // The name without any tag additions.\n    readonly name: string;\n    readonly iconUrl: string;\n\n    private constructor(itemId: number, spellId: number, otherId: OtherAction, tag: number, baseName: string, name: string, iconUrl: string) {\n        this.itemId = itemId;\n        this.spellId = spellId;\n        this.otherId = otherId;\n        this.tag = tag;\n\n        switch (otherId) {\n            case OtherAction.OtherActionNone:\n                break;\n            case OtherAction.OtherActionWait:\n                baseName = 'Wait';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n                break;\n            case OtherAction.OtherActionManaRegen:\n                name = 'Mana Tick';\n                iconUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n                if (tag == 1) {\n                    name += ' (Casting)';\n                } else if (tag == 2) {\n                    name += ' (Not Casting)';\n                }\n                break;\n            case OtherAction.OtherActionEnergyRegen:\n                baseName = 'Energy Tick';\n                iconUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n                break;\n            case OtherAction.OtherActionFocusRegen:\n                baseName = 'Focus Tick';\n                iconUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n                break;\n            case OtherAction.OtherActionManaGain:\n                baseName = 'Mana Gain';\n                iconUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n                break;\n            case OtherAction.OtherActionRageGain:\n                baseName = 'Rage Gain';\n                iconUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n                break;\n            case OtherAction.OtherActionAttack:\n                name = 'Attack';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n                if (tag == 1) {\n                    name += ' (Main Hand)';\n                } else if (tag == 2) {\n                    name += ' (Off Hand)';\n                }\n                break;\n            case OtherAction.OtherActionShoot:\n                name = 'Shoot';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n                break;\n            case OtherAction.OtherActionPet:\n                break;\n            case OtherAction.OtherActionRefund:\n                baseName = 'Refund';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n                break;\n            case OtherAction.OtherActionDamageTaken:\n                baseName = 'Damage Taken';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n                break;\n            case OtherAction.OtherActionHealingModel:\n                baseName = 'Incoming HPS';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n                break;\n            case OtherAction.OtherActionBloodRuneGain:\n                baseName = 'Blood Rune Gain';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n                break;\n            case OtherAction.OtherActionFrostRuneGain:\n                baseName = 'Frost Rune Gain';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n                break;\n            case OtherAction.OtherActionUnholyRuneGain:\n                baseName = 'Unholy Rune Gain';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n                break;\n            case OtherAction.OtherActionDeathRuneGain:\n                baseName = 'Death Rune Gain';\n                iconUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n                break;\n        }\n        this.baseName = baseName;\n        this.name = name || baseName;\n        this.iconUrl = iconUrl;\n    }\n\n    anyId(): number {\n        return this.itemId || this.spellId || this.otherId;\n    }\n\n    equals(other: ActionId): boolean {\n        return this.equalsIgnoringTag(other) && this.tag == other.tag;\n    }\n\n    equalsIgnoringTag(other: ActionId): boolean {\n        return (\n            this.itemId == other.itemId\n            && this.spellId == other.spellId\n            && this.otherId == other.otherId);\n    }\n\n    setBackground(elem: HTMLElement) {\n        if (this.iconUrl) {\n            elem.style.backgroundImage = `url('${this.iconUrl}')`;\n        }\n    }\n\n    static makeItemUrl(id: number): string {\n        if (USE_WOTLK_DB) {\n            return 'https://wotlkdb.com/?item=' + id;\n        } else {\n            return 'https://wowhead.com/wotlk/item=' + id;\n        }\n    }\n    static makeSpellUrl(id: number): string {\n        if (USE_WOTLK_DB) {\n            return 'https://wotlkdb.com/?spell=' + id;\n        } else {\n            return 'https://wowhead.com/wotlk/spell=' + id;\n        }\n    }\n\n    setWowheadHref(elem: HTMLAnchorElement) {\n        if (this.itemId) {\n            elem.href = ActionId.makeItemUrl(this.itemId);\n        } else if (this.spellId) {\n            elem.href = ActionId.makeSpellUrl(this.spellId);\n        }\n    }\n\n    setBackgroundAndHref(elem: HTMLAnchorElement) {\n        this.setBackground(elem);\n        this.setWowheadHref(elem);\n    }\n\n    async fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n        const filled = await this.fill();\n        if (setHref) {\n            filled.setWowheadHref(elem);\n        }\n        if (setBackground) {\n            filled.setBackground(elem);\n        }\n        return filled;\n    }\n\n    // Returns an ActionId with the name and iconUrl fields filled.\n    // playerIndex is the optional index of the player to whom this ID corresponds.\n    async fill(playerIndex?: number): Promise<ActionId> {\n        if (this.name || this.iconUrl) {\n            return this;\n        }\n\n        if (this.otherId) {\n            return this;\n        }\n\n        const tooltipData = await ActionId.getTooltipData(this);\n\n        const baseName = tooltipData['name'];\n        let name = baseName;\n        switch (baseName) {\n            case 'Arcane Blast':\n                if (this.tag == 1) {\n                    name += ' (No Stacks)';\n                } else if (this.tag == 2) {\n                    name += ` (1 Stack)`;\n                } else if (this.tag > 2) {\n                    name += ` (${this.tag - 1} Stacks)`;\n                }\n                break;\n            case 'Fireball':\n            case 'Flamestrike':\n            case 'Pyroblast':\n                if (this.tag) name += ' (DoT)';\n                break;\n            case 'Mind Flay':\n                if (this.tag == 1) {\n                    name += ' (1 Tick)';\n                } else if (this.tag == 2) {\n                    name += ' (2 Tick)';\n                } else if (this.tag == 3) {\n                    name += ' (3 Tick)';\n                }\n                break;\n            case 'Envenom':\n            case 'Eviscerate':\n            case 'Expose Armor':\n            case 'Rupture':\n            case 'Slice and Dice':\n                if (this.tag) name += ` (${this.tag} CP)`;\n                break;\n            case 'Instant Poison IX':\n                if (this.tag == 1) {\n                    name += ' (Deadly)'\n                } else if (this.tag == 2) {\n                    name += ' (Shiv)'\n                }\n                break;\n            case 'Fan of Knives':\n            case 'Killing Spree':\n                if (this.tag == 1) {\n                    name += ' (Main Hand)'\n                } else if (this.tag == 2) {\n                    name += ' (Off Hand)'\n                }\n                break;\n            case 'Tricks of the Trade':\n                if (this.tag == 1) {\n                    name += ' (Not Self)'\n                }\n                break;\n            case 'Chain Lightning':\n            case 'Lightning Bolt':\n                if (this.tag) name += ' (LO)';\n                break;\n            case 'Holy Vengeance':\n                if (this.tag == 1) {\n                    name += ' (Swing Roll)'\n                } else if (this.tag == 2) {\n                    name += ' (DoT)'\n                }\n                break;\n            case 'Holy Shield':\n                if (this.tag == 1) {\n                    name += ' (Proc)';\n                }\n                break;\n            // For targetted buffs, tag is the source player's raid index or -1 if none.\n            case 'Bloodlust':\n            case 'Ferocious Inspiration':\n            case 'Innervate':\n            case 'Mana Tide Totem':\n            case 'Power Infusion':\n                if (this.tag != NO_TARGET) {\n                    if (this.tag === playerIndex) {\n                        name += ` (self)`;\n                    } else {\n                        name += ` (from #${this.tag + 1})`;\n                    }\n                }\n                break;\n            case 'Darkmoon Card: Crusade':\n                if (this.tag == 1) {\n                    name += ' (Melee)';\n                } else if (this.tag == 2) {\n                    name += ' (Spell)';\n                }\n                break;\n            case 'Scourge Strike':\n                if (this.tag == 1) {\n                    name += ' (Physical)';\n                } else if (this.tag == 2) {\n                    name += ' (Shadow)';\n                }\n                break;\n            case 'Frost Strike':\n            case 'Plague Strike':\n            case 'Blood Strike':\n            case 'Death Strike':\n            case 'Obliterate':\n            case 'Blood-Caked Strike':\n            case 'Lightning Speed':\n            case 'Windfury Weapon':\n                if (this.tag == 1) {\n                    name += ' (Main Hand)';\n                } else if (this.tag == 2) {\n                    name += ' (Off Hand)';\n                }\n                break;\n            case 'Battle Shout':\n                if (this.tag == 1) {\n                    name += ' (Snapshot)';\n                }\n                break;\n            case 'Seed of Corruption':\n                if (this.tag == 0) {\n                    name += ' (DoT)';\n                } else if (this.tag == 1) {\n                    name += ' (Explosion)';\n                }\n                break;\n            case 'Thunderfury':\n                if (this.tag == 1) {\n                    name += ' (ST)';\n                } else if (this.tag == 2) {\n                    name += ' (MT)';\n                }\n                break;\n            default:\n                if (this.tag) {\n                    name += ' (??)';\n                }\n                break;\n        }\n\n        const idString = this.toProtoString();\n        const iconOverrideId = idOverrides[idString] || null;\n\n        let iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n        if (iconOverrideId) {\n            const overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n            iconUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n        }\n\n        return new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl);\n    }\n\n    toString(): string {\n        return this.toStringIgnoringTag() + (this.tag ? ('-' + this.tag) : '');\n    }\n\n    toStringIgnoringTag(): string {\n        if (this.itemId) {\n            return 'item-' + this.itemId;\n        } else if (this.spellId) {\n            return 'spell-' + this.spellId;\n        } else if (this.otherId) {\n            return 'other-' + this.otherId;\n        } else {\n            throw new Error('Empty action id!');\n        }\n    }\n\n    toProto(): ActionIdProto {\n        const protoId = ActionIdProto.create({\n            tag: this.tag,\n        });\n\n        if (this.itemId) {\n            protoId.rawId = {\n                oneofKind: 'itemId',\n                itemId: this.itemId,\n            };\n        } else if (this.spellId) {\n            protoId.rawId = {\n                oneofKind: 'spellId',\n                spellId: this.spellId,\n            };\n        } else if (this.otherId) {\n            protoId.rawId = {\n                oneofKind: 'otherId',\n                otherId: this.otherId,\n            };\n        }\n\n        return protoId;\n    }\n\n    toProtoString(): string {\n        return ActionIdProto.toJsonString(this.toProto());\n    }\n\n    withoutTag(): ActionId {\n        return new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl);\n    }\n\n    static fromEmpty(): ActionId {\n        return new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n    }\n\n    static fromItemId(itemId: number, tag?: number): ActionId {\n        return new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '');\n    }\n\n    static fromSpellId(spellId: number, tag?: number): ActionId {\n        return new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n    }\n\n    static fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n        return new ActionId(0, 0, otherId, tag || 0, '', '', '');\n    }\n\n    static fromPetName(petName: string): ActionId {\n        return petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n    }\n\n    static fromItem(item: Item): ActionId {\n        return ActionId.fromItemId(getWowheadItemId(item));\n    }\n\n    static fromProto(protoId: ActionIdProto): ActionId {\n        if (protoId.rawId.oneofKind == 'spellId') {\n            return ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n        } else if (protoId.rawId.oneofKind == 'itemId') {\n            return ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n        } else if (protoId.rawId.oneofKind == 'otherId') {\n            return ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n        } else {\n            return ActionId.fromEmpty();\n        }\n    }\n\n    static fromLogString(str: string): ActionId {\n        const match = str.match(/{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/);\n        if (match) {\n            const idType = match[1];\n            const id = parseInt(match[5]);\n            return new ActionId(\n                idType == 'ItemID' ? id : 0,\n                idType == 'SpellID' ? id : 0,\n                idType == 'OtherID' ? id : 0,\n                match[7] ? parseInt(match[7]) : 0,\n                '', '', '');\n        } else {\n            console.warn('Failed to parse action id from log: ' + str);\n            return ActionId.fromEmpty();\n        }\n    }\n\n    private static makeIconUrl(iconLabel: string): string {\n        if (USE_WOTLK_DB) {\n            return `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n        } else {\n            return `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n        }\n    }\n\n    private static dbCache = new Map<string, Promise<ItemDB>>();\n    private static async getDb(url: string): Promise<ItemDB> {\n        if (!ActionId.dbCache.has(url)) {\n            ActionId.dbCache.set(url, fetch(url)\n                .then(response => response.json())\n                .then(responseJson => {\n                    const db: ItemDB = {};\n                    (responseJson as Array<ItemData>).forEach(item => {\n                        db[item.ID] = item;\n                    });\n                    return db;\n                }));\n        }\n        return ActionId.dbCache.get(url)!;\n    }\n    private static async getDbTooltipDataHelper(id: number, dbUrl: string): Promise<any> {\n        const db = await ActionId.getDb(dbUrl);\n        return db[id] ? {\n            name: db[id].Name,\n            icon: db[id].Icon,\n        } : {\n            name: '',\n            icon: '',\n        };\n    }\n    private static async getWowheadTooltipDataHelper(id: number, tooltipPostfix: string, cache: Map<number, Promise<any>>): Promise<any> {\n        if (!cache.has(id)) {\n            const url = `https://wowhead.com/wotlk/tooltip/${tooltipPostfix}/${id}`;\n            try {\n                const response = await fetch(url);\n                cache.set(id, response.json());\n            } catch (e) {\n                console.error('Error while fetching url: ' + url + '\\n\\n' + e);\n                cache.set(id, Promise.resolve({\n                    name: '',\n                    icon: '',\n                    tooltip: '',\n                }));\n            }\n        }\n\n        return cache.get(id) as Promise<any>;\n    }\n    private static async getWotlkdbTooltipDataHelper(id: number, tooltipPostfix: string, cache: Map<number, Promise<any>>): Promise<any> {\n        if (!cache.has(id)) {\n            const url = `https://wotlkdb.com/?${tooltipPostfix}=${id}&power`;\n            try {\n                const response = await fetch(url);\n                const data = await response.text();\n                const nameMatch = data.match(/name_enus: '(.*?)'/g);\n                const iconMatch = data.match(/icon: '(.*?)'/g);\n                const tooltipMatch = data.match(/tooltip_enus: '(.*?)'/g);\n                cache.set(id, Promise.resolve({\n                    name: nameMatch ? nameMatch[1] : '',\n                    icon: iconMatch ? iconMatch[1] : '',\n                    tooltip: tooltipMatch ? tooltipMatch[1] : '',\n                }));\n            } catch (e) {\n                console.error('Error while fetching url: ' + url + '\\n\\n' + e);\n                cache.set(id, Promise.resolve({\n                    name: '',\n                    icon: '',\n                    tooltip: '',\n                }));\n            }\n        }\n\n        return cache.get(id) as Promise<any>;\n    }\n\n    static async getItemTooltipData(id: number): Promise<any> {\n        return await ActionId.getDbTooltipDataHelper(id, '/wotlk/assets/item_data/all_items_db.json');\n        //if (USE_WOTLK_DB) {\n        //\treturn await ActionId.getWotlkdbTooltipDataHelper(id, 'item', itemToTooltipDataCache);\n        //} else {\n        //\treturn await ActionId.getWowheadTooltipDataHelper(id, 'item', itemToTooltipDataCache);\n        //}\n    }\n\n    static async getSpellTooltipData(id: number): Promise<any> {\n        return await ActionId.getDbTooltipDataHelper(id, '/wotlk/assets/spell_data/all_spells_db.json');\n        //if (USE_WOTLK_DB) {\n        //\treturn await ActionId.getWotlkdbTooltipDataHelper(id, 'spell', spellToTooltipDataCache);\n        //} else {\n        //\treturn await ActionId.getWowheadTooltipDataHelper(id, 'spell', spellToTooltipDataCache);\n        //}\n    }\n\n    static async getTooltipData(actionId: ActionId): Promise<any> {\n        if (actionId.itemId) {\n            return await ActionId.getItemTooltipData(actionId.itemId);\n        } else {\n            return await ActionId.getSpellTooltipData(actionId.spellId);\n        }\n    }\n}\n\nconst itemToTooltipDataCache = new Map<number, Promise<any>>();\nconst spellToTooltipDataCache = new Map<number, Promise<any>>();\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\t'Bloodworm': ActionId.fromSpellId(50452),\n};\n\n// https://wowhead.com/wotlk/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n    'Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n    'Bear': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n    'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n    'Boar': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n    'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n    'Cat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n    'Chimaera': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n    'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n    'Crab': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n    'Crocolisk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n    'Devilsaur': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n    'Dragonhawk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n    'Felguard': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n    'Felhunter': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n    'Gargoyle': 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_pet_bat.jpg',\n    'Ghoul': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_raisedead.jpg',\n    'Army of the Dead': 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_armyofthedead.jpg',\n    'Gorilla': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n    'Hyena': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n    'Imp': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n    'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n    'Moth': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n    'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n    'Owl': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n    'Raptor': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n    'Ravager': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n    'Rhino': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n    'Scorpid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n    'Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n    'Silithid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n    'Spider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n    'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n    'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n    'Succubus': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n    'Tallstrider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n    'Turtle': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n    'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n    'Wasp': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n    'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n    'Wolf': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n    'Worm': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n};\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n    [ResourceType.ResourceTypeNone]: '',\n    [ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n    [ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n    [ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n    [ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n    [ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n    [ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n    [ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n    [ResourceType.ResourceTypeBloodRune]: '/wotlk/assets/img/blood_rune.png',\n    [ResourceType.ResourceTypeFrostRune]: '/wotlk/assets/img/frost_rune.png',\n    [ResourceType.ResourceTypeUnholyRune]: '/wotlk/assets/img/unholy_rune.png',\n    [ResourceType.ResourceTypeDeathRune]: '/wotlk/assets/img/death_rune.png',\n};\n","import { Enchant } from '../proto/common.js';\nimport { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { Item } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\n\nimport { ActionId } from './action_id.js';\nimport { enchantAppliesToItem } from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\n\nexport function getWowheadItemId(item: Item): number {\n    return item.wowheadId || item.id;\n}\n\nexport function getWeaponDPS(item: Item): number {\n    return ((item.weaponDamageMin + item.weaponDamageMax) / 2) / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n    readonly _item: Item;\n    readonly _enchant: Enchant | null;\n    readonly _gems: Array<Gem | null>;\n\n    readonly numPossibleSockets: number;\n\n    constructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>) {\n        this._item = item;\n        this._enchant = enchant || null;\n        this._gems = gems || [];\n\n        this.numPossibleSockets = this.numSockets(true);\n\n        // Fill gems with null so we always have the same number of gems as gem slots.\n        if (this._gems.length < this.numPossibleSockets) {\n            this._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n        }\n    }\n\n    get item(): Item {\n        // Make a defensive copy\n        return Item.clone(this._item);\n    }\n\n    get enchant(): Enchant | null {\n        // Make a defensive copy\n        return this._enchant ? Enchant.clone(this._enchant) : null;\n    }\n\n    get gems(): Array<Gem | null> {\n        // Make a defensive copy\n        return this._gems.map(gem => gem == null ? null : Gem.clone(gem));\n    }\n\n    equals(other: EquippedItem) {\n        if (!Item.equals(this._item, other.item))\n            return false;\n\n        if ((this._enchant == null) != (other.enchant == null))\n            return false;\n\n        if (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant))\n            return false;\n\n        if (this._gems.length != other.gems.length)\n            return false;\n\n        for (let i = 0; i < this._gems.length; i++) {\n            if ((this._gems[i] == null) != (other.gems[i] == null))\n                return false;\n\n            if (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!))\n                return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Replaces the item and tries to keep the existing enchants/gems if possible.\n     */\n    withItem(item: Item): EquippedItem {\n        let newEnchant = null;\n        if (this._enchant && enchantAppliesToItem(this._enchant, item))\n            newEnchant = this._enchant;\n\n        // Reorganize gems to match as many colors in the new item as possible.\n        const newGems = new Array(item.gemSockets.length).fill(null);\n        this._gems.slice(0, this._item.gemSockets.length).filter(gem => gem != null).forEach(gem => {\n            const firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n            const firstEligibleIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor));\n            if (firstMatchingIndex != -1) {\n                newGems[firstMatchingIndex] = gem;\n            } else if (firstEligibleIndex != -1) {\n                newGems[firstEligibleIndex] = gem;\n            }\n        });\n\n        // Copy the extra socket gem directly.\n        if (this.couldHaveExtraSocket()) {\n            newGems.push(this._gems[this._gems.length - 1]);\n        }\n\n        return new EquippedItem(item, newEnchant, newGems);\n    }\n\n    /**\n     * Returns a new EquippedItem with the given enchant applied.\n     */\n    withEnchant(enchant: Enchant | null): EquippedItem {\n        return new EquippedItem(this._item, enchant, this._gems);\n    }\n\n    /**\n     * Returns a new EquippedItem with the given gem socketed.\n     */\n    private withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n        if (this._gems.length <= socketIdx) {\n            throw new Error('No gem socket with index ' + socketIdx);\n        }\n\n        const newGems = this._gems.slice();\n        newGems[socketIdx] = gem;\n\n        return new EquippedItem(this._item, this._enchant, newGems);\n    }\n\n    /**\n     * Returns a new EquippedItem with the given gem socketed.\n     *\n     * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n     */\n    withGem(gem: Gem | null, socketIdx: number): EquippedItem {\n        let curItem: EquippedItem | null = this;\n\n        if (gem && gem.unique) {\n            curItem = curItem.removeGemsWithId(gem.id);\n        }\n\n        return curItem.withGemHelper(gem, socketIdx);\n    }\n\n    removeGemsWithId(gemId: number): EquippedItem {\n        let curItem: EquippedItem | null = this;\n        // Remove any currently socketed identical gems.\n        for (let i = 0; i < curItem._gems.length; i++) {\n            if (curItem._gems[i]?.id == gemId) {\n                curItem = curItem.withGemHelper(null, i);\n            }\n        }\n        return curItem;\n    }\n\n    asActionId(): ActionId {\n        return ActionId.fromItemId(this._item.id);\n    }\n\n    asSpec(): ItemSpec {\n        return ItemSpec.create({\n            id: this._item.id,\n            enchant: this._enchant?.id,\n            gems: this._gems.map(gem => gem?.id || 0),\n        });\n    }\n\n\t\tmeetsSocketBonus(): boolean {\n\t\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t\t}\n\n\t\tsocketBonusStats(): Stats {\n\t\t\tif (this.meetsSocketBonus()) {\n\t\t\t\treturn new Stats(this._item.socketBonus);\n\t\t\t} else {\n\t\t\t\treturn new Stats();\n\t\t\t}\n\t\t}\n\n    // Whether this item could have an extra socket, assuming Blacksmithing.\n    couldHaveExtraSocket(): boolean {\n        return [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n    }\n\n    hasExtraSocket(isBlacksmithing: boolean): boolean {\n        return this.item.type == ItemType.ItemTypeWaist ||\n            (isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n    }\n\n    numSockets(isBlacksmithing: boolean): number {\n        return this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n    }\n\n    hasExtraGem(): boolean {\n        return this._gems.length > this.item.gemSockets.length;\n    }\n\n    allSocketColors(): Array<GemColor> {\n        return this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n    }\n    curSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n        return this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n    }\n\n\t\tcurGems(isBlacksmithing: boolean): Array<Gem> {\n\t\t\treturn (this._gems.filter(g => g != null) as Array<Gem>).slice(0, this.numSockets(isBlacksmithing));\n\t\t}\n\n    getFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n        let failed: Array<Item | Gem | Enchant> = [];\n        if (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n            failed.push(this._item);\n        }\n        if (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._enchant.requiredProfession)) {\n            failed.push(this._enchant);\n        }\n        this._gems.forEach(gem => {\n            if (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n                failed.push(gem);\n            }\n        });\n        return failed;\n    }\n};\n","import { Stat } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n    private readonly stats: Array<number>;\n\n    constructor(stats?: Array<number>) {\n        this.stats = stats?.slice(0, STATS_LEN) || [];\n\n        if (this.stats.length < STATS_LEN) {\n            this.stats = this.stats.concat(new Array(STATS_LEN - (stats?.length || 0)).fill(0));\n        }\n\n        for (let i = 0; i < STATS_LEN; i++) {\n            if (this.stats[i] == null)\n                this.stats[i] = 0;\n        }\n    }\n\n    equals(other: Stats): boolean {\n        return this.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx));\n    }\n\n    getStat(stat: Stat): number {\n        return this.stats[stat];\n    }\n\n    withStat(stat: Stat, value: number): Stats {\n        const newStats = this.stats.slice();\n        newStats[stat] = value;\n        return new Stats(newStats);\n    }\n\n    addStat(stat: Stat, value: number): Stats {\n        return this.withStat(stat, this.getStat(stat) + value);\n    }\n\n    add(other: Stats): Stats {\n        return new Stats(this.stats.map((value, stat) => value + other.stats[stat]));\n    }\n\n    subtract(other: Stats): Stats {\n        return new Stats(this.stats.map((value, stat) => value - other.stats[stat]));\n    }\n\n    computeEP(epWeights: Stats): number {\n        let total = 0;\n        this.stats.forEach((stat, idx) => {\n            total += stat * epWeights.stats[idx];\n        });\n        return total;\n    }\n\n    asArray(): Array<number> {\n        return this.stats.slice();\n    }\n\n    toJson(): Object {\n        return this.asArray();\n    }\n\n    static fromJson(obj: any): Stats {\n        return new Stats(obj as Array<number>);\n    }\n\n    static fromMap(statsMap: Partial<Record<Stat, number>>): Stats {\n        const statsArr = new Array(STATS_LEN).fill(0);\n        Object.entries(statsMap).forEach(entry => {\n            const [statStr, value] = entry;\n            statsArr[Number(statStr)] = value;\n        });\n        return new Stats(statsArr);\n    }\n}\n","import { Class } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { ShattrathFaction } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\n\nexport const raceNames: Record<Race, string> = {\n    [Race.RaceUnknown]: 'None',\n    [Race.RaceBloodElf]: 'Blood Elf',\n    [Race.RaceDraenei]: 'Draenei',\n    [Race.RaceDwarf]: 'Dwarf',\n    [Race.RaceGnome]: 'Gnome',\n    [Race.RaceHuman]: 'Human',\n    [Race.RaceNightElf]: 'Night Elf',\n    [Race.RaceOrc]: 'Orc',\n    [Race.RaceTauren]: 'Tauren',\n    [Race.RaceTroll]: 'Troll',\n    [Race.RaceUndead]: 'Undead',\n};\n\nexport function nameToRace(name: string): Race {\n    const normalized = name.toLowerCase().replaceAll(' ', '');\n    for (const key in raceNames) {\n        const race = parseInt(key) as Race;\n        if (raceNames[race].toLowerCase().replaceAll(' ', '') == normalized) {\n            return race;\n        }\n    }\n\n    return Race.RaceUnknown;\n}\n\nexport const classNames: Record<Class, string> = {\n    [Class.ClassUnknown]: 'None',\n    [Class.ClassDruid]: 'Druid',\n    [Class.ClassHunter]: 'Hunter',\n    [Class.ClassMage]: 'Mage',\n    [Class.ClassPaladin]: 'Paladin',\n    [Class.ClassPriest]: 'Priest',\n    [Class.ClassRogue]: 'Rogue',\n    [Class.ClassShaman]: 'Shaman',\n    [Class.ClassWarlock]: 'Warlock',\n    [Class.ClassWarrior]: 'Warrior',\n    [Class.ClassDeathknight]: 'Death Knight',\n}\n\nexport function nameToClass(name: string): Class {\n    const lower = name.toLowerCase();\n    for (const key in classNames) {\n        const charClass = parseInt(key) as Class;\n        if (classNames[charClass].toLowerCase().replace(/\\s+/g, '') == lower) {\n            return charClass;\n        }\n    }\n\n    return Class.ClassUnknown;\n}\n\nexport const professionNames: Record<Profession, string> = {\n    [Profession.ProfessionUnknown]: 'None',\n    [Profession.Alchemy]: 'Alchemy',\n    [Profession.Blacksmithing]: 'Blacksmithing',\n    [Profession.Enchanting]: 'Enchanting',\n    [Profession.Engineering]: 'Engineering',\n    [Profession.Herbalism]: 'Herbalism',\n    [Profession.Inscription]: 'Inscription',\n    [Profession.Jewelcrafting]: 'Jewelcrafting',\n    [Profession.Leatherworking]: 'Leatherworking',\n    [Profession.Mining]: 'Mining',\n    [Profession.Skinning]: 'Skinning',\n    [Profession.Tailoring]: 'Tailoring',\n};\n\nexport const statOrder: Array<Stat> = [\n    Stat.StatHealth,\n    Stat.StatArmor,\n    Stat.StatStamina,\n    Stat.StatStrength,\n    Stat.StatAgility,\n    Stat.StatIntellect,\n    Stat.StatSpirit,\n    Stat.StatSpellPower,\n    Stat.StatHealingPower,\n    Stat.StatArcaneSpellPower,\n    Stat.StatFireSpellPower,\n    Stat.StatFrostSpellPower,\n    Stat.StatHolySpellPower,\n    Stat.StatNatureSpellPower,\n    Stat.StatShadowSpellPower,\n    Stat.StatSpellHit,\n    Stat.StatSpellCrit,\n    Stat.StatSpellHaste,\n    Stat.StatSpellPenetration,\n    Stat.StatMP5,\n    Stat.StatAttackPower,\n    Stat.StatRangedAttackPower,\n    Stat.StatMeleeHit,\n    Stat.StatMeleeCrit,\n    Stat.StatMeleeHaste,\n    Stat.StatArmorPenetration,\n    Stat.StatExpertise,\n    Stat.StatMana,\n    Stat.StatEnergy,\n    Stat.StatRage,\n    Stat.StatDefense,\n    Stat.StatBlock,\n    Stat.StatBlockValue,\n    Stat.StatDodge,\n    Stat.StatParry,\n    Stat.StatResilience,\n    Stat.StatArcaneResistance,\n    Stat.StatFireResistance,\n    Stat.StatFrostResistance,\n    Stat.StatNatureResistance,\n    Stat.StatShadowResistance,\n];\n\nexport const statNames: Record<Stat, string> = {\n\t[Stat.StatStrength]: 'Strength',\n\t[Stat.StatAgility]: 'Agility',\n\t[Stat.StatStamina]: 'Stamina',\n\t[Stat.StatIntellect]: 'Intellect',\n\t[Stat.StatSpirit]: 'Spirit',\n\t[Stat.StatSpellPower]: 'Spell Dmg',\n\t[Stat.StatHealingPower]: 'Healing Power',\n\t[Stat.StatArcaneSpellPower]: 'Arcane Dmg',\n\t[Stat.StatFireSpellPower]: 'Fire Dmg',\n\t[Stat.StatFrostSpellPower]: 'Frost Dmg',\n\t[Stat.StatHolySpellPower]: 'Holy Dmg',\n\t[Stat.StatNatureSpellPower]: 'Nature Dmg',\n\t[Stat.StatShadowSpellPower]: 'Shadow Dmg',\n\t[Stat.StatMP5]: 'MP5',\n\t[Stat.StatSpellHit]: 'Spell Hit',\n\t[Stat.StatSpellCrit]: 'Spell Crit',\n\t[Stat.StatSpellHaste]: 'Spell Haste',\n\t[Stat.StatSpellPenetration]: 'Spell Pen',\n\t[Stat.StatAttackPower]: 'Attack Power',\n\t[Stat.StatMeleeHit]: 'Melee Hit',\n\t[Stat.StatMeleeCrit]: 'Melee Crit',\n\t[Stat.StatMeleeHaste]: 'Melee Haste',\n\t[Stat.StatArmorPenetration]: 'Armor Pen',\n\t[Stat.StatExpertise]: 'Expertise',\n\t[Stat.StatMana]: 'Mana',\n\t[Stat.StatEnergy]: 'Energy',\n\t[Stat.StatRage]: 'Rage',\n\t[Stat.StatArmor]: 'Armor',\n\t[Stat.StatRangedAttackPower]: 'Ranged AP',\n\t[Stat.StatDefense]: 'Defense',\n\t[Stat.StatBlock]: 'Block',\n\t[Stat.StatBlockValue]: 'Block Value',\n\t[Stat.StatDodge]: 'Dodge',\n\t[Stat.StatParry]: 'Parry',\n\t[Stat.StatResilience]: 'Resilience',\n\t[Stat.StatHealth]: 'Health',\n\t[Stat.StatArcaneResistance]: 'Arcane Resistance',\n\t[Stat.StatFireResistance]: 'Fire Resistance',\n\t[Stat.StatFrostResistance]: 'Frost Resistance',\n\t[Stat.StatNatureResistance]: 'Nature Resistance',\n\t[Stat.StatShadowResistance]: 'Shadow Resistance',\n};\n\nexport const slotNames: Record<ItemSlot, string> = {\n    [ItemSlot.ItemSlotHead]: 'Head',\n    [ItemSlot.ItemSlotNeck]: 'Neck',\n    [ItemSlot.ItemSlotShoulder]: 'Shoulders',\n    [ItemSlot.ItemSlotBack]: 'Back',\n    [ItemSlot.ItemSlotChest]: 'Chest',\n    [ItemSlot.ItemSlotWrist]: 'Wrist',\n    [ItemSlot.ItemSlotHands]: 'Hands',\n    [ItemSlot.ItemSlotWaist]: 'Waist',\n    [ItemSlot.ItemSlotLegs]: 'Legs',\n    [ItemSlot.ItemSlotFeet]: 'Feet',\n    [ItemSlot.ItemSlotFinger1]: 'Finger 1',\n    [ItemSlot.ItemSlotFinger2]: 'Finger 2',\n    [ItemSlot.ItemSlotTrinket1]: 'Trinket 1',\n    [ItemSlot.ItemSlotTrinket2]: 'Trinket 2',\n    [ItemSlot.ItemSlotMainHand]: 'Main Hand',\n    [ItemSlot.ItemSlotOffHand]: 'Off Hand',\n    [ItemSlot.ItemSlotRanged]: 'Ranged',\n};\n\nexport const resourceNames: Record<ResourceType, string> = {\n    [ResourceType.ResourceTypeNone]: 'None',\n    [ResourceType.ResourceTypeHealth]: 'Health',\n    [ResourceType.ResourceTypeMana]: 'Mana',\n    [ResourceType.ResourceTypeEnergy]: 'Energy',\n    [ResourceType.ResourceTypeRage]: 'Rage',\n    [ResourceType.ResourceTypeComboPoints]: 'Combo Points',\n    [ResourceType.ResourceTypeFocus]: 'Focus',\n    [ResourceType.ResourceTypeRunicPower]: 'Runic Power',\n    [ResourceType.ResourceTypeBloodRune]: 'Blood Rune',\n    [ResourceType.ResourceTypeFrostRune]: 'Frost Rune',\n    [ResourceType.ResourceTypeUnholyRune]: 'Unholy Rune',\n    [ResourceType.ResourceTypeDeathRune]: 'Death Rune',\n};\n\nexport const resourceColors: Record<ResourceType, string> = {\n    [ResourceType.ResourceTypeNone]: '#ffffff',\n    [ResourceType.ResourceTypeHealth]: '#22ba00',\n    [ResourceType.ResourceTypeMana]: '#2e93fa',\n    [ResourceType.ResourceTypeEnergy]: '#ffd700',\n    [ResourceType.ResourceTypeRage]: '#ff0000',\n    [ResourceType.ResourceTypeComboPoints]: '#ffa07a',\n    [ResourceType.ResourceTypeFocus]: '#cd853f',\n    [ResourceType.ResourceTypeRunicPower]: '#5b99ee',\n    [ResourceType.ResourceTypeBloodRune]: '#ff0000',\n    [ResourceType.ResourceTypeFrostRune]: '#0000ff',\n    [ResourceType.ResourceTypeUnholyRune]: '#00ff00',\n    [ResourceType.ResourceTypeDeathRune]: '#8b008b',\n};\n\nexport function stringToResourceType(str: string): ResourceType {\n    for (const [key, val] of Object.entries(resourceNames)) {\n        if (val.toLowerCase() == str.toLowerCase()) {\n            return Number(key) as ResourceType;\n        }\n    }\n    return ResourceType.ResourceTypeNone;\n}\n\nexport const shattFactionNames: Record<ShattrathFaction, string> = {\n    [ShattrathFaction.ShattrathFactionAldor]: 'Aldor',\n    [ShattrathFaction.ShattrathFactionScryer]: 'Scryer',\n};\n","import { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { resourceNames, stringToResourceType } from '../proto_utils/names.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\n\nexport class Entity {\n    readonly name: string;\n    readonly ownerName: string; // Blank if not a pet.\n\n    // Either target index, player index, or owner index depending on what kind\n    // of entity this is.\n    readonly index: number;\n\n    readonly isTarget: boolean;\n    readonly isPet: boolean;\n\n    constructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n        this.name = name;\n        this.ownerName = ownerName;\n        this.index = index;\n        this.isTarget = isTarget;\n        this.isPet = isPet;\n    }\n\n    equals(other: Entity) {\n        return this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n    }\n\n    toString(): string {\n        if (this.isTarget) {\n            return 'Target ' + (this.index + 1);\n        } else if (this.isPet) {\n            return `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n        } else {\n            return `${this.name} (#${this.index + 1})`;\n        }\n    }\n\n    // Parses one or more Entities from a string.\n    // Each entity label should be one of:\n    //   'Target 1' if a target,\n    //   'PlayerName (#1)' if a player, or\n    //   'PlayerName (#1) - PetName' if a pet.\n    static parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\))\\]/g;\n    static parseAll(str: string): Array<Entity> {\n        return Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n            if (match[1]) {\n                return new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n            } else if (match[3]) {\n                return new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n            } else if (match[7]) {\n                return new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n            } else {\n                throw new Error('Invalid Entity match');\n            }\n        });\n    }\n}\n\ninterface SimLogParams {\n    raw: string,\n    logIndex: number,\n    timestamp: number,\n    source: Entity | null,\n    target: Entity | null,\n    actionId: ActionId | null,\n    threat: number,\n}\n\nexport class SimLog {\n    readonly raw: string;\n\n    // Index of this log within the full log output.\n    // When comparing timestamps this should be used instead of timestamp, because\n    // timestamp is scraped from log text and doesn't have enough precision.\n    readonly logIndex: number;\n\n    // Time in seconds from the encounter start.\n    readonly timestamp: number;\n\n    readonly source: Entity | null;\n    readonly target: Entity | null;\n    readonly actionId: ActionId | null;\n\n    // Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n    readonly threat: number;\n\n    // Logs for auras that were active at this timestamp.\n    // This is only filled if populateActiveAuras() is called.\n    activeAuras: Array<AuraUptimeLog>;\n\n    constructor(params: SimLogParams) {\n        this.raw = params.raw;\n        this.logIndex = params.logIndex;\n        this.timestamp = params.timestamp;\n        this.source = params.source;\n        this.target = params.target;\n        this.actionId = params.actionId;\n        this.threat = params.threat;\n        this.activeAuras = [];\n    }\n\n    toString(): string {\n        return this.raw;\n    }\n\n    toStringPrefix(): string {\n        const timestampStr = `[${this.timestamp.toFixed(2)}]`;\n        if (this.source) {\n            return `${timestampStr} [${this.source}]`;\n        } else {\n            return timestampStr;\n        }\n    }\n\n    static async parseAll(result: RaidSimResult): Promise<Array<SimLog>> {\n        const lines = result.logs.split('\\n');\n\n        return Promise.all(lines.map((line, lineIndex) => {\n            const params: SimLogParams = {\n                raw: line,\n                logIndex: lineIndex,\n                timestamp: 0,\n                source: null,\n                target: null,\n                actionId: null,\n                threat: 0,\n            };\n\n            const threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n            if (threatMatch) {\n                params.threat = parseFloat(threatMatch[1]);\n                line = line.substring(0, threatMatch.index);\n            }\n\n            let match = line.match(/\\[([0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n            if (!match || !match[1]) {\n                return new SimLog(params);\n            }\n\n            params.timestamp = parseFloat(match[1]);\n            let remainder = match[2];\n\n            const entities = Entity.parseAll(remainder);\n            params.source = entities[0] || null;\n            params.target = entities[1] || null;\n\n            // Order from most to least common to reduce number of checks.\n            return DamageDealtLog.parse(params)\n                || ResourceChangedLog.parse(params)\n                || AuraEventLog.parse(params)\n                || AuraStacksChangeLog.parse(params)\n                || MajorCooldownUsedLog.parse(params)\n                || CastBeganLog.parse(params)\n                || CastCompletedLog.parse(params)\n                || StatChangeLog.parse(params)\n                || Promise.resolve(new SimLog(params));\n        }));\n    }\n\n    isDamageDealt(): this is DamageDealtLog {\n        return this instanceof DamageDealtLog;\n    }\n\n    isResourceChanged(): this is ResourceChangedLog {\n        return this instanceof ResourceChangedLog;\n    }\n\n    isAuraEvent(): this is AuraEventLog {\n        return this instanceof AuraEventLog;\n    }\n\n    isAuraStacksChange(): this is AuraStacksChangeLog {\n        return this instanceof AuraStacksChangeLog;\n    }\n\n    isMajorCooldownUsed(): this is MajorCooldownUsedLog {\n        return this instanceof MajorCooldownUsedLog;\n    }\n\n    isCastBegan(): this is CastBeganLog {\n        return this instanceof CastBeganLog;\n    }\n\n    isCastCompleted(): this is CastCompletedLog {\n        return this instanceof CastCompletedLog;\n    }\n\n    isStatChange(): this is StatChangeLog {\n        return this instanceof StatChangeLog;\n    }\n\n    // Group events that happen at the same time.\n    static groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n        const grouped: Array<Array<LogType>> = [];\n        let curGroup: Array<LogType> = [];\n\n        logs.forEach(log => {\n            if (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n                curGroup.push(log);\n            } else {\n                grouped.push(curGroup);\n                curGroup = [log];\n            }\n        });\n        if (curGroup.length > 0) {\n            grouped.push(curGroup);\n        }\n\n        return grouped;\n    }\n}\n\nexport class DamageDealtLog extends SimLog {\n    readonly amount: number;\n    readonly miss: boolean;\n    readonly hit: boolean;\n    readonly crit: boolean;\n    readonly crush: boolean;\n    readonly glance: boolean;\n    readonly dodge: boolean;\n    readonly parry: boolean;\n    readonly block: boolean;\n    readonly tick: boolean;\n    readonly partialResist1_4: boolean;\n    readonly partialResist2_4: boolean;\n    readonly partialResist3_4: boolean;\n\n    constructor(params: SimLogParams, amount: number, miss: boolean, crit: boolean, crush: boolean, glance: boolean, dodge: boolean, parry: boolean, block: boolean, tick: boolean, partialResist1_4: boolean, partialResist2_4: boolean, partialResist3_4: boolean) {\n        super(params);\n        this.amount = amount;\n        this.miss = miss;\n        this.glance = glance;\n        this.dodge = dodge;\n        this.parry = parry;\n        this.block = block;\n        this.hit = !miss && !crit;\n        this.crit = crit;\n        this.crush = crush;\n        this.tick = tick;\n        this.partialResist1_4 = partialResist1_4;\n        this.partialResist2_4 = partialResist2_4;\n        this.partialResist3_4 = partialResist3_4;\n    }\n\n    resultString(): string {\n        let result = this.miss ? 'Miss'\n            : this.dodge ? 'Dodge'\n                : this.parry ? 'Parry'\n                    : this.glance ? 'Glance'\n                        : this.block ? (this.crit ? 'Critical Block' : 'Block')\n                            : this.crit ? 'Crit'\n                                : this.crush ? 'Crush'\n                                    : this.tick ? 'Tick'\n                                        : 'Hit';\n        result += ' ' + this.target;\n        if (!this.miss && !this.dodge && !this.parry) {\n            result += ` for ${this.amount.toFixed(2)}`;\n            if (this.partialResist1_4) {\n                result += ' (25% Resist)';\n            } else if (this.partialResist2_4) {\n                result += ' (50% Resist)';\n            } else if (this.partialResist3_4) {\n                result += ' (75% Resist)';\n            }\n            result += '.'\n        }\n        return result;\n    }\n\n    toString(): string {\n        const threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n        return `${this.toStringPrefix()} ${this.actionId!.name} ${this.resultString()}${threatPostfix}`;\n    }\n\n    static parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n        const match = params.raw.match(/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) damage)?/);\n        if (match) {\n            return ActionId.fromLogString(match[1]).fill(params.source?.index).then(cause => {\n                params.actionId = cause;\n\n                let amount = 0;\n                if (match[16]) {\n                    amount = parseFloat(match[16]);\n                }\n\n                return new DamageDealtLog(\n                    params,\n                    amount,\n                    match[3] == 'Miss',\n                    match[3] == 'Crit' || match[3] == 'CriticalBlock',\n                    match[3] == 'Crush',\n                    match[3] == 'Glance',\n                    match[3] == 'Dodge',\n                    match[3] == 'Parry',\n                    match[3] == 'Block' || match[3] == 'CriticalBlock',\n                    Boolean(match[2]) && match[2].includes('tick'),\n                    match[14] == '25',\n                    match[14] == '50',\n                    match[14] == '75');\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class DpsLog extends SimLog {\n    readonly dps: number;\n\n    // Damage events that occurred at the same time as this log.\n    readonly damageLogs: Array<DamageDealtLog>;\n\n    constructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n        super(params);\n        this.dps = dps;\n        this.damageLogs = damageLogs;\n    }\n\n    static DPS_WINDOW = 15; // Window over which to calculate DPS.\n    static fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n        const groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n        let curDamageLogs: Array<DamageDealtLog> = [];\n        let curDamageTotal = 0;\n\n        return groupedDamageLogs.map(ddLogGroup => {\n            ddLogGroup.forEach(ddLog => {\n                curDamageLogs.push(ddLog);\n                curDamageTotal += ddLog.amount;\n            });\n\n            const newStartIdx = curDamageLogs.findIndex(curLog => {\n                const inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n                if (!inWindow) {\n                    curDamageTotal -= curLog.amount;\n                }\n                return inWindow;\n            });\n            if (newStartIdx == -1) {\n                curDamageLogs = [];\n            } else {\n                curDamageLogs = curDamageLogs.slice(newStartIdx);\n            }\n\n            const dps = curDamageTotal / DpsLog.DPS_WINDOW;\n            if (isNaN(dps)) {\n                console.warn('NaN dps!');\n            }\n\n            return new DpsLog({\n                raw: '',\n                logIndex: ddLogGroup[0].logIndex,\n                timestamp: ddLogGroup[0].timestamp,\n                source: ddLogGroup[0].source,\n                target: null,\n                actionId: null,\n                threat: 0,\n            }, dps, ddLogGroup);\n        });\n    }\n}\n\nexport class ThreatLogGroup extends SimLog {\n    readonly threatBefore: number;\n    readonly threatAfter: number;\n    readonly logs: Array<SimLog>;\n\n    constructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n        super(params);\n        this.threatBefore = threatBefore;\n        this.threatAfter = threatAfter;\n        this.logs = logs;\n    }\n\n    static fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n        const groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n        let curThreat = 0;\n        return groupedLogs.map(logGroup => {\n            const newThreat = sum(logGroup.map(log => log.threat));\n            const threatLog = new ThreatLogGroup(\n                {\n                    raw: '',\n                    logIndex: logGroup[0].logIndex,\n                    timestamp: logGroup[0].timestamp,\n                    source: logGroup[0].source,\n                    target: logGroup[0].target,\n                    actionId: null,\n                    threat: newThreat,\n                },\n                curThreat,\n                curThreat + newThreat,\n                logGroup);\n\n            curThreat += newThreat;\n            return threatLog;\n        });\n    }\n}\n\nexport class AuraEventLog extends SimLog {\n    readonly isGained: boolean;\n    readonly isFaded: boolean;\n    readonly isRefreshed: boolean;\n\n    constructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n        super(params);\n        this.isGained = isGained;\n        this.isFaded = isFaded;\n        this.isRefreshed = isRefreshed;\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} Aura ${this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: ${this.actionId!.name}.`;\n    }\n\n    static parse(params: SimLogParams): Promise<AuraEventLog> | null {\n        const match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n        if (match && match[5]) {\n            return ActionId.fromLogString(match[5]).fill(params.source?.index).then(aura => {\n                params.actionId = aura;\n                const event = match[1];\n                return new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n    readonly oldStacks: number;\n    readonly newStacks: number;\n\n    constructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n        super(params);\n        this.oldStacks = oldStacks;\n        this.newStacks = newStacks;\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} ${this.actionId!.name} stacks: ${this.oldStacks} --> ${this.newStacks}.`;\n    }\n\n    static parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n        const match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n        if (match && match[1]) {\n            return ActionId.fromLogString(match[1]).fill(params.source?.index).then(aura => {\n                params.actionId = aura;\n                return new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class AuraUptimeLog extends SimLog {\n    readonly gainedAt: number;\n    readonly fadedAt: number;\n\t\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n    constructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n        super(params);\n        this.gainedAt = params.timestamp;\n        this.fadedAt = fadedAt;\n\t\t\t\tthis.stacksChange = stacksChange;\n    }\n\n    static fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n        let unmatchedGainedLogs: Array<{gained: AuraEventLog, stacks: Array<AuraStacksChangeLog>}> = [];\n        const uptimeLogs: Array<AuraUptimeLog> = [];\n\n        logs.forEach((log: SimLog) => {\n            if (!log.source || !log.source.equals(entity)) {\n                return;\n            }\n\n\t\t\t\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n            if (log.isGained) {\n                unmatchedGainedLogs.push({gained: log, stacks: []});\n                return;\n            }\n\n            const matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n            if (matchingGainedIdx == -1) {\n                console.warn('Unmatched aura faded log: ' + log.actionId!.name);\n                return;\n            }\n            const { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n            uptimeLogs.push(new AuraUptimeLog({\n                raw: log.raw,\n                logIndex: gainedLog.logIndex,\n                timestamp: gainedLog.timestamp,\n                source: log.source,\n                target: log.target,\n                actionId: gainedLog.actionId,\n                threat: gainedLog.threat,\n            }, log.timestamp, stacksChangeLogs));\n\n            if (log.isRefreshed) {\n                unmatchedGainedLogs.push({gained: log, stacks: []});\n            }\n        });\n\n        // Auras active at the end won't have a faded log, so need to add them separately.\n        unmatchedGainedLogs.forEach(unmatchedLog => {\n            const { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n            uptimeLogs.push(new AuraUptimeLog({\n                raw: gainedLog.raw,\n                logIndex: gainedLog.logIndex,\n                timestamp: gainedLog.timestamp,\n                source: gainedLog.source,\n                target: gainedLog.target,\n                actionId: gainedLog.actionId,\n                threat: gainedLog.threat,\n            }, encounterDuration, stacksChangeLogs));\n        });\n\n        uptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n        return uptimeLogs;\n    }\n\n    // Populates the activeAuras field for all logs using the provided auras.\n    static populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n        let curAuras: Array<AuraUptimeLog> = [];\n        let auraLogsIndex = 0;\n\n        logs.forEach(log => {\n            while (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n                curAuras.push(auraLogs[auraLogsIndex]);\n                auraLogsIndex++;\n            }\n            curAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n            const activeAuras = curAuras.slice();\n            activeAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n            log.activeAuras = activeAuras;\n        });\n    }\n}\n\nexport class ResourceChangedLog extends SimLog {\n    readonly resourceType: ResourceType;\n    readonly valueBefore: number;\n    readonly valueAfter: number;\n    readonly isSpend: boolean;\n\n    constructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean) {\n        super(params);\n        this.resourceType = resourceType;\n        this.valueBefore = valueBefore;\n        this.valueAfter = valueAfter;\n        this.isSpend = isSpend;\n    }\n\n    toString(): string {\n        const signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\n        const isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n        const verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : (this.isSpend ? 'Spent' : 'Gained');\n\n        return `${this.toStringPrefix()} ${verb} ${signedDiff.toFixed(1)} ${resourceNames[this.resourceType]} from ${this.actionId!.name}. (${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)})`;\n    }\n\n    resultString(): string {\n        const delta = this.valueAfter - this.valueBefore;\n        if (delta < 0) {\n            return delta.toFixed(1);\n        } else {\n            return '+' + delta.toFixed(1);\n        }\n    }\n\n    static parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n        const match = params.raw.match(/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)/);\n        if (match) {\n            const resourceType = stringToResourceType(match[4]);\n            return ActionId.fromLogString(match[16]).fill(params.source?.index).then(cause => {\n                params.actionId = cause;\n                return new ResourceChangedLog(params, resourceType, parseFloat(match[17]), parseFloat(match[18]), match[1] == 'Spent');\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n    readonly resourceType: ResourceType;\n    readonly valueBefore: number;\n    readonly valueAfter: number;\n    readonly logs: Array<ResourceChangedLog>;\n\n    constructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, logs: Array<ResourceChangedLog>) {\n        super(params);\n        this.resourceType = resourceType;\n        this.valueBefore = valueBefore;\n        this.valueAfter = valueAfter;\n        this.logs = logs;\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} ${resourceNames[this.resourceType]}: ${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)}`;\n    }\n\n    static fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n        const allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n        const results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n        const resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n        resourceTypes.forEach(resourceType => {\n            const resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n            const groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n            results[resourceType] = groupedLogs.map(logGroup => new ResourceChangedLogGroup(\n                {\n                    raw: '',\n                    logIndex: logGroup[0].logIndex,\n                    timestamp: logGroup[0].timestamp,\n                    source: logGroup[0].source,\n                    target: logGroup[0].target,\n                    actionId: null,\n                    threat: 0,\n                },\n                resourceType,\n                logGroup[0].valueBefore,\n                logGroup[logGroup.length - 1].valueAfter,\n                logGroup));\n        });\n\n        return results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n    }\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n    constructor(params: SimLogParams) {\n        super(params);\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} Major cooldown used: ${this.actionId!.name}.`;\n    }\n\n    static parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n        const match = params.raw.match(/Major cooldown used: (.*)/);\n        if (match) {\n            return ActionId.fromLogString(match[1]).fill(params.source?.index).then(cooldownId => {\n                params.actionId = cooldownId;\n                return new MajorCooldownUsedLog(params);\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class CastBeganLog extends SimLog {\n    readonly manaCost: number;\n    readonly castTime: number;\n\n    constructor(params: SimLogParams, manaCost: number, castTime: number) {\n        super(params);\n        this.manaCost = manaCost;\n        this.castTime = castTime;\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s, Cost = ${this.manaCost.toFixed(1)}).`;\n    }\n\n    static parse(params: SimLogParams): Promise<CastBeganLog> | null {\n        const match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s)\\)/);\n        if (match) {\n            let castTime = parseFloat(match[3]);\n            if (match[4] == 'ms') {\n                castTime /= 1000;\n            }\n            return ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n                params.actionId = castId;\n                return new CastBeganLog(params, parseFloat(match[2]), castTime);\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class CastCompletedLog extends SimLog {\n    constructor(params: SimLogParams) {\n        super(params);\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} Completed cast ${this.actionId!.name}.`;\n    }\n\n    static parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n        const match = params.raw.match(/Completed cast (.*)/);\n        if (match) {\n            return ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n                params.actionId = castId;\n                return new CastCompletedLog(params);\n            });\n        } else {\n            return null;\n        }\n    }\n}\n\nexport class CastLog extends SimLog {\n    readonly castTime: number;\n\t\treadonly travelTime: number;\n\n    readonly castBeganLog: CastBeganLog;\n    readonly castCompletedLog: CastCompletedLog | null;\n\n    // All instances of damage dealt from the completion of this cast until the completion of the next cast.\n    readonly damageDealtLogs: Array<DamageDealtLog>;\n\n    constructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n        super({\n            raw: castBeganLog.raw,\n            logIndex: castBeganLog.logIndex,\n            timestamp: castBeganLog.timestamp,\n            source: castBeganLog.source,\n            target: castBeganLog.target,\n            actionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n            threat: castCompletedLog?.threat || castBeganLog.threat,\n        });\n        this.castTime = castBeganLog.castTime;\n        this.castBeganLog = castBeganLog;\n        this.castCompletedLog = castCompletedLog;\n        this.damageDealtLogs = damageDealtLogs;\n\n\t\t\t\tif (this.castCompletedLog && this.damageDealtLogs.length == 1 &&\n\t\t\t\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t\t\t\t!this.damageDealtLogs[0].tick) {\n\t\t\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t\t\t} else {\n\t\t\t\t\tthis.travelTime = 0;\n\t\t\t\t}\n    }\n\n    toString(): string {\n        return `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s).`;\n    }\n\n    static fromLogs(logs: Array<SimLog>): Array<CastLog> {\n        const castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n        const castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n        const damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n        const toBucketKey = (actionId: ActionId) => {\n            if (actionId.spellId == 30451) {\n                // Arcane Blast is unique because it can finish its cast as a different\n                // spell than it started (if stacks drop).\n                return actionId.toStringIgnoringTag();\n            } else {\n                return actionId.toString();\n            }\n        };\n        const castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n        const castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n        const damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n        const castLogs: Array<CastLog> = [];\n        Object.keys(castBeganLogsByAbility).forEach(bucketKey => {\n            const abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n            const abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n            const abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n            const actionId = abilityCastsBegan[0].actionId!;\n\n            let ddIdx = 0;\n            for (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n                const cbLog = abilityCastsBegan[cbIdx];\n\n                // Assume cast completed log is the same index because they always come in pairs.\n                // Only exception is final pair, where there might be a cast began without a cast completed.\n                const ccLog = abilityCastsCompleted[cbIdx] || null;\n                const nextCcLog = abilityCastsCompleted[cbIdx + 1] || null;\n\n                // Find all damage dealt logs between the cur and next cast completed logs.\n                let ddLogs = [];\n                while (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n                    ddLogs.push(abilityDamageDealt[ddIdx]);\n                    ddIdx++\n                }\n                castLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n            }\n        });\n\n        castLogs.sort((a, b) => a.timestamp - b.timestamp);\n        return castLogs;\n    }\n}\n\nexport class StatChangeLog extends SimLog {\n    readonly isGain: boolean;\n    readonly stats: string;\n\n    constructor(params: SimLogParams, isGain: boolean, stats: string) {\n        super(params);\n        this.isGain = isGain;\n        this.stats = stats;\n    }\n\n    toString(): string {\n        if (this.isGain) {\n            return `${this.toStringPrefix()} Gained ${this.stats} from ${this.actionId!.name}.`;\n        } else {\n            return `${this.toStringPrefix()} Lost ${this.stats} from fading ${this.actionId!.name}.`;\n        }\n    }\n\n    static parse(params: SimLogParams): Promise<StatChangeLog> | null {\n        const match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n        if (match) {\n            return ActionId.fromLogString(match[6]).fill(params.source?.index).then(effectId => {\n                params.actionId = effectId;\n                const sign = match[1] == 'Lost' ? -1 : 1;\n                return new StatChangeLog(params, sign == 1, match[4]);\n            });\n        } else {\n            return null;\n        }\n    }\n}\n","import { ActionMetrics as ActionMetricsProto } from '../proto/api.js';\nimport { AuraMetrics as AuraMetricsProto } from '../proto/api.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Encounter as EncounterProto } from '../proto/common.js';\nimport { EncounterMetrics as EncounterMetricsProto } from '../proto/api.js';\nimport { Party as PartyProto } from '../proto/api.js';\nimport { PartyMetrics as PartyMetricsProto } from '../proto/api.js';\nimport { Player as PlayerProto } from '../proto/api.js';\nimport { UnitMetrics as UnitMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidMetrics as RaidMetricsProto } from '../proto/api.js';\nimport { ResourceMetrics as ResourceMetricsProto, ResourceType } from '../proto/api.js';\nimport { Target as TargetProto } from '../proto/common.js';\nimport { TargetedActionMetrics as TargetedActionMetricsProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { Class } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { classColors } from '../proto_utils/utils.js';\nimport { getTalentTreeIcon } from '../proto_utils/utils.js';\nimport { playerToSpec } from '../proto_utils/utils.js';\nimport { specToClass } from '../proto_utils/utils.js';\nimport { bucket } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport {\n    AuraUptimeLog,\n    CastLog,\n    DamageDealtLog,\n    DpsLog,\n    Entity,\n    MajorCooldownUsedLog,\n    ResourceChangedLogGroup,\n    SimLog,\n    ThreatLogGroup,\n} from './logs_parser.js';\n\nexport interface SimResultFilter {\n    // Raid index of the player to display, or null for all players.\n    player?: number | null;\n\n    // Target index of the target to display, or null for all targets.\n    target?: number | null;\n}\n\nclass SimResultData {\n    readonly request: RaidSimRequest;\n    readonly result: RaidSimResult;\n\n    constructor(request: RaidSimRequest, result: RaidSimResult) {\n        this.request = request;\n        this.result = result;\n    }\n\n    get iterations() {\n        return this.request.simOptions?.iterations || 1;\n    }\n\n    get duration() {\n        return this.result.avgIterationDuration || 1;\n    }\n\n    get firstIterationDuration() {\n        return this.result.firstIterationDuration || 1;\n    }\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n    readonly request: RaidSimRequest;\n    readonly result: RaidSimResult;\n\n    readonly raidMetrics: RaidMetrics;\n    readonly encounterMetrics: EncounterMetrics;\n    readonly logs: Array<SimLog>;\n\n    private constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n        this.request = request;\n        this.result = result;\n        this.raidMetrics = raidMetrics;\n        this.encounterMetrics = encounterMetrics;\n        this.logs = logs;\n    }\n\n    getPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n        if (filter?.player || filter?.player === 0) {\n            const player = this.getPlayerWithIndex(filter.player);\n            return player ? [player] : [];\n        } else {\n            return this.raidMetrics.parties.map(party => party.players).flat();\n        }\n    }\n\n    // Returns the first player, regardless of which party / raid slot its in.\n    getFirstPlayer(): UnitMetrics | null {\n        return this.getPlayers()[0] || null;\n    }\n\n    getPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n        return this.getPlayers().find(player => player.unitIndex == unitIndex) || null;\n    }\n\n    getTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n        if (filter?.target || filter?.target === 0) {\n            const target = this.getTargetWithIndex(filter.target);\n            return target ? [target] : [];\n        } else {\n            return this.encounterMetrics.targets.slice();\n        }\n    }\n\n    getTargetWithIndex(unitIndex: number): UnitMetrics | null {\n        return this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n    }\n    getUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\t\treturn this.getPlayerWithIndex(unitIndex) || this.getTargetWithIndex(unitIndex);\n    }\n\n    getDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n        if (filter.player || filter.player === 0) {\n            return this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n        }\n\n        return this.raidMetrics.dps;\n    }\n\n    getActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n        return ActionMetrics.joinById(this.getPlayers(filter).map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter))).flat());\n    }\n\n    getSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n        return this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n    }\n\n    getMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n        return this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n    }\n\n    getResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n        return ResourceMetrics.joinById(this.getPlayers(filter).map(player => player.resources.filter(resource => resource.type == resourceType)).flat());\n    }\n\n    getBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n        return AuraMetrics.joinById(this.getPlayers(filter).map(player => player.auras).flat());\n    }\n\n    getDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n        return AuraMetrics.joinById(this.getTargets(filter).map(target => target.auras).flat()).filter(aura => aura.uptimePercent != 0);\n    }\n\n    toProto(): SimRun {\n        return SimRun.create({\n            request: this.request,\n            result: this.result,\n        });\n    }\n\n    static async fromProto(proto: SimRun): Promise<SimResult> {\n        return SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n    }\n\n    static async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n        const resultData = new SimResultData(request, result);\n        const logs = await SimLog.parseAll(result);\n\n        const raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n        const encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n        const raidMetrics = await raidPromise;\n        const encounterMetrics = await encounterPromise;\n\n        return new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n    }\n}\n\nexport class RaidMetrics {\n    private readonly raid: RaidProto;\n    private readonly metrics: RaidMetricsProto;\n\n    readonly dps: DistributionMetricsProto;\n    readonly parties: Array<PartyMetrics>;\n\n    private constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n        this.raid = raid;\n        this.metrics = metrics;\n        this.dps = this.metrics.dps!;\n        this.parties = parties;\n    }\n\n    static async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n        const numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n        const parties = await Promise.all(\n            [...new Array(numParties).keys()]\n                .map(i => PartyMetrics.makeNew(\n                    resultData,\n                    raid.parties[i],\n                    metrics.parties[i],\n                    i,\n                    logs)));\n\n        return new RaidMetrics(raid, metrics, parties);\n    }\n}\n\nexport class PartyMetrics {\n    private readonly party: PartyProto;\n    private readonly metrics: PartyMetricsProto;\n\n    readonly partyIndex: number;\n    readonly dps: DistributionMetricsProto;\n    readonly players: Array<UnitMetrics>;\n\n    private constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n        this.party = party;\n        this.metrics = metrics;\n        this.partyIndex = partyIndex;\n        this.dps = this.metrics.dps!;\n        this.players = players;\n    }\n\n    static async makeNew(resultData: SimResultData, party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, logs: Array<SimLog>): Promise<PartyMetrics> {\n        const numPlayers = Math.min(party.players.length, metrics.players.length);\n        const players = await Promise.all(\n            [...new Array(numPlayers).keys()]\n                .filter(i => party.players[i].class != Class.ClassUnknown)\n                .map(i => UnitMetrics.makeNewPlayer(\n                    resultData,\n                    party.players[i],\n                    metrics.players[i],\n                    partyIndex * 5 + i,\n                    false,\n                    logs)));\n\n        return new PartyMetrics(party, metrics, partyIndex, players);\n    }\n}\n\nexport class UnitMetrics {\n    // If this Unit is a pet, player is the owner. If it's a target, player is null.\n    private readonly player: PlayerProto | null;\n    private readonly target: TargetProto | null;\n    private readonly metrics: UnitMetricsProto;\n\n    readonly index: number;\n\t\treadonly unitIndex: number;\n    readonly name: string;\n    readonly spec: Spec;\n    readonly petActionId: ActionId | null;\n    readonly iconUrl: string;\n    readonly classColor: string;\n    readonly dps: DistributionMetricsProto;\n    readonly tps: DistributionMetricsProto;\n    readonly dtps: DistributionMetricsProto;\n    readonly actions: Array<ActionMetrics>;\n    readonly auras: Array<AuraMetrics>;\n    readonly resources: Array<ResourceMetrics>;\n    readonly pets: Array<UnitMetrics>;\n    private readonly iterations: number;\n    private readonly duration: number;\n\n    readonly logs: Array<SimLog>;\n    readonly damageDealtLogs: Array<DamageDealtLog>;\n    readonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n    readonly dpsLogs: Array<DpsLog>;\n    readonly auraUptimeLogs: Array<AuraUptimeLog>;\n    readonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n    readonly castLogs: Array<CastLog>;\n    readonly threatLogs: Array<ThreatLogGroup>;\n\n    // Aura uptime logs, filtered to include only auras that correspond to a\n    // major cooldown.\n    readonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n    private constructor(\n        player: PlayerProto | null,\n        target: TargetProto | null,\n        petActionId: ActionId | null,\n        metrics: UnitMetricsProto,\n        index: number,\n        actions: Array<ActionMetrics>,\n        auras: Array<AuraMetrics>,\n        resources: Array<ResourceMetrics>,\n        pets: Array<UnitMetrics>,\n        logs: Array<SimLog>,\n        resultData: SimResultData) {\n        this.player = player;\n        this.target = target;\n        this.metrics = metrics;\n\n        this.index = index;\n\t\t\t\tthis.unitIndex = metrics.unitIndex;\n        this.name = metrics.name;\n        this.spec = player ? playerToSpec(player) : 0;\n        this.petActionId = petActionId;\n        this.iconUrl = this.isPlayer ? getTalentTreeIcon(this.spec, player!.talentsString) :\n            (this.isTarget ? defaultTargetIcon : '');\n        this.classColor = this.isTarget ? 'black' : classColors[specToClass[this.spec]];\n        this.dps = this.metrics.dps!;\n        this.tps = this.metrics.threat!;\n        this.dtps = this.metrics.dtps!;\n        this.actions = actions;\n        this.auras = auras;\n        this.resources = resources;\n        this.pets = pets;\n        this.logs = logs;\n        this.iterations = resultData.iterations;\n        this.duration = resultData.duration;\n\n        this.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n        this.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n        this.castLogs = CastLog.fromLogs(this.logs);\n        this.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n        this.auraUptimeLogs = AuraUptimeLog.fromLogs(this.logs, new Entity(this.name, '', this.index, this.target != null, this.isPet), resultData.firstIterationDuration);\n        this.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n        this.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n        AuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n        AuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n        this.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog => this.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)));\n    }\n\n    get label() {\n        if (this.target == null) {\n            return `${this.name} (#${this.index + 1})`;\n        } else {\n            return this.name;\n        }\n    }\n\n    get isPlayer() {\n        return this.player != null;\n    }\n\n    get isTarget() {\n        return this.target != null;\n    }\n\n    get isPet() {\n        return this.petActionId != null;\n    }\n\n    // Returns the unit index of the target of this unit, as selected by the filter.\n    getTargetIndex(filter?: SimResultFilter): number | null {\n        if (!filter) {\n            return null;\n        }\n\n        const index = this.isPlayer ? filter.target : filter.player;\n        if (index == null || index == -1) {\n            return null;\n        }\n\n        return index;\n    }\n\n    get inFrontOfTarget(): boolean {\n        if (this.isTarget) {\n            return true;\n        } else if (this.isPlayer) {\n            return this.player!.inFrontOfTarget;\n        } else {\n            return false; // TODO pets\n        }\n    }\n\n    get chanceOfDeath(): number {\n        return this.metrics.chanceOfDeath * 100;\n    }\n\n    get maxThreat() {\n        return this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n    }\n\n    get secondsOomAvg() {\n        return this.metrics.secondsOomAvg\n    }\n\n    get totalDamage() {\n        return this.dps.avg * this.duration;\n    }\n\n    getPlayerAndPetActions(): Array<ActionMetrics> {\n        return this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n    }\n\n    private getActionsForDisplay(): Array<ActionMetrics> {\n        return this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n    }\n\n    getMeleeActions(): Array<ActionMetrics> {\n        return this.getActionsForDisplay().filter(e => e.isMeleeAction);\n    }\n\n    getSpellActions(): Array<ActionMetrics> {\n        return this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n    }\n\n    getResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n        return this.resources.filter(resource => resource.type == resourceType);\n    }\n\n    static async makeNewPlayer(resultData: SimResultData, player: PlayerProto, metrics: UnitMetricsProto, raidIndex: number, isPet: boolean, logs: Array<SimLog>): Promise<UnitMetrics> {\n        const playerLogs = logs.filter(log => log.source && (!log.source.isTarget && (isPet == log.source.isPet) && log.source.index == raidIndex));\n\n        const actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n        const aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n        const resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n        const petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, playerLogs)));\n\n        let petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n        if (isPet) {\n            petIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n        }\n\n        const actions = await actionsPromise;\n        const auras = await aurasPromise;\n        const resources = await resourcesPromise;\n        const pets = await petsPromise;\n        const petActionId = await petIdPromise;\n\n        const playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n        actions.forEach(action => action.unit = playerMetrics);\n        auras.forEach(aura => aura.unit = playerMetrics);\n        resources.forEach(resource => resource.unit = playerMetrics);\n        return playerMetrics;\n    }\n\n    static async makeNewTarget(resultData: SimResultData, target: TargetProto, metrics: UnitMetricsProto, index: number, logs: Array<SimLog>): Promise<UnitMetrics> {\n        const targetLogs = logs.filter(log => log.source && (log.source.isTarget && log.source.index == index));\n\n        const actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n        const aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n        const actions = await actionsPromise;\n        const auras = await aurasPromise;\n\n        const targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n        actions.forEach(action => action.unit = targetMetrics);\n        auras.forEach(aura => aura.unit = targetMetrics);\n        return targetMetrics;\n    }\n}\n\nexport class EncounterMetrics {\n    private readonly encounter: EncounterProto;\n    private readonly metrics: EncounterMetricsProto;\n\n    readonly targets: Array<UnitMetrics>;\n\n    private constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n        this.encounter = encounter;\n        this.metrics = metrics;\n        this.targets = targets;\n    }\n\n    static async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n        const numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n        const targets = await Promise.all(\n            [...new Array(numTargets).keys()]\n                .map(i => UnitMetrics.makeNewTarget(\n                    resultData,\n                    encounter.targets[i],\n                    metrics.targets[i],\n                    i,\n                    logs)));\n\n        return new EncounterMetrics(encounter, metrics, targets);\n    }\n\n    get durationSeconds() {\n        return this.encounter.duration;\n    }\n}\n\nexport class AuraMetrics {\n    unit: UnitMetrics | null;\n    readonly actionId: ActionId;\n    readonly name: string;\n    readonly iconUrl: string;\n    private readonly resultData: SimResultData;\n    private readonly iterations: number;\n    private readonly duration: number;\n    private readonly data: AuraMetricsProto;\n\n    private constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n        this.unit = unit;\n        this.actionId = actionId;\n        this.name = actionId.name;\n        this.iconUrl = actionId.iconUrl;\n        this.data = data;\n        this.resultData = resultData;\n        this.iterations = resultData.iterations;\n        this.duration = resultData.duration;\n    }\n\n    get uptimePercent() {\n        return this.data.uptimeSecondsAvg / this.duration * 100;\n    }\n\n\t\tget averageProcs() {\n\t\t\treturn this.data.procsAvg\n\t\t}\n\n\t\tget ppm() {\n\t\t\treturn this.data.procsAvg / (this.duration / 60);\n\t\t}\n\n    static async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n        const actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n        return new AuraMetrics(unit, actionId, auraMetrics, resultData);\n    }\n\n    // Merges an array of metrics into a single metrics.\n    static merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n        const firstAura = auras[0];\n        const unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n        let actionId = actionIdOverride || firstAura.actionId;\n        if (removeTag) {\n            actionId = actionId.withoutTag();\n        }\n        return new AuraMetrics(\n            unit,\n            actionId,\n            AuraMetricsProto.create({\n                uptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n            }),\n            firstAura.resultData);\n    }\n\n    // Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n    // different tags, and returns them as separate arrays.\n    static groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n        if (useTag) {\n            return Object.values(bucket(auras, aura => aura.actionId.toString()));\n        } else {\n            return Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n        }\n    }\n\n    // Merges aura metrics that have the same name/ID, adding their stats together.\n    static joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n        return AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n    }\n};\n\nexport class ResourceMetrics {\n    unit: UnitMetrics | null;\n    readonly actionId: ActionId;\n    readonly name: string;\n    readonly iconUrl: string;\n    readonly type: ResourceType;\n    private readonly resultData: SimResultData;\n    private readonly iterations: number;\n    private readonly duration: number;\n    private readonly data: ResourceMetricsProto;\n\n    private constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n        this.unit = unit;\n        this.actionId = actionId;\n        this.name = actionId.name;\n        this.iconUrl = actionId.iconUrl;\n        this.type = data.type;\n        this.resultData = resultData;\n        this.iterations = resultData.iterations;\n        this.duration = resultData.duration;\n        this.data = data;\n    }\n\n    get events() {\n        return this.data.events / this.iterations;\n    }\n\n    get gain() {\n        return this.data.gain / this.iterations;\n    }\n\n    get gainPerSecond() {\n        return this.data.gain / this.iterations / this.duration;\n    }\n\n    get avgGain() {\n        return this.data.gain / this.data.events;\n    }\n\n    get wastedGain() {\n        return (this.data.gain - this.data.actualGain) / this.iterations;\n    }\n\n    static async makeNew(unit: UnitMetrics | null, resultData: SimResultData, resourceMetrics: ResourceMetricsProto, playerIndex?: number): Promise<ResourceMetrics> {\n        const actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n        return new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n    }\n\n    // Merges an array of metrics into a single metrics.\n    static merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n        const firstResource = resources[0];\n        const unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n        let actionId = actionIdOverride || firstResource.actionId;\n        if (removeTag) {\n            actionId = actionId.withoutTag();\n        }\n        return new ResourceMetrics(\n            unit,\n            actionId,\n            ResourceMetricsProto.create({\n                events: sum(resources.map(a => a.data.events)),\n                gain: sum(resources.map(a => a.data.gain)),\n                actualGain: sum(resources.map(a => a.data.actualGain)),\n            }),\n            firstResource.resultData);\n    }\n\n    // Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n    // different tags, and returns them as separate arrays.\n    static groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n        if (useTag) {\n            return Object.values(bucket(resources, resource => resource.actionId.toString()));\n        } else {\n            return Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n        }\n    }\n\n    // Merges resource metrics that have the same name/ID, adding their stats together.\n    static joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n        return ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n    }\n};\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n    unit: UnitMetrics | null;\n    readonly actionId: ActionId;\n    readonly name: string;\n    readonly iconUrl: string;\n    readonly targets: Array<TargetedActionMetrics>;\n    private readonly resultData: SimResultData;\n    private readonly iterations: number;\n    private readonly duration: number;\n    private readonly data: ActionMetricsProto;\n    private readonly combinedMetrics: TargetedActionMetrics;\n\n    private constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n        this.unit = unit;\n        this.actionId = actionId;\n        this.name = actionId.name;\n        this.iconUrl = actionId.iconUrl;\n        this.resultData = resultData;\n        this.iterations = resultData.iterations;\n        this.duration = resultData.duration;\n        this.data = data;\n        this.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n        this.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n    }\n\n    get isMeleeAction() {\n        return this.data.isMelee;\n    }\n\n    get damage() {\n        return this.combinedMetrics.damage;\n    }\n\n    get dps() {\n        return this.combinedMetrics.dps;\n    }\n\n    get tps() {\n        return this.combinedMetrics.tps;\n    }\n\n    get casts() {\n        return this.combinedMetrics.casts;\n    }\n\n    get castsPerMinute() {\n        return this.combinedMetrics.castsPerMinute;\n    }\n\n    get avgCast() {\n        return this.combinedMetrics.avgCast;\n    }\n\n    get avgCastThreat() {\n        return this.combinedMetrics.avgCastThreat;\n    }\n\n    get landedHits() {\n        return this.combinedMetrics.landedHits;\n    }\n\n    get hitAttempts() {\n        return this.combinedMetrics.hitAttempts;\n    }\n\n    get avgHit() {\n        return this.combinedMetrics.avgHit;\n    }\n\n    get avgHitThreat() {\n        return this.combinedMetrics.avgHitThreat;\n    }\n\n    get critPercent() {\n        return this.combinedMetrics.critPercent;\n    }\n\n    get misses() {\n        return this.combinedMetrics.misses;\n    }\n\n    get missPercent() {\n        return this.combinedMetrics.missPercent;\n    }\n\n    get dodges() {\n        return this.combinedMetrics.dodges;\n    }\n\n    get dodgePercent() {\n        return this.combinedMetrics.dodgePercent;\n    }\n\n    get parries() {\n        return this.combinedMetrics.parries;\n    }\n\n    get parryPercent() {\n        return this.combinedMetrics.parryPercent;\n    }\n\n    get blocks() {\n        return this.combinedMetrics.blocks;\n    }\n\n    get blockPercent() {\n        return this.combinedMetrics.blockPercent;\n    }\n\n    get glances() {\n        return this.combinedMetrics.glances;\n    }\n\n    get glancePercent() {\n        return this.combinedMetrics.glancePercent;\n    }\n\n    forTarget(filter?: SimResultFilter): ActionMetrics {\n        const unitIndex = this.unit!.getTargetIndex(filter);\n        if (unitIndex == null) {\n            return this;\n        } else {\n            const target = this.targets.find(target => target.data.unitIndex == unitIndex);\n            if (target) {\n                const targetData = ActionMetricsProto.clone(this.data);\n                targetData.targets = [target.data];\n                return new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n            } else {\n                throw new Error('Could not find target with unitIndex ' + unitIndex);\n            }\n        }\n    }\n\n    static async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n        const actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n        return new ActionMetrics(unit, actionId, actionMetrics, resultData);\n    }\n\n    // Merges an array of metrics into a single metric.\n    static merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n        const firstAction = actions[0];\n        const unit = firstAction.unit\n        let actionId = actionIdOverride || firstAction.actionId;\n        if (removeTag) {\n            actionId = actionId.withoutTag();\n        }\n\n        const maxTargets = Math.max(...actions.map(action => action.targets.length));\n        const mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n        return new ActionMetrics(\n            unit,\n            actionId,\n            ActionMetricsProto.create({\n                isMelee: firstAction.isMeleeAction,\n                targets: mergedTargets.map(t => t.data),\n            }),\n            firstAction.resultData);\n    }\n\n    // Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n    // different tags, and returns them as separate arrays.\n    static groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n        if (useTag) {\n            return Object.values(bucket(actions, action => action.actionId.toString()));\n        } else {\n            return Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n        }\n    }\n\n    // Merges action metrics that have the same name/ID, adding their stats together.\n    static joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n        return ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n    }\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n    private readonly iterations: number;\n    private readonly duration: number;\n    readonly data: TargetedActionMetricsProto;\n\n    readonly landedHitsRaw: number;\n    readonly hitAttempts: number;\n\n    constructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n        this.iterations = iterations;\n        this.duration = duration;\n        this.data = data;\n\n        this.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n        this.hitAttempts = this.data.misses\n            + this.data.dodges\n            + this.data.parries\n            + this.data.blocks\n            + this.data.glances\n            + this.data.crits\n            + this.data.hits;\n    }\n\n    get damage() {\n        return this.data.damage;\n    }\n\n    get dps() {\n        return this.data.damage / this.iterations / this.duration;\n    }\n\n    get tps() {\n        return this.data.threat / this.iterations / this.duration;\n    }\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n    get castsPerMinute() {\n        return this.casts / (this.duration / 60);\n    }\n\n    get avgCast() {\n        return (this.data.damage / this.iterations) / (this.casts || 1);\n    }\n\n    get avgCastThreat() {\n        return (this.data.threat / this.iterations) / (this.casts || 1);\n    }\n\n    get landedHits() {\n        return this.landedHitsRaw / this.iterations;\n    }\n\n    get avgHit() {\n        const lhr = this.landedHitsRaw;\n        return lhr == 0 ? 0 : this.data.damage / lhr;\n    }\n\n    get avgHitThreat() {\n        const lhr = this.landedHitsRaw;\n        return lhr == 0 ? 0 : this.data.threat / lhr;\n    }\n\n    get critPercent() {\n        return (this.data.crits / (this.hitAttempts || 1)) * 100;\n    }\n\n    get misses() {\n        return this.data.misses / this.iterations;\n    }\n\n    get missPercent() {\n        return (this.data.misses / (this.hitAttempts || 1)) * 100;\n    }\n\n    get dodges() {\n        return this.data.dodges / this.iterations;\n    }\n\n    get dodgePercent() {\n        return (this.data.dodges / (this.hitAttempts || 1)) * 100;\n    }\n\n    get parries() {\n        return this.data.parries / this.iterations;\n    }\n\n    get parryPercent() {\n        return (this.data.parries / (this.hitAttempts || 1)) * 100;\n    }\n\n    get blocks() {\n        return this.data.blocks / this.iterations;\n    }\n\n    get blockPercent() {\n        return (this.data.blocks / (this.hitAttempts || 1)) * 100;\n    }\n\n    get glances() {\n        return this.data.glances / this.iterations;\n    }\n\n    get glancePercent() {\n        return (this.data.glances / (this.hitAttempts || 1)) * 100;\n    }\n\n    // Merges an array of metrics into a single metric.\n    static merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n        return new TargetedActionMetrics(\n            actions[0]?.iterations || 1,\n            actions[0]?.duration || 1,\n            TargetedActionMetricsProto.create({\n                casts: sum(actions.map(a => a.data.casts)),\n                hits: sum(actions.map(a => a.data.hits)),\n                crits: sum(actions.map(a => a.data.crits)),\n                misses: sum(actions.map(a => a.data.misses)),\n                dodges: sum(actions.map(a => a.data.dodges)),\n                parries: sum(actions.map(a => a.data.parries)),\n                blocks: sum(actions.map(a => a.data.blocks)),\n                glances: sum(actions.map(a => a.data.glances)),\n                damage: sum(actions.map(a => a.data.damage)),\n                threat: sum(actions.map(a => a.data.threat)),\n            }));\n    }\n}\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","export abstract class Component {\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n}\n","import { Sim } from '../sim.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { Component } from './component.js';\n\ndeclare var tippy: any;\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T> {\n\tlabel?: string,\n\tlabelTooltip?: string,\n\textraCssClasses?: Array<string>,\n\n\tdefaultValue?: T,\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>,\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T,\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void,\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean,\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean,\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement,\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T>;\n\treadonly modObject: ModObject;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\t\tif (config.extraCssClasses) {\n\t\t\tthis.rootElem.classList.add(...config.extraCssClasses);\n\t\t}\n\n\t\tif (config.label) {\n\t\t\tconst labelDiv = document.createElement('div');\n\t\t\tlabelDiv.classList.add('input-label-div');\n\t\t\tthis.rootElem.appendChild(labelDiv);\n\n\t\t\tconst label = document.createElement('span');\n\t\t\tlabel.classList.add('input-label');\n\t\t\tlabel.textContent = config.label;\n\t\t\tlabelDiv.appendChild(label);\n\n\t\t\tif (config.labelTooltip) {\n\t\t\t\tconst tooltip = document.createElement('span');\n\t\t\t\ttooltip.classList.add('input-tooltip', 'fa', 'fa-info-circle');\n\t\t\t\ttippy(tooltip, {\n\t\t\t\t\t'content': config.labelTooltip,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t});\n\t\t\t\tlabelDiv.appendChild(tooltip);\n\t\t\t}\n\t\t}\n\n\t\tconfig.changedEvent(this.modObject).on(eventID => {\n\t\t\tthis.setInputValue(config.getValue(this.modObject));\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate update() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem().removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem().setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tif (this.inputConfig.defaultValue) {\n\t\t\tthis.setInputValue(this.inputConfig.defaultValue);\n\t\t} else {\n\t\t\tthis.setInputValue(this.inputConfig.getValue(this.modObject));\n\t\t}\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n}\n","import { Encounter as EncounterProto } from '../proto/common.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult, ProgressMetrics } from '../proto/api.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem } from '../utils.js';\n\ndeclare var tippy: any;\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('DPS', 'dps-action', async () => simUI.runSim((progress: ProgressMetrics) => {\n\t\tresultsManager.setSimProgress(progress);\n\t}));\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult,\n\tsettings: any,\n\traidProto: RaidProto,\n\tencounterProto: EncounterProto,\n};\n\nexport class RaidSimResultsManager {\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[\n\t\t\tthis.currentChangeEmitter,\n\t\t\tthis.referenceChangeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tif (progress.presimRunning) {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\tpresimulations running\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t} else {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\t${progress.completedIterations} / ${progress.totalIterations}<br>iterations complete\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t}\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\t'raid': RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\t'encounter': EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\tthis.simUI.resultsViewer.setContent(`\n      <div class=\"results-sim\">\n\t\t\t\t${RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div class=\"results-sim-reference\">\n\t\t\t\t\t<span class=\"results-sim-set-reference fa fa-map-pin\"></span>\n\t\t\t\t\t<div class=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<span class=\"results-sim-reference-dps-diff\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-tps-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-dtps-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-chanceOfDeath-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-text\"> vs. reference</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-swap fa fa-retweet\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-delete fa fa-times\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </div>\n    `);\n\n\t\tconst setResultTippy = (cssClass: string, tippyContent: string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.getElementsByClassName(cssClass)[0] as HTMLElement | undefined;\n\t\t\tif (resultDivElem) {\n\t\t\t\ttippy(resultDivElem, {\n\t\t\t\t\t'content': tippyContent,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t\tplacement: 'right',\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tsetResultTippy('results-sim-dps', 'Damage Per Second');\n\t\tsetResultTippy('results-sim-tps', 'Threat Per Second');\n\t\tsetResultTippy('results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTippy('results-sim-chanceOfDeath', `\n\t\t\t<p>Chance of Death</p>\n\t\t\t<p>The percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the <b>Incoming HPS</b> and <b>Healing Cadence</b> options).</p>\n\t\t\t<p>DTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to capture overall tankiness.</p>\n\t\t`);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff-separator')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dtps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-chanceOfDeath-diff')).forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff')[0] as HTMLSpanElement;\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-set-reference')[0] as HTMLSpanElement;\n\t\tsimReferenceSetButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = this.currentData;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceSetButton, {\n\t\t\t'content': 'Use as reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-swap')[0] as HTMLSpanElement;\n\t\tsimReferenceSwapButton.addEventListener('click', event => {\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\tthis.updateReference();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttippy(simReferenceSwapButton, {\n\t\t\t'content': 'Swap reference with current',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-delete')[0] as HTMLSpanElement;\n\t\tsimReferenceDeleteButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = null;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceDeleteButton, {\n\t\t\t'content': 'Remove reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dps-diff')[0] as HTMLSpanElement;\n\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\tsimReferenceElem.classList.remove('has-reference');\n\t\t\treturn;\n\t\t}\n\t\tsimReferenceElem.classList.add('has-reference');\n\n\t\tconst currentDpsMetrics = this.currentData.simResult.raidMetrics.dps;\n\t\tconst referenceDpsMetrics = this.referenceData.simResult.raidMetrics.dps;\n\t\tformatDeltaTextElem(simReferenceDpsDiffElem, referenceDpsMetrics.avg, currentDpsMetrics.avg, 2);\n\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tconst simReferenceTpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tps-diff')[0] as HTMLSpanElement;\n\t\t\tconst simReferenceDtpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dtps-diff')[0] as HTMLSpanElement;\n\t\t\tconst simReferenceCodDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-chanceOfDeath-diff')[0] as HTMLSpanElement;\n\n\t\t\tconst curPlayerMetrics = this.currentData.simResult.getPlayers()[0]!;\n\t\t\tconst refPlayerMetrics = this.referenceData.simResult.getPlayers()[0]!;\n\t\t\tformatDeltaTextElem(simReferenceTpsDiffElem, refPlayerMetrics.tps.avg, curPlayerMetrics.tps.avg, 2);\n\t\t\tformatDeltaTextElem(simReferenceDtpsDiffElem, refPlayerMetrics.dtps.avg, curPlayerMetrics.dtps.avg, 2);\n\t\t\tformatDeltaTextElem(simReferenceCodDiffElem, refPlayerMetrics.chanceOfDeath, curPlayerMetrics.chanceOfDeath, 1);\n\t\t}\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.referenceData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): string {\n\t\tconst players = simResult.getPlayers(filter);\n\t\tconst playerMetrics = players.length == 1 ? players[0] : null;\n\t\tlet content = '';\n\n\t\tif (playerMetrics) {\n\t\t\tif (playerMetrics.getTargetIndex(filter) == null) {\n\t\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tcontent += `\n\t\t\t\t\t<div class=\"results-sim-dps\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${dpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${dpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-tps threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${tpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${tpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-dtps threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${dtpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${dtpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-chanceOfDeath threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${playerMetrics.chanceOfDeath.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getActionMetrics(filter);\n\t\t\t\tconst targetActions = simResult.getTargets(filter)[0].actions.map(action => action.forTarget(filter));\n\t\t\t\tif (actions.length > 0) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent += `\n\t\t\t\t\t\t<div class=\"results-sim-dps\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedActions.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-tps threat-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedActions.tps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t}\n\t\t\t\tif (targetActions.length > 0) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent += `\n\t\t\t\t\t\t<div class=\"results-sim-dtps threat-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedTargetActions.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent = `\n\t\t\t\t<div class=\"results-sim-dps\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${dpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t<span class=\"topline-result-stdev\">${dpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent += `<div class=\"results-sim-dur\"><span class=\"topline-result-avg\">${simResult.result.avgIterationDuration.toFixed(2)}s</span></div>`;\n\t\t}\n\n\t\treturn content;\n\t}\n}\n"],"names":["typeofJsonValue","value","t","Array","isArray","encTable","split","decTable","i","length","charCodeAt","indexOf","fromCharCodes","chunk","String","fromCharCode","apply","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","int64fromString","dec","minus","slice","base","add1e6digit","begin","end","digit1e6","Number","TWO_PWR_32_DBL","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","Math","floor","varint32write","varint32read","result","readBytes","BI","dv","DataView","ArrayBuffer","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","assertBi","bi","RE_DECIMAL_STR","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","static","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","BinaryReader","varint64","uint32","len","view","buffer","byteOffset","byteLength","tag","fieldNo","wireType","skip","start","WireType","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","parts","join","utf8read","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","prev","pop","raw","type","encode","setFloat32","setFloat64","setUint32","long","from","sign","UnknownFieldHandler","symbol","Symbol","onRead","typeName","message","data","is","no","onWrite","writer","list","all","filter","uf","last","defaultsRead","readUnknownField","readerFactory","defaultsWrite","writeUnknownFields","writerFactory","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","name","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","Object","keys","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","includes","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","substring","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","es","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","assign","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","Spec","Race","Faction","ShattrathFaction","Class","Profession","Stat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TristateEffect","Explosive","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","PetFood","MobType","EnchantType","OtherAction","RaidBuffs","super","giftOfTheWild","powerWordFortitude","commandingShout","bloodPact","hornOfWinter","strengthOfEarthTotem","arcaneBrilliance","felIntelligence","divineSpirit","battleShout","trueshotAura","unleashedRage","abominationsMight","leaderOfThePack","rampage","icyTalons","windfuryTotem","totemOfWrath","flametongueTotem","demonicPact","swiftRetribution","moonkinAura","elementalOath","wrathOfAirTotem","ferociousInspiration","sanctifiedRetribution","arcaneEmpowerment","manaSpringTotem","bloodlust","thorns","devotionAura","stoneskinTotem","retributionAura","shadowProtection","drumsOfForgottenKings","drumsOfTheWild","scrollOfProtection","scrollOfStamina","scrollOfStrength","scrollOfAgility","scrollOfIntellect","scrollOfSpirit","PartyBuffs","atieshMage","atieshWarlock","braidedEterniumChain","eyeOfTheNight","chainOfTheTwilightOwl","manaTideTotems","heroicPresence","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","blessingOfSanctuary","vigilance","renewedHope","hymnOfHope","handOfSalvation","rapture","innervates","powerInfusions","unholyFrenzy","revitalize","tricksOfTheTrades","shatteringThrows","vampiricTouch","huntingParty","judgementsOfTheWise","improvedSoulLeech","enduringWinter","Consumes","flask","battleElixir","guardianElixir","food","petFood","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","startingConjured","numStartingConjured","thermalSapper","explosiveDecoy","fillerExplosive","Debuffs","judgementOfWisdom","judgementOfLight","misery","faerieFire","curseOfElements","ebonPlaguebringer","earthAndMoon","heartOfTheCrusader","masterPoisoner","shadowMastery","improvedScorch","wintersChill","bloodFrenzy","savageCombat","giftOfArthas","mangle","trauma","stampede","exposeArmor","sunderArmor","acidSpit","curseOfWeakness","sting","sporeCloud","demoralizingRoar","demoralizingShout","vindication","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","insectSwarm","scorpidSting","shadowEmbrace","screech","huntersMark","Target","id","level","mobType","stats","minBaseDamage","swingSpeed","dualWield","dualWieldPenalty","parryHaste","suppressDodge","spellSchool","tankIndex","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","useHealth","targets","ItemSpec","enchant","gems","EquipmentSpec","items","Item","wowheadId","classAllowlist","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","phase","quality","unique","ilvl","requiredProfession","heroic","Enchant","effectId","isSpellId","enchantType","Gem","color","RaidTarget","targetIndex","ActionID","rawId","spellId","itemId","otherId","Glyphs","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","CustomRotation","CustomSpell","spells","spell","Deathknight_Rotation_ArmyOfTheDead","Deathknight_Rotation_BloodTap","Deathknight_Rotation_DeathAndDecayPrio","Deathknight_Rotation_FirstDisease","Deathknight_Rotation_BloodRuneFiller","Deathknight_Rotation_StartingPresence","DeathknightMajorGlyph","DeathknightMinorGlyph","DeathknightTalents","butchery","subversion","bladeBarrier","bladedArmor","scentOfBlood","twoHandedWeaponSpecialization","runeTap","darkConviction","deathRuneMastery","improvedRuneTap","spellDeflection","vendetta","bloodyStrikes","veteranOfTheThirdWar","markOfBlood","bloodyVengeance","bloodworms","hysteria","improvedBloodPresence","improvedDeathStrike","suddenDoom","vampiricBlood","willOfTheNecropolis","heartStrike","mightOfMograine","bloodGorged","dancingRuneWeapon","improvedIcyTouch","runicPowerMastery","toughness","icyReach","blackIce","nervesOfColdSteel","lichborne","annihilation","killingMachine","chillOfTheGrave","endlessWinter","frigidDreadplate","glacierRot","deathchill","improvedIcyTalons","mercilessCombat","rime","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","bloodOfTheNorth","unbreakableArmor","acclimation","frostStrike","guileOfGorefiend","tundraStalker","howlingBlast","viciousStrikes","virulence","anticipation","epidemic","morbidity","unholyCommand","ravenousDead","outbreak","necrosis","corpseExplosion","onAPaleHorse","bloodCakedBlade","nightOfTheDead","unholyBlight","impurity","dirge","desecration","magicSuppression","reaping","masterOfGhouls","desolation","antiMagicZone","improvedUnholyPresence","ghoulFrenzy","cryptFever","boneShield","wanderingPlague","scourgeStrike","rageOfRivendare","summonGargoyle","Deathknight","Deathknight_Rotation","Deathknight_Options","rotation","talents","armyOfTheDead","useDeathAndDecay","btGhoulFrenzy","diseaseRefreshDuration","refreshHornOfWinter","firstDisease","deathAndDecayPrio","useEmpowerRuneWeapon","bloodRuneFiller","startingPresence","bloodTap","oblitDelayDuration","useAms","avgAmsSuccessRate","avgAmsHit","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","TankDeathknight","TankDeathknight_Rotation","TankDeathknight_Options","Warrior_Rotation_SunderArmor","ProtectionWarrior_Rotation_DemoShout","ProtectionWarrior_Rotation_ThunderClap","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","improvedHeroicStrike","deflection","improvedRend","improvedCharge","ironWill","tacticalMastery","improvedOverpower","angerManagement","impale","deepWounds","tasteForBlood","poleaxeSpecialization","sweepingStrikes","maceSpecialization","swordSpecialization","weaponMastery","improvedHamstring","secondWind","mortalStrike","strengthOfArms","improvedSlam","juggernaut","improvedMortalStrike","unrelentingAssault","suddenDeath","endlessRage","wreckingCrew","bladestorm","armoredToTheTeeth","boomingVoice","cruelty","improvedDemoralizingShout","unbridledWrath","improvedCleave","piercingHowl","bloodCraze","commandingPresence","dualWieldSpecialization","improvedExecute","enrage","precision","deathWish","improvedIntercept","improvedBerserkerRage","flurry","intensifyRage","bloodthirst","improvedWhirlwind","furiousAttacks","improvedBerserkerStance","heroicFury","bloodsurge","unendingFury","titansGrip","improvedBloodrage","shieldSpecialization","improvedThunderClap","incite","lastStand","improvedRevenge","shieldMastery","improvedSpellReflection","improvedDisarm","puncture","improvedDisciplines","concussionBlow","gagOrder","oneHandedWeaponSpecialization","improvedDefensiveStance","focusedRage","vitality","safeguard","warbringer","devastate","criticalBlock","swordAndBoard","damageShield","shockwave","improvedSunderArmor","improvedShieldWall","improvedShieldBlock","defiance","shieldSlam","Warrior","Warrior_Rotation","Warrior_Options","useCleave","useRend","useMs","useSlam","prioritizeWw","maintainDemoShout","maintainThunderClap","hsRageThreshold","msRageThreshold","rendRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","spamExecute","useWwDuringExecute","useSlamOverExecute","startingRage","useRecklessness","shout","ProtectionWarrior","ProtectionWarrior_Rotation","ProtectionWarrior_Options","demoShout","useShieldBlock","useShieldWall","precastShout","precastShoutT2","precastShoutSapphire","Warlock_Rotation_Preset","Warlock_Rotation_Type","Warlock_Rotation_PrimarySpell","Warlock_Rotation_Curse","Warlock_Rotation_SecondaryDot","Warlock_Rotation_SpecSpell","Warlock_Options_Summon","Warlock_Options_Armor","Warlock_Options_WeaponImbue","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","improvedCurseOfAgony","suppression","improvedCorruption","improvedCurseOfWeakness","improvedDrainSoul","improvedLifeTap","soulSiphon","improvedFear","felConcentration","amplifyCurse","grimReach","nightfall","empoweredCorruption","siphonLife","curseOfExhaustion","improvedFelhunter","eradication","contagion","darkPact","improvedHowlOfTerror","malediction","deathsEmbrace","unstableAffliction","pandemic","everlastingAffliction","haunt","improvedHealthstone","improvedImp","demonicEmbrace","felSynergy","improvedHealthFunnel","demonicBrutality","felVitality","improvedSayaad","soulLink","felDomination","demonicAegis","unholyPower","masterSummoner","manaFeed","masterConjuror","masterDemonologist","moltenCore","demonicResilience","demonicEmpowerment","demonicKnowledge","demonicTactics","decimation","improvedDemonicTactics","summonFelguard","nemesis","metamorphosis","improvedShadowBolt","bane","aftermath","moltenSkin","cataclysm","demonicPower","shadowburn","ruin","intensity","destructiveReach","improvedSearingPain","backlash","improvedImmolate","devastation","netherProtection","emberstorm","conflagrate","soulLeech","pyroclasm","shadowAndFlame","backdraft","shadowfury","empoweredImp","fireAndBrimstone","chaosBolt","Warlock","Warlock_Rotation","Warlock_Options","preset","curse","primarySpell","secondaryDot","corruption","detonateSeed","specSpell","armor","summon","weaponImbue","ElementalShaman_Rotation_RotationType","EnhancementShaman_Rotation_RotationType","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanTalents","convection","concussion","callOfFlame","elementalWarding","elementalDevastation","reverberation","elementalFocus","elementalFury","improvedFireNova","eyeOfTheStorm","elementalReach","callOfThunder","unrelentingStorm","elementalPrecision","lightningMastery","elementalMastery","stormEarthAndFire","boomingEchoes","lightningOverload","astralShift","lavaFlows","shamanism","thunderstorm","enhancingTotems","earthsGrasp","ancestralKnowledge","guardianTotems","thunderingStrikes","improvedGhostWolf","improvedShields","elementalWeapons","shamanisticFocus","improvedWindfuryTotem","spiritWeapons","mentalDexterity","frozenPower","stormstrike","staticShock","lavaLash","improvedStormstrike","mentalQuickness","shamanisticRage","earthenPower","maelstromWeapon","feralSpirit","improvedHealingWave","totemicFocus","improvedReincarnation","healingGrace","tidalFocus","improvedWaterShield","healingFocus","tidalForce","ancestralHealing","restorativeTotems","tidalMastery","healingWay","naturesSwiftness","focusedMind","purification","naturesGuardian","manaTideTotem","cleanseSpirit","blessingOfTheEternals","improvedChainHeal","naturesBlessing","ancestralAwakening","earthShield","improvedEarthShield","tidalWaves","riptide","ShamanTotems","earth","air","fire","water","useManaTide","useFireElemental","recallFireElementalOnOom","recallTotems","ElementalShaman","ElementalShaman_Rotation","ElementalShaman_Options","inThunderstormRange","useFireNova","fnMinManaPer","useChainLightning","useClOnlyGap","clMinManaPer","overwriteFlameshock","alwaysCritLvb","useThunderstorm","totems","shield","EnhancementShaman","EnhancementShaman_Rotation","EnhancementShaman_Options","rotationType","lavaburstWeave","lightningboltWeave","maelstromweaponMinStack","firenovaManaThreshold","shamanisticRageManaThreshold","syncType","imbueMh","imbueOh","Rogue_Rotation_Frequency","Rogue_Rotation_CombatPriority","Rogue_Rotation_AssassinationPriority","Rogue_Options_PoisonImbue","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","improvedEviscerate","remorselessAttacks","malice","ruthlessness","bloodSpatter","puncturingWounds","vigor","improvedExposeArmor","lethality","vilePoisons","improvedPoisons","fleetFooted","coldBlood","improvedKidneyShot","quickRecovery","sealFate","murder","deadlyBrew","overkill","deadenedNerves","focusedAttacks","findWeakness","mutilate","turnTheTables","cutToTheChase","hungerForBlood","improvedGouge","improvedSinisterStrike","improvedSliceAndDice","endurance","riposte","closeQuartersCombat","improvedKick","improvedSprint","lightningReflexes","aggression","bladeFlurry","hackAndSlash","weaponExpertise","bladeTwisting","adrenalineRush","nervesOfSteel","throwingSpecialization","combatPotency","unfairAdvantage","surpriseAttacks","preyOnTheWeak","killingSpree","relentlessStrikes","masterOfDeception","opportunity","sleightOfHand","dirtyTricks","camouflage","elusiveness","ghostlyStrike","serratedBlades","setup","initiative","improvedAmbush","heightenedSenses","preparation","dirtyDeeds","hemorrhage","masterOfSubtlety","deadliness","envelopingShadows","premeditation","cheatDeath","sinisterCalling","waylay","honorAmongThieves","shadowstep","filthyTricks","slaughterFromTheShadows","shadowDance","Rogue","Rogue_Rotation","Rogue_Options","exposeArmorFrequency","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","combatFinisherPriority","assassinationFinisherPriority","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","multiTargetSliceFrequency","minimumComboPointsMultiTargetSlice","mhImbue","ohImbue","tricksOfTheTradeTarget","ShadowPriest_Rotation_RotationType","ShadowPriest_Options_Armor","SmitePriest_Rotation_RotationType","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","unbreakableWill","twinDisciplines","silentResolve","improvedInnerFire","improvedPowerWordFortitude","martyrdom","meditation","innerFocus","improvedPowerWordShield","absolution","mentalAgility","improvedManaBurn","reflectiveShield","mentalStrength","soulWarding","focusedPower","enlightenment","focusedWill","powerInfusion","improvedFlashHeal","aspiration","divineAegis","painSuppression","grace","borrowedTime","penance","improvedRenew","holySpecialization","spellWarding","divineFury","desperatePrayer","blessedRecovery","inspiration","holyReach","improvedHealing","searingLight","healingPrayers","spiritOfRedemption","spiritualGuidance","surgeOfLight","spiritualHealing","holyConcentration","lightwell","blessedResilience","bodyAndSoul","empoweredHealing","serendipity","empoweredRenew","circleOfHealing","testOfFaith","divineProvidence","guardianSpirit","spiritTap","improvedSpiritTap","darkness","shadowAffinity","improvedShadowWordPain","shadowFocus","improvedPsychicScream","improvedMindBlast","mindFlay","veiledShadows","shadowReach","shadowWeaving","silence","vampiricEmbrace","improvedVampiricEmbrace","mindMelt","improvedDevouringPlague","shadowform","shadowPower","improvedShadowform","psychicHorror","painAndSuffering","twistedFaith","dispersion","ShadowPriest","ShadowPriest_Rotation","ShadowPriest_Options","precastVt","latency","useShadowfiend","useMindBlast","useShadowWordDeath","SmitePriest","SmitePriest_Rotation","SmitePriest_Options","powerInfusionTarget","RetributionPaladin_Rotation_SpellOption","RetributionPaladin_Rotation_RotationType","ProtectionPaladin_Rotation_SpellOption","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","spiritualFocus","sealsOfThePure","healingLight","divineIntellect","unyieldingFaith","auraMastery","illumination","improvedLayOnHands","improvedConcentrationAura","improvedBlessingOfWisdom","blessedHands","pureOfHeart","divineFavor","sanctifiedLight","purifyingPower","holyPower","lightsGrace","holyShock","blessedLife","sacredCleansing","holyGuidance","divineIllumination","judgementsOfThePure","infusionOfLight","enlightenedJudgements","beaconOfLight","divinity","divineStrength","stoicism","guardiansFavor","divineSacrifice","improvedRighteousFury","divineGuardian","improvedHammerOfJustice","improvedDevotionAura","reckoning","sacredDuty","spiritualAttunement","holyShield","ardentDefender","redoubt","combatExpertise","touchedByTheLight","avengersShield","guardedByTheLight","shieldOfTheTemplar","hammerOfTheRighteous","benediction","improvedJudgements","improvedBlessingOfMight","conviction","sealOfCommand","pursuitOfJustice","eyeForAnEye","sanctityOfBattle","crusade","vengeance","divinePurpose","theArtOfWar","repentance","fanaticism","sanctifiedWrath","crusaderStrike","sheathOfLight","righteousVengeance","divineStorm","RetributionPaladin","RetributionPaladin_Rotation","RetributionPaladin_Options","exoSlack","consSlack","divinePleaPercentage","holyWrathThreshold","useDivinePlea","customRotation","customCastSequence","judgement","seal","aura","damageTakenPerSecond","useAvengingWrath","ProtectionPaladin","ProtectionPaladin_Rotation","ProtectionPaladin_Options","prioritizeHolyShield","Mage_Rotation_Type","Mage_Rotation_PrimaryFireSpell","Mage_Rotation_AoeRotation","Mage_Options_ArmorType","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneSubtlety","arcaneFocus","arcaneStability","arcaneFortitude","magicAbsorption","arcaneConcentration","magicAttunement","spellImpact","studentOfTheMind","focusMagic","arcaneShielding","improvedCounterspell","arcaneMeditation","tormentTheWeak","improvedBlink","presenceOfMind","arcaneMind","prismaticCloak","arcaneInstability","arcanePotency","arcanePower","incantersAbsorption","arcaneFlows","mindMastery","slow","missileBarrage","netherwindPresence","spellPower","arcaneBarrage","improvedFireBlast","incineration","improvedFireball","ignite","burningDetermination","worldInFlames","flameThrowing","impact","pyroblast","burningSoul","moltenShields","masterOfElements","playingWithFire","criticalMass","blastWave","blazingSpeed","firePower","pyromaniac","combustion","moltenFury","fieryPayback","empoweredFire","firestarter","dragonsBreath","hotStreak","burnout","livingBomb","frostbite","improvedFrostbolt","iceFloes","iceShards","frostWarding","permafrost","piercingIce","icyVeins","improvedBlizzard","arcticReach","frostChanneling","shatter","coldSnap","improvedConeOfCold","frozenCore","coldAsIce","shatteredBarrier","iceBarrier","arcticWinds","empoweredFrostbolt","fingersOfFrost","brainFreeze","summonWaterElemental","chilledToTheBone","deepFreeze","Mage","Mage_Rotation","Mage_Options","minBlastBeforeMissiles","num4StackBlastsToMissilesGamble","num4StackBlastsToEarlyMissiles","extraBlastsDuringFirstAp","primaryFireSpell","maintainImprovedScorch","numExtraTargets","optimizeCdsForExecute","cqsLatency","lbBeforeHotstreak","waterElementalDisobeyChance","aoe","evocationTicks","focusMagicPercentUptime","Hunter_Rotation_RotationType","Hunter_Rotation_StingType","Hunter_Rotation_SpellOption","Hunter_Options_Ammo","Hunter_Options_PetType","HunterMajorGlyph","HunterMinorGlyph","HunterTalents","improvedAspectOfTheHawk","enduranceTraining","focusedFire","improvedAspectOfTheMonkey","thickHide","improvedRevivePet","pathfinding","aspectMastery","unleashedFury","improvedMendPet","ferocity","spiritBond","intimidation","bestialDiscipline","animalHandler","frenzy","bestialWrath","catlikeReflexes","invigoration","serpentsSwiftness","longevity","theBeastWithin","cobraStrikes","kindredSpirits","beastMastery","improvedConcussiveShot","focusedAim","lethalShots","carefulAim","improvedHuntersMark","mortalShots","goForTheThroat","improvedArcaneShot","aimedShot","rapidKilling","improvedStings","efficiency","concussiveBarrage","readiness","barrage","combatExperience","rangedWeaponSpecialization","piercingShots","improvedBarrage","masterMarksman","rapidRecuperation","wildQuiver","silencingShot","improvedSteadyShot","markedForDeath","chimeraShot","improvedTracking","hawkEye","savageStrikes","surefooted","entrapment","trapMastery","survivalInstincts","survivalist","scatterShot","survivalTactics","tNT","lockAndLoad","hunterVsWild","killerInstinct","counterattack","resourcefulness","exposeWeakness","wyvernSting","thrillOfTheHunt","masterTactician","noxiousStings","pointOfNoEscape","blackArrow","sniperTraining","explosiveShot","HunterPetTalents","cobraReflexes","dive","greatStamina","naturalArmor","boarsSpeed","mobility","owlsFocus","spikedCollar","cullingTheHerd","lionhearted","carrionFeeder","greatResistance","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","graceOfTheMantis","wildHunt","roarOfSacrifice","improvedCower","bloodthirsty","heartOfThePheonix","spidersBite","rabid","lickYourWounds","callOfTheWild","sharkAttack","charge","bloodOfTheRhino","petBarding","guardDog","thunderstomp","taunt","intervene","silverback","Hunter","Hunter_Rotation","Hunter_Options","trapWeave","timeToTrapWeaveMs","viperStartManaPercent","viperStopManaPercent","ammo","petType","sniperTrainingUptime","useHuntersMark","petTalents","BalanceDruid_Rotation_RotationType","FeralDruid_Rotation_FinishingMove","FeralTankDruid_Rotation_Swipe","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","starlightWrath","genesis","moonglow","naturesMajesty","improvedMoonfire","brambles","naturesGrace","naturesSplendor","naturesReach","celestialFocus","lunarGuidance","improvedInsectSwarm","dreamstate","moonfury","balanceOfPower","moonkinForm","improvedMoonkinForm","improvedFaerieFire","owlkinFrenzy","wrathOfCenarius","eclipse","typhoon","forceOfNature","galeWinds","starfall","feralAggression","feralInstinct","savageFury","feralSwiftness","sharpenedClaws","shreddingAttacks","predatoryStrikes","primalFury","primalPrecision","brutalImpact","feralCharge","nurturingInstinct","naturalReaction","heartOfTheWild","survivalOfTheFittest","improvedLeaderOfThePack","primalTenacity","protectorOfThePack","predatoryInstincts","kingOfTheJungle","improvedMangle","rendAndTear","primalGore","berserk","improvedMarkOfTheWild","naturesFocus","furor","naturalist","subtlety","naturalShapeshifter","omenOfClarity","masterShapeshifter","tranquilSpirit","improvedRejuvenation","giftOfNature","improvedTranquility","empoweredTouch","naturesBounty","livingSpirit","swiftmend","naturalPerfection","empoweredRejuvenation","livingSeed","treeOfLife","improvedTreeOfLife","improvedBarkskin","giftOfTheEarthmother","wildGrowth","BalanceDruid","BalanceDruid_Rotation","BalanceDruid_Options","battleRes","useIs","useMf","mfInsideEclipseThreshold","isInsideEclipseThreshold","innervateTarget","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","finishingMove","mangleTrick","biteweave","ripweave","ripMinComboPoints","biteMinComboPoints","rakeTrick","maintainFaerieFire","latencyMs","FeralTankDruid","FeralTankDruid_Rotation","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","swipe","swipeApThreshold","ResourceType","Player","race","shattFaction","class","bonusStats","spec","talentsString","profession1","profession2","inFrontOfTarget","distanceFromTarget","equipment","consumes","buffs","balanceDruid","feralDruid","feralTankDruid","hunter","mage","retributionPaladin","protectionPaladin","shadowPriest","smitePriest","rogue","elementalShaman","enhancementShaman","warlock","warrior","protectionWarrior","deathknight","tankDeathknight","glyphs","healingModel","Party","players","Raid","parties","tanks","staggerStormstrikes","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","max","maxSeed","min","minSeed","hist","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","actions","auras","resources","pets","dps","dtps","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","GearListRequest","GearListResult","PresetEncounter","enchants","encounters","PresetTarget","path","ComputeStatsRequest","PlayerStats","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","sets","PartyStats","RaidStats","ComputeStatsResult","raidStats","StatWeightsRequest","statsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","SimSettings","fixedRngSeed","showThreatMetrics","showExperimental","faction","IndividualSimSettings","epWeights","settings","SavedGearSet","gear","SavedSettings","playerBuffs","SavedTalents","BuffBot","raidIndex","innervateAssignment","powerInfusionAssignment","tricksOfTheTradeAssignment","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","buffBots","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","equalsOrBothNull","comparator","stringComparator","sum","reduce","total","cur","maxIndex","v","swap","j","arrayEquals","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","hexToRgba","hex","alpha","c","downloadString","fileName","dataStr","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","delta","deltaStr","toFixed","textContent","classList","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","has","gemMatchesSocket","gem","gemEligibleForSocket","GemColorMeta","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","getMetaGemCondition","isMetaGemActive","metaGem","getMetaGemConditionDescription","CHAOTIC_SKYFLARE_DIAMOND","fromMinColors","CHAOTIC_SKYFIRE_DIAMOND","fromCompareColors","gemSocketCssClasses","setGemSocketCssClass","cssClass","emptyGemSocketIcons","getEmptyGemSocketIconUrl","NUM_SPECS","naturalSpecOrder","SpecBalanceDruid","SpecFeralDruid","SpecFeralTankDruid","SpecHunter","SpecMage","SpecRetributionPaladin","SpecProtectionPaladin","SpecShadowPriest","SpecSmitePriest","SpecRogue","SpecElementalShaman","SpecEnhancementShaman","SpecWarlock","SpecWarrior","SpecProtectionWarrior","SpecDeathknight","SpecTankDeathknight","specNames","classColors","ClassUnknown","ClassDruid","ClassHunter","ClassMage","ClassPaladin","ClassPriest","ClassRogue","ClassShaman","ClassWarlock","ClassWarrior","ClassDeathknight","specIconsLarge","talentTreeIcons","titleIcons","raidSimIcon","getTalentTreePoints","tree","char","getTalentPoints","getTalentTree","getTalentTreeIcon","talentTreeIdx","specToClass","specSiteUrlTemplate","URL","protocol","host","getSpecSiteUrl","specString","str","replace","letter","startsWith","camelToSnakeCase","raidSimSiteUrl","specTypeFunctions","rotationCreate","BalanceDruidRotation","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","obj","rotationFromPlayer","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","talentsFromPlayer","optionsCreate","BalanceDruidOptions","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","ElementalShamanRotation","ElementalShamanOptions","EnhancementShamanRotation","EnhancementShamanOptions","FeralDruidRotation","FeralDruidOptions","FeralTankDruidRotation","FeralTankDruidOptions","HunterRotation","HunterOptions","MageRotation","MageOptions","RetributionPaladinRotation","RetributionPaladinOptions","ProtectionPaladinRotation","ProtectionPaladinOptions","RogueRotation","RogueOptions","ShadowPriestRotation","ShadowPriestOptions","WarlockRotation","WarlockOptions","WarriorRotation","WarriorOptions","ProtectionWarriorRotation","ProtectionWarriorOptions","SmitePriestRotation","SmitePriestOptions","DeathknightRotation","DeathknightOptions","TankDeathknightRotation","TankDeathknightOptions","raceToFaction","RaceUnknown","Unknown","RaceBloodElf","Horde","RaceDraenei","Alliance","RaceDwarf","RaceGnome","RaceHuman","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","druidRaces","hunterRaces","mageRaces","paladinRaces","priestRaces","rogueRaces","shamanRaces","warlockRaces","warriorRaces","deathKnightRaces","specToEligibleRaces","dualWieldSpecs","tankSpecs","isTankSpec","specToLocalStorageKey","withSpecProto","specOptions","playerToSpec","specValues","classToMaxArmorType","ArmorTypeUnknown","ArmorTypeLeather","ArmorTypeMail","ArmorTypeCloth","ArmorTypePlate","classToEligibleRangedWeaponTypes","RangedWeaponTypeIdol","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","RangedWeaponTypeThrown","RangedWeaponTypeWand","RangedWeaponTypeLibram","RangedWeaponTypeTotem","RangedWeaponTypeSigil","classToEligibleWeaponTypes","WeaponTypeDagger","WeaponTypeFist","WeaponTypeMace","canUseTwoHand","WeaponTypeOffHand","WeaponTypeStaff","WeaponTypeAxe","WeaponTypePolearm","WeaponTypeSword","WeaponTypeShield","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","playerStats","Gems.CHAOTIC_SKYFIRE_DIAMOND","getStat","StatSpellPower","StatSpellCrit","Gems.CHAOTIC_SKYFLARE_DIAMOND","getMetaGemEffectEP","canEquipItem","slot","playerClass","ItemTypeFinger","ItemTypeTrinket","ItemTypeWeapon","eligibleWeaponType","wt","HandTypeOffHand","HandTypeOneHand","ItemSlotOffHand","HandTypeTwoHand","ItemTypeRanged","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemSlotFinger1","ItemSlotFinger2","ItemSlotTrinket1","ItemSlotTrinket2","ItemSlotRanged","getEligibleItemSlots","HandTypeMainHand","ItemSlotMainHand","validWeaponCombo","mainHand","offHand","canDW2h","getEligibleEnchantSlots","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","EnchantTypeShield","canEquipEnchant","NO_TARGET","newRaidTarget","emptyRaidTarget","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","makeDefaultBlessings","BlessingOfKings","BlessingOfWisdom","BlessingOfMight","BlessingOfSanctuary","BlessingOfSalvation","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","_ActionId","baseName","iconUrl","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","anyId","other","equalsIgnoringTag","setBackground","style","backgroundImage","setWowheadHref","href","makeItemUrl","makeSpellUrl","setBackgroundAndHref","async","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","toProto","protoId","ActionIdProto","withoutTag","petName","petNameToActionId","petNameToIcon","fromItemId","getWowheadItemId","fromSpellId","fromOtherId","fromEmpty","match","idType","console","warn","iconLabel","url","dbCache","fetch","then","response","responseJson","db","ID","dbUrl","getDb","Name","icon","Icon","tooltipPostfix","cache","Promise","resolve","tooltip","text","nameMatch","iconMatch","tooltipMatch","getDbTooltipDataHelper","actionId","getItemTooltipData","getSpellTooltipData","ActionId","Bloodworm","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Gargoyle","Ghoul","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","ResourceTypeNone","STATS_LEN","Stats","newStat","statIdx","stat","withStat","newStats","addStat","subtract","computeEP","idx","asArray","statsMap","statsArr","entry","statStr","getWeaponDPS","EquippedItem","_item","_enchant","_gems","numPossibleSockets","numSockets","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withGemHelper","withGem","curItem","removeGemsWithId","gemId","asActionId","asSpec","meetsSocketBonus","socketBonusStats","hasExtraSocket","isBlacksmithing","hasExtraGem","allSocketColors","curSocketColors","curGems","g","getFailedProfessionRequirements","professions","failed","raceNames","nameToRace","normalized","replaceAll","classNames","nameToClass","lower","charClass","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Jewelcrafting","Leatherworking","Mining","Skinning","Tailoring","statOrder","StatHealth","StatArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatHealingPower","StatArcaneSpellPower","StatFireSpellPower","StatFrostSpellPower","StatHolySpellPower","StatNatureSpellPower","StatShadowSpellPower","StatSpellHit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatMana","StatEnergy","StatRage","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","slotNames","resourceNames","shattFactionNames","ShattrathFactionAldor","ShattrathFactionScryer","_Entity","ownerName","index","isTarget","isPet","matchAll","parseRegex","Entity","SimLog","params","logIndex","timestamp","activeAuras","toStringPrefix","timestampStr","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","parseAll","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","grouped","curGroup","log","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","resultString","threatPostfix","fromLogString","cause","Boolean","_DpsLog","damageLogs","damageDealtLogs","groupedDamageLogs","groupDuplicateTimestamps","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","stringToResourceType","ResourceChangedLogGroup","allResourceChangedLogs","results","resourceChangedLogs","cooldownId","manaCost","castTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","SimResultData","SimResult","getPlayers","getPlayerWithIndex","party","getFirstPlayer","getTargets","getTargetWithIndex","getUnitWithIndex","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","action","forTarget","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","proto","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","fromLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","populateActiveAuras","majorCooldownAuraUptimeLogs","mcdLog","auraLog","label","getTargetIndex","maxThreat","totalDamage","pet","getActionsForDisplay","getMeleeActions","getSpellActions","playerLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","fromPetName","playerMetrics","unit","targetLogs","targetMetrics","numTargets","makeNewTarget","durationSeconds","averageProcs","ppm","fromProto","removeTag","actionIdOverride","firstAura","AuraMetricsProto","useTag","groupById","aurasToJoin","merge","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","castsPerMinute","avgCast","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","lhr","TargetedActionMetricsProto","TypedEvent","listeners","firedEvents","frozenEvents","on","listener","dispose","off","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","func","typedEvents","typedEvent","frozenEvent","nextEventID","newEvent","emitter","Component","parentElem","rootCssClass","rootElem","Input","parent","modObject","config","changeEmitter","inputConfig","extraCssClasses","labelDiv","labelTooltip","tippy","content","allowHTML","changedEvent","setInputValue","getValue","update","enableWhen","getInputElem","removeAttribute","showWhen","init","defaultValue","inputChanged","setValue","getInputValue","newValue","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","sim","simResultEmitter","simResult","setSimResult","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","setContent","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","setResultTippy","tippyContent","resultDivElem","contentElem","getElementsByClassName","placement","isIndividualSim","simReferenceSetButton","addEventListener","updateReference","simReferenceSwapButton","freezeAllAndDo","swapEventID","tmpData","simReferenceDeleteButton","simReferenceElem","simReferenceDpsDiffElem","currentDpsMetrics","simReferenceTpsDiffElem","simReferenceDtpsDiffElem","simReferenceCodDiffElem","curPlayerMetrics","refPlayerMetrics","getRunData","getCurrentData","getReferenceData","dpsMetrics","tpsMetrics","dtpsMetrics","targetActions","mergedActions"],"mappings":"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"}