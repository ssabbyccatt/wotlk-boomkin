{"version":3,"file":"sim-0d8be463.chunk.js","sources":["../../../ui/deathknight/inputs.ts","../../../ui/deathknight/presets.ts","../../../ui/deathknight/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\n\nimport {\n\tDeathknightTalents as DeathKnightTalents,\n\tDeathknight_Rotation_ArmyOfTheDead as ArmyOfTheDead,\n\tDeathknight_Rotation_FirstDisease as FirstDisease,\n\tDeathknight_Rotation_DeathAndDecayPrio as DeathAndDecayPrio,\n\tDeathknight_Rotation_StartingPresence as StartingPresence,\n\tDeathknight_Rotation_BloodRuneFiller as BloodRuneFiller,\n\tDeathknight_Rotation_BloodTap as BloodTap,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n} from '../core/proto/deathknight.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player';\nimport { TypedEvent } from '../core/typed_event';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRunicPower = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'startingRunicPower',\n\tlabel: 'Starting Runic Power',\n\tlabelTooltip: 'Initial RP at the start of each iteration.',\n});\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'petUptime',\n\tlabel: 'Ghoul Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your ghoul will be on target.',\n\tpercent: true,\n});\n\nexport const PrecastGhoulFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastGhoulFrenzy',\n\tlabel: 'Pre-Cast Ghoul Frenzy',\n\tlabelTooltip: 'Cast Ghoul Frenzy 10 seconds before combat starts.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().ghoulFrenzy,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const PrecastHornOfWinter = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastHornOfWinter',\n\tlabel: 'Pre-Cast Horn of Winter',\n\tlabelTooltip: 'Precast Horn of Winter for 10 extra runic power before fight.',\n});\n\nexport const RefreshHornOfWinter = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'refreshHornOfWinter',\n\tlabel: 'Refresh Horn of Winter',\n\tlabelTooltip: 'Refresh Horn of Winter on free GCDs.',\n});\n\nexport const DiseaseRefreshDuration = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'diseaseRefreshDuration',\n\tlabel: 'Disease Refresh Duration',\n\tlabelTooltip: 'Minimum duration for refreshing a disease.',\n});\n\nexport const UseDeathAndDecay = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDeathAndDecay',\n\tlabel: 'Death and Decay',\n\tlabelTooltip: 'Use Death and Decay based rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().scourgeStrike,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const SetDeathAndDecayPrio = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DeathAndDecayPrio>({\n\tfieldName: 'deathAndDecayPrio',\n\tlabel: 'Death and Decay Prio',\n\tlabelTooltip: '<p>Chose how to prioritize death and decay usage:</p>\\\n\t\t<p><b>Max Rune Downtime</b>: Prioritizes spending runes over holding them for death and decay</p>\\\n\t\t<p><b>Max Dnd Uptime</b>: Prioritizes dnd uptime and can hold runes for longer then rune grace</p>',\n\tvalues: [\n\t\t{ name: 'Max Rune Downtime', value: DeathAndDecayPrio.MaxRuneDowntime },\n\t\t{ name: 'Max Dnd Uptime', value: DeathAndDecayPrio.MaxDndUptime },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && (player.getRotation().useDeathAndDecay || !player.getTalents().scourgeStrike),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseEmpowerRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useEmpowerRuneWeapon',\n\tlabel: 'Empower Rune Weapon',\n\tlabelTooltip: 'Use Empower Rune Weapon in rotation.',\n});\n\nexport const BloodTapGhoulFrenzy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'btGhoulFrenzy',\n\tlabel: 'BT Ghoul Frenzy',\n\tlabelTooltip: 'Use Ghoul Frenzy only with Blood Tap.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().ghoulFrenzy,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FirstDiseaseInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FirstDisease>({\n\tfieldName: 'firstDisease',\n\tlabel: 'First Disease',\n\tlabelTooltip: 'Chose which disease to apply first.',\n\tvalues: [\n\t\t{ name: 'Frost Fever', value: FirstDisease.FrostFever },\n\t\t{ name: 'Blood Plague', value: FirstDisease.BloodPlague },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const ArmyOfTheDeadInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, ArmyOfTheDead>({\n\tfieldName: 'armyOfTheDead',\n\tlabel: 'Army of the Dead',\n\tlabelTooltip: 'Chose how to use Army of the Dead.',\n\tvalues: [\n\t\t{ name: 'Do not use', value: ArmyOfTheDead.DoNotUse },\n\t\t{ name: 'Pre pull', value: ArmyOfTheDead.PreCast },\n\t\t{ name: 'As Major CD', value: ArmyOfTheDead.AsMajorCd },\n\t],\n});\n\nexport const StartingPresenceInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'startingPresence',\n\tlabel: 'Starting Presence',\n\tlabelTooltip: 'Chose the presence you start combat in.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodRuneFillerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodRuneFiller>({\n\tfieldName: 'bloodRuneFiller',\n\tlabel: 'Blood Rune Filler',\n\tlabelTooltip: 'Chose what to spend your free blood runes on.',\n\tvalues: [\n\t\t{ name: 'Blood Strike', value: BloodRuneFiller.BloodStrike },\n\t\t{ name: 'Blood Boil', value: BloodRuneFiller.BloodBoil },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodTapInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodTap>({\n\tfieldName: 'bloodTap',\n\tlabel: 'Blood Tap',\n\tlabelTooltip: 'Chose what to spend your Blood Tap on.',\n\tvalues: [\n\t\t{ name: 'Ghoul Frenzy', value: BloodTap.GhoulFrenzy },\n\t\t{ name: 'Icy Touch', value: BloodTap.IcyTouch },\n\t\t{ name: 'Blood Strike', value: BloodTap.BloodStrikeBT },\n\t\t{ name: 'Blood Boil', value: BloodTap.BloodBoilBT },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseAMSInput = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useAms',\n\tlabel: 'Use AMS',\n\tlabelTooltip: 'Use AMS around predicted damage for a RP gain.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSSuccessRateInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsSuccessRate',\n\tlabel: 'Avg AMS Success %',\n\tlabelTooltip: 'Chance for damage to be taken during the 5 second window of AMS.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSHitInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsHit',\n\tlabel: 'Avg AMS Hit',\n\tlabelTooltip: 'How much on average (+-10%) the character is hit for when AMS is successful.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const OblitDelayDurationInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'oblitDelayDuration',\n\tlabel: 'Oblit Delay (ms)',\n\tlabelTooltip: 'How long a FS/HB/HW can delay a Oblit by.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const DeathKnightRotationConfig = {\n\tinputs: [\n\t\tBloodTapGhoulFrenzy,\n\t\tUseEmpowerRuneWeapon,\n\t\tBloodTapInput,\n\t\tArmyOfTheDeadInput,\n\t\tFirstDiseaseInput,\n\t\tStartingPresenceInput,\n\t\tBloodRuneFillerInput,\n\t\tUseDeathAndDecay,\n\t\tOblitDelayDurationInput,\n\t\tUseAMSInput,\n\t\tAvgAMSSuccessRateInput,\n\t\tAvgAMSHitInput,\n\t\t//SetDeathAndDecayPrio,\n\t],\n};\n","import { Consumes, Explosive, PetFood } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknightMajorGlyph,\n\tDeathknightMinorGlyph,\n} from '../core/proto/deathknight.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport { Deathknight_Rotation_StartingPresence, Deathknight_Rotation_BloodRuneFiller } from '../core/proto/deathknight.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wotlk.wowhead.com/talent-calc and copy the numbers in the url.\nexport const FrostTalents = {\n\tname: 'Frost BL',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '23050005-32005350352203012300033101351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const FrostUnholyTalents = {\n\tname: 'Frost UH',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-32002350352203012300033101351-230200305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyDualWieldTalents = {\n\tname: 'Unholy DW',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320043500002-2300303050032152000150013133051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const Unholy2HTalents = {\n\tname: 'Unholy 2H',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320050500002-2300303150032152000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const BloodTalents = {\n\tname: 'Blood DPS',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2305020530003303231023101351--230220305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfDancingRuneWeapon,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDeathStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const DefaultUnholyRotation = DeathKnightRotation.create({\n  useDeathAndDecay: true,\n  btGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n  useEmpowerRuneWeapon: true,\n  startingPresence: Deathknight_Rotation_StartingPresence.Unholy,\n  bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n  useAms: false,\n});\n\nexport const DefaultUnholyOptions = DeathKnightOptions.create({\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastGhoulFrenzy: true,\n  precastHornOfWinter: true,\n});\n\nexport const DefaultFrostRotation = DeathKnightRotation.create({\n  useDeathAndDecay: false,\n  btGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n  useEmpowerRuneWeapon: true,\n  startingPresence: Deathknight_Rotation_StartingPresence.Unholy,\n  bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n  useAms: false,\n  avgAmsSuccessRate: 0.5,\n  avgAmsHit: 5000.0,\n  oblitDelayDuration: 0,\n});\n\nexport const DefaultFrostOptions = DeathKnightOptions.create({\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n  precastHornOfWinter: true,\n});\n\nexport const OtherDefaults = {\n};\n\nexport const DefaultConsumes = Consumes.create({\n  flask: Flask.FlaskOfEndlessRage,\n  food: Food.FoodDragonfinFilet,\n  defaultPotion: Potions.PotionOfSpeed,\n  petFood: PetFood.PetFoodSpicedMammothTreats,\n  prepopPotion:  Potions.PotionOfSpeed,\n  thermalSapper: true,\n  fillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n\nexport const P1_UNHOLY_2H_PRERAID_PRESET = {\n\tname: 'P1 2H Pre-Raid Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 37397\n    },\n    {\n      \"id\": 37627,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40688,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 44935\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 41257,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40867\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_2H_BIS_PRESET = {\n\tname: 'P1 2H BiS Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        40038,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40384,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_PRERAID_PRESET = {\n\tname: 'P1 DW Pre-Raid Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 37397\n    },\n    {\n      \"id\": 37627,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40688,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 44935\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 41383,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40703,\n      \"enchant\": 44495\n    },\n    {\n      \"id\": 40867\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_BIS_PRESET = {\n\tname: 'P1 DW BiS Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 39421\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40347,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40294,\n      \"enchant\": 38374\n    },\n    {\n      \"id\": 39706,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40717\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 37390\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40189,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40491,\n      \"enchant\": 44495\n    },\n    {\n      \"id\": 42620\n    }\n  ]}`),\n};\n\nexport const P1_FROST_PRE_BIS_PRESET = {\n\tname: 'P1 Pre-Raid Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tgear: EquipmentSpec.fromJsonString(`{  \"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        49110\n      ]\n    },\n    {\n      \"id\": 37397\n    },\n    {\n      \"id\": 37593,\n      \"enchant\": 44871\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 37194,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 37151\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 44250,\n      \"enchant\": 53343\n    },\n    {\n      \"id\": 44250,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40715\n    }\n  ]}`),\n};\n\nexport const P1_FROST_BIS_PRESET = {\n\tname: 'P1 BiS Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        42702\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40189,\n      \"enchant\": 53343\n    },\n    {\n      \"id\": 40189,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n\nexport const P1_FROST_GAME_BIS_PRESET = {\n\tname: 'P1 Game BiS Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n  {\n    \"id\": 51312,\n    \"enchant\": 44879,\n    \"gems\": [\n      41398,\n      49110\n    ]\n  },\n  {\n    \"id\": 54581,\n    \"gems\": [\n      40117\n    ]\n  },\n  {\n    \"id\": 51314,\n    \"enchant\": 44871,\n    \"gems\": [\n      42153\n    ]\n  },\n  {\n    \"id\": 47548,\n    \"enchant\": 44472,\n    \"gems\": [\n      42153\n    ]\n  },\n  {\n    \"id\": 51310,\n    \"enchant\": 44489,\n    \"gems\": [\n      42153,\n      40117\n    ]\n  },\n  {\n    \"id\": 50670,\n    \"enchant\": 44484,\n    \"gems\": [\n      40117,\n      0\n    ]\n  },\n  {\n    \"id\": 50675,\n    \"enchant\": 54999,\n    \"gems\": [\n      40117,\n      40117,\n      0\n    ]\n  },\n  {\n    \"id\": 50620,\n    \"gems\": [\n      40117,\n      40117,\n      40117\n    ]\n  },\n  {\n    \"id\": 51313,\n    \"enchant\": 38374,\n    \"gems\": [\n      40117,\n      40117\n    ]\n  },\n  {\n    \"id\": 54578,\n    \"enchant\": 55016,\n    \"gems\": [\n      40117,\n      40117\n    ]\n  },\n  {\n    \"id\": 50693,\n    \"gems\": [\n      40117\n    ]\n  },\n  {\n    \"id\": 52572,\n    \"gems\": [\n      40117\n    ]\n  },\n  {\n    \"id\": 50363\n  },\n  {\n    \"id\": 54590\n  },\n  {\n    \"id\": 50737,\n    \"enchant\": 53343,\n    \"gems\": [\n      40117\n    ]\n  },\n  {\n    \"id\": 50737,\n    \"enchant\": 53344,\n    \"gems\": [\n      40111\n    ]\n  },\n  {\n    \"id\": 50459\n  }\n]}`),\n};\n\nexport const P1_BLOOD_BIS_PRESET = {\n\tname: 'P1 BiS Blood',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().dancingRuneWeapon,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        40038,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40384,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { Deathknight, Deathknight_Rotation as DeathKnightRotation, DeathknightTalents as DeathKnightTalents, Deathknight_Options as DeathKnightOptions } from '../core/proto/deathknight.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DeathKnightInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class DeathknightSimUI extends IndividualSimUI<Spec.SpecDeathknight> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecDeathknight>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'deathknight-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t\"<p>Blood dps is not implemented.</p>\\\n\t\t\t\t<p>Rotation logic is not fully tuned yet.</p>\\\n\t\t\t\t<p>Pet scaling is likely to not be properly working until further beta testing.</p>\"\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_FROST_BIS_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.88,\n\t\t\t\t\t[Stat.StatAgility]: 1.22,\n\t\t\t\t\t[Stat.StatArmor]: 0.01,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 2.26,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.23,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.15,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.43,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 1.56,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.71,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.07,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultFrostRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.FrostTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultFrostOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectRegular,\n\t\t\t\t\twrathOfAirTotem: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tebonPlaguebringer: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DeathKnightInputs.DeathKnightRotationConfig,\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.SpellDamageDebuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t\tIconInputs.AttackPowerDebuff,\n\t\t\t\tIconInputs.DamageReductionPercentBuff,\n\t\t\t\tIconInputs.MeleeAttackSpeedDebuff,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tDeathKnightInputs.StartingRunicPower,\n\t\t\t\t\tDeathKnightInputs.PetUptime,\n\t\t\t\t\t\n\t\t\t\t\tDeathKnightInputs.PrecastGhoulFrenzy,\n\t\t\t\t\tDeathKnightInputs.PrecastHornOfWinter,\n\t\t\t\t\t\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.FrostTalents,\n\t\t\t\t\tPresets.FrostUnholyTalents,\n\t\t\t\t\tPresets.UnholyDualWieldTalents,\n\t\t\t\t\tPresets.Unholy2HTalents,\n\t\t\t\t\tPresets.BloodTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_FROST_PRE_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROST_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROST_GAME_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_BIS_PRESET,\n\t\t\t\t\tPresets.P1_BLOOD_BIS_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["StartingRunicPower","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","PetUptime","percent","PrecastGhoulFrenzy","InputHelpers.makeSpecOptionsBooleanInput","showWhen","player","getTalents","summonGargoyle","ghoulFrenzy","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","PrecastHornOfWinter","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","UseDeathAndDecay","scourgeStrike","InputHelpers.makeRotationEnumInput","values","name","value","DeathAndDecayPrio","MaxRuneDowntime","MaxDndUptime","getRotation","useDeathAndDecay","UseEmpowerRuneWeapon","BloodTapGhoulFrenzy","FirstDiseaseInput","FirstDisease","FrostFever","BloodPlague","ArmyOfTheDeadInput","ArmyOfTheDead","DoNotUse","PreCast","AsMajorCd","StartingPresenceInput","StartingPresence","Blood","Unholy","BloodRuneFillerInput","BloodRuneFiller","BloodStrike","BloodBoil","BloodTapInput","BloodTap","GhoulFrenzy","IcyTouch","BloodStrikeBT","BloodBoilBT","UseAMSInput","howlingBlast","AvgAMSSuccessRateInput","useAms","AvgAMSHitInput","DeathKnightRotationConfig","inputs","FrostTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","DeathknightMajorGlyph","GlyphOfObliterate","major2","GlyphOfFrostStrike","major3","GlyphOfDisease","minor1","DeathknightMinorGlyph","GlyphOfHornOfWinter","minor2","GlyphOfPestilence","minor3","GlyphOfRaiseDead","FrostUnholyTalents","UnholyDualWieldTalents","GlyphOfTheGhoul","GlyphOfDarkDeath","GlyphOfDeathAndDecay","Unholy2HTalents","GlyphOfIcyTouch","BloodTalents","GlyphOfDancingRuneWeapon","GlyphOfDeathStrike","DefaultUnholyRotation","DeathKnightRotation","btGhoulFrenzy","refreshHornOfWinter","useEmpowerRuneWeapon","startingPresence","Deathknight_Rotation_StartingPresence","bloodRuneFiller","Deathknight_Rotation_BloodRuneFiller","DefaultUnholyOptions","DeathKnightOptions","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","DefaultFrostRotation","avgAmsSuccessRate","avgAmsHit","oblitDelayDuration","DefaultFrostOptions","OtherDefaults","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","petFood","PetFood","PetFoodSpicedMammothTreats","prepopPotion","thermalSapper","fillerExplosive","Explosive","ExplosiveSaroniteBomb","P1_UNHOLY_2H_PRERAID_PRESET","toolbar","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","gear","EquipmentSpec","fromJsonString","P1_UNHOLY_2H_BIS_PRESET","P1_UNHOLY_DW_PRERAID_PRESET","P1_UNHOLY_DW_BIS_PRESET","P1_FROST_PRE_BIS_PRESET","tooltip","P1_FROST_BIS_PRESET","P1_FROST_GAME_BIS_PRESET","P1_BLOOD_BIS_PRESET","dancingRuneWeapon","DeathknightSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatStrength","StatArmor","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatSpellHit","StatSpellCrit","StatSpellHaste","epReferenceStat","displayStats","StatHealth","defaults","Presets.P1_FROST_BIS_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultFrostRotation","talents","Presets.FrostTalents","specOptions","Presets.DefaultFrostOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","moonkinAura","wrathOfAirTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","faerieFire","sunderArmor","ebonPlaguebringer","mangle","heartOfTheCrusader","shadowMastery","playerIconInputs","rotationInputs","DeathKnightInputs.DeathKnightRotationConfig","petConsumeInputs","IconInputs.SpicedMammothTreats","includeBuffDebuffInputs","IconInputs.SpellDamageDebuff","excludeBuffDebuffInputs","IconInputs.StaminaBuff","IconInputs.AttackPowerDebuff","IconInputs.DamageReductionPercentBuff","IconInputs.MeleeAttackSpeedDebuff","otherInputs","DeathKnightInputs.StartingRunicPower","DeathKnightInputs.PetUptime","DeathKnightInputs.PrecastGhoulFrenzy","DeathKnightInputs.PrecastHornOfWinter","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.FrostUnholyTalents","Presets.UnholyDualWieldTalents","Presets.Unholy2HTalents","Presets.BloodTalents","Presets.P1_FROST_PRE_BIS_PRESET","Presets.P1_FROST_GAME_BIS_PRESET","Presets.P1_UNHOLY_DW_PRERAID_PRESET","Presets.P1_UNHOLY_DW_BIS_PRESET","Presets.P1_UNHOLY_2H_PRERAID_PRESET","Presets.P1_UNHOLY_2H_BIS_PRESET","Presets.P1_BLOOD_BIS_PRESET"],"mappings":"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"}