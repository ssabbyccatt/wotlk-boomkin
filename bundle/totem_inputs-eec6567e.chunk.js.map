{"version":3,"file":"totem_inputs-eec6567e.chunk.js","sources":["../../../ui/core/components/totem_inputs.ts"],"sourcesContent":["import { BooleanPicker } from '../components/boolean_picker.js';\nimport { EnumPicker } from '../components/enum_picker.js';\nimport { IconEnumPicker, IconEnumPickerConfig } from '../components/icon_enum_picker.js';\nimport { IconPickerConfig } from '../components/icon_picker.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n} from '../proto/shaman.js';\nimport { Spec } from '../proto/common.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { Player } from '../player.js';\nimport { Sim } from '../sim.js';\nimport { IndividualSimUI } from '../individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nexport type DpsShaman = Spec.SpecEnhancementShaman | Spec.SpecElementalShaman;\n\nexport function TotemsSection(simUI: IndividualSimUI<DpsShaman>, parentElem: HTMLElement): string {\n\tparentElem.innerHTML = `\n\t\t<div class=\"totem-dropdowns-container\"></div>\n\t\t<div class=\"totem-inputs-container\"></div>\n\t`;\n\tconst totemDropdownsContainer = parentElem.getElementsByClassName('totem-dropdowns-container')[0] as HTMLElement;\n\tconst totemInputsContainer = parentElem.getElementsByClassName('totem-inputs-container')[0] as HTMLElement;\n\n\tconst earthTotemPicker = new IconEnumPicker(totemDropdownsContainer, simUI.player, {\n\t\textraCssClasses: [\n\t\t\t'earth-totem-picker',\n\t\t],\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ color: '#ffdfba', value: EarthTotem.NoEarthTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(58643), value: EarthTotem.StrengthOfEarthTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(8143), value: EarthTotem.TremorTotem },\n\t\t],\n\t\tequals: (a: EarthTotem, b: EarthTotem) => a == b,\n\t\tzeroValue: EarthTotem.NoEarthTotem,\n\t\tchangedEvent: (player: Player<DpsShaman>) => player.rotationChangeEmitter,\n\t\tgetValue: (player: Player<DpsShaman>) => player.getRotation().totems?.earth || EarthTotem.NoEarthTotem,\n\t\tsetValue: (eventID: EventID, player: Player<DpsShaman>, newValue: number) => {\n\t\t\tconst newRotation = player.getRotation();\n\t\t\tif (!newRotation.totems)\n\t\t\t\tnewRotation.totems = ShamanTotems.create();\n\t\t\tnewRotation.totems!.earth = newValue;\n\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t},\n\t});\n\n\tconst airTotemPicker = new IconEnumPicker(totemDropdownsContainer, simUI.player, {\n\t\textraCssClasses: [\n\t\t\t'air-totem-picker',\n\t\t],\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ color: '#baffc9', value: AirTotem.NoAirTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(8512), value: AirTotem.WindfuryTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(3738), value: AirTotem.WrathOfAirTotem },\n\t\t],\n\t\tequals: (a: AirTotem, b: AirTotem) => a == b,\n\t\tzeroValue: AirTotem.NoAirTotem,\n\t\tchangedEvent: (player: Player<DpsShaman>) => player.rotationChangeEmitter,\n\t\tgetValue: (player: Player<DpsShaman>) => player.getRotation().totems?.air || AirTotem.NoAirTotem,\n\t\tsetValue: (eventID: EventID, player: Player<DpsShaman>, newValue: number) => {\n\t\t\tconst newRotation = player.getRotation();\n\t\t\tif (!newRotation.totems)\n\t\t\t\tnewRotation.totems = ShamanTotems.create();\n\t\t\tnewRotation.totems!.air = newValue;\n\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t},\n\t});\n\n\tconst fireTotemPicker = new IconEnumPicker(totemDropdownsContainer, simUI.player, {\n\t\textraCssClasses: [\n\t\t\t'fire-totem-picker',\n\t\t],\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ color: '#ffb3ba', value: FireTotem.NoFireTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(58734), value: FireTotem.MagmaTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(58704), value: FireTotem.SearingTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(57722), value: FireTotem.TotemOfWrath },\n\t\t],\n\t\tequals: (a: FireTotem, b: FireTotem) => a == b,\n\t\tzeroValue: FireTotem.NoFireTotem,\n\t\tchangedEvent: (player: Player<DpsShaman>) => player.rotationChangeEmitter,\n\t\tgetValue: (player: Player<DpsShaman>) => player.getRotation().totems?.fire || FireTotem.NoFireTotem,\n\t\tsetValue: (eventID: EventID, player: Player<DpsShaman>, newValue: number) => {\n\t\t\tconst newRotation = player.getRotation();\n\t\t\tif (!newRotation.totems)\n\t\t\t\tnewRotation.totems = ShamanTotems.create();\n\t\t\tnewRotation.totems!.fire = newValue;\n\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t},\n\t});\n\n\tconst waterTotemPicker = new IconEnumPicker(totemDropdownsContainer, simUI.player, {\n\t\textraCssClasses: [\n\t\t\t'water-totem-picker',\n\t\t],\n\t\tnumColumns: 1,\n\t\tvalues: [\n\t\t\t{ color: '#bae1ff', value: WaterTotem.NoWaterTotem },\n\t\t\t{ actionId: ActionId.fromSpellId(58774), value: WaterTotem.ManaSpringTotem },\n\t\t],\n\t\tequals: (a: WaterTotem, b: WaterTotem) => a == b,\n\t\tzeroValue: WaterTotem.NoWaterTotem,\n\t\tchangedEvent: (player: Player<DpsShaman>) => player.rotationChangeEmitter,\n\t\tgetValue: (player: Player<DpsShaman>) => player.getRotation().totems?.water || WaterTotem.NoWaterTotem,\n\t\tsetValue: (eventID: EventID, player: Player<DpsShaman>, newValue: number) => {\n\t\t\tconst newRotation = player.getRotation();\n\t\t\tif (!newRotation.totems)\n\t\t\t\tnewRotation.totems = ShamanTotems.create();\n\t\t\tnewRotation.totems!.water = newValue;\n\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t},\n\t});\n\n\treturn 'Totems';\n}\n"],"names":["TotemsSection","simUI","parentElem","innerHTML","totemDropdownsContainer","getElementsByClassName","IconEnumPicker","player","extraCssClasses","numColumns","values","color","value","EarthTotem","NoEarthTotem","actionId","ActionId","fromSpellId","StrengthOfEarthTotem","TremorTotem","equals","a","b","zeroValue","changedEvent","rotationChangeEmitter","getValue","getRotation","totems","earth","setValue","eventID","newValue","newRotation","ShamanTotems","create","setRotation","AirTotem","NoAirTotem","WindfuryTotem","WrathOfAirTotem","air","FireTotem","NoFireTotem","MagmaTotem","SearingTotem","TotemOfWrath","fire","WaterTotem","NoWaterTotem","ManaSpringTotem","water"],"mappings":"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"}